<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>数据结构 on BoilTask's Blog</title><link>https://boiltask.com/tags/data-structure/</link><description>Recent content in 数据结构 on BoilTask's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 02 Aug 2016 16:51:35 +0800</lastBuildDate><atom:link href="https://boiltask.com/tags/data-structure/index.xml" rel="self" type="application/rss+xml"/><item><title>邻接表的创建与使用</title><link>https://boiltask.com/knowledge/adjacency-list/</link><pubDate>Tue, 02 Aug 2016 16:51:35 +0800</pubDate><guid>https://boiltask.com/knowledge/adjacency-list/</guid><description>&lt;blockquote>
&lt;p>邻接表是图论中常用的一种数据结构。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a class="link" href="http://www.cnblogs.com/tonghao/p/4708661.html" target="_blank" rel="noopener"
>如何构建邻接表【模板】【邻接表与邻接矩阵的选择】&lt;/a>&lt;/p>
&lt;p>邻接表与邻接矩阵有相似的作用：用于储存一个图中所有的节点，但是邻接矩阵比较浪费内存，当数据较小时，邻接矩阵还可以计算&lt;/p>
&lt;p>但是一旦数据较大，用邻接矩阵往往就会超时或者超内存，这时就要使用邻接表来存图了；为方便理解邻接矩阵与邻接表的储存方式。&lt;/p>
&lt;p>我们先规定一组数据&lt;/p>
&lt;blockquote>
&lt;p>1 10
3 5
8 9&lt;/p>
&lt;/blockquote>
&lt;p>我们将所给的点标记为1，其余为0
（1）邻接矩阵（适合小数据点稠密型图）&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">/&lt;/th>
&lt;th style="text-align: left">&lt;/th>
&lt;th style="text-align: left">&lt;/th>
&lt;th style="text-align: left">&lt;/th>
&lt;th style="text-align: left">&lt;/th>
&lt;th style="text-align: left">&lt;/th>
&lt;th style="text-align: left">&lt;/th>
&lt;th style="text-align: left">&lt;/th>
&lt;th style="text-align: left">&lt;/th>
&lt;th style="text-align: left">&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">1&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">1&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;td style="text-align: left">0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>我们可以看到虽然只有三个点我们却不得不开一个10x10的二维数组来存放数据这极大的浪费了空间&lt;/p>
&lt;p>当遍历图时如果数据过大还可能会超时；那么邻接表呢？&lt;/p>
&lt;p>（2）邻接表：（适合大数据点稀疏型图）&lt;/p>
&lt;p>还是以上三个点&lt;/p>
&lt;p>V1————&amp;gt;V10&lt;/p>
&lt;p>V3————&amp;gt;V5&lt;/p>
&lt;p>V8————&amp;gt;V9&lt;/p>
&lt;p>只需要一个链即可完成 大大的节省了内存 ;详情如下图：&lt;/p>
&lt;p>&lt;img src="https://boiltask.com/knowledge/adjacency-list/image-1.png"
width="570"
height="431"
srcset="https://boiltask.com/knowledge/adjacency-list/image-1_hu16179051444541284563.png 480w, https://boiltask.com/knowledge/adjacency-list/image-1_hu828923988968045278.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="317px"
>&lt;/p>
&lt;p>下边附上构建邻接表的通用模板：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&amp;lt;stdio.h&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&amp;lt;string.h&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">head&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">10010&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="c1">//表头，head[i]代表起点是i的边的编号
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">headcnt&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//代表边的总编号
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">List&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">u&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//分别为边的起边、终点、权值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//代表调用时下一条边的编号
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//也就是当前边的上一条边的编号
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="n">edge&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">10010&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="c1">//结构体记录边
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">u&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">edge&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">headcnt&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">u&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">u&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">edge&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">headcnt&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">edge&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">headcnt&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//把u、v、w、存入边的信息中
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">edge&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">headcnt&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">head&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">u&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//把这条边的上一条(调用时的下一条边)存入信息
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">head&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">u&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">headcnt&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//记录这条以u为顶点的边的编号
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//并使总编号+1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d %d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">!=&lt;/span>&lt;span class="n">EOF&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">headcnt&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">head&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">head&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">u&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d %d %d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">u&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">u&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="c1">//读取u、v、w存入表中
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//找到以t为顶点的最大编号边并一直向前寻找
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//直到当前边之前无边
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">head&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">!=-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">edge&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">edge&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">edge&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>参考文章:&lt;a class="link" href="http://www.cnblogs.com/tonghao/p/4708661.html" target="_blank" rel="noopener"
>如何构建邻接表【模板】【邻接表与邻接矩阵的选择】&lt;/a>&lt;/p></description></item></channel></rss>