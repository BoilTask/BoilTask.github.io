<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>算法 on BoilTask's Blog</title><link>https://boiltask.com/tags/algorithm/</link><description>Recent content in 算法 on BoilTask's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 13 Dec 2024 12:50:53 +0800</lastBuildDate><atom:link href="https://boiltask.com/tags/algorithm/index.xml" rel="self" type="application/rss+xml"/><item><title>常用加权随机算法说明与实现</title><link>https://boiltask.com/knowledge/random-weight/</link><pubDate>Fri, 13 Dec 2024 12:50:53 +0800</pubDate><guid>https://boiltask.com/knowledge/random-weight/</guid><description>&lt;p>A-J&lt;/p>
&lt;h2 id="参考文章">&lt;a href="#%e5%8f%82%e8%80%83%e6%96%87%e7%ab%a0" class="header-anchor">&lt;/a>参考文章
&lt;/h2>&lt;p>&lt;a class="link" href="https://lotabout.me/2018/Weighted-Random-Sampling/" target="_blank" rel="noopener"
>加权随机采样 (Weighted Random Sampling) | 三点水&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://guyuecanhui.github.io/2020/12/05/weighted-sample/" target="_blank" rel="noopener"
>加权随机采样 | HCigmoid&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://coolcao.com/2023/07/07/%E5%89%8D%E7%BC%80%E5%92%8C%E5%BA%94%E7%94%A8%E4%B9%8B%E7%94%9F%E6%88%90%E5%8A%A0%E6%9D%83%E9%9A%8F%E6%9C%BA%E6%95%B0/" target="_blank" rel="noopener"
>前缀和应用之生成加权随机数 | coolcao的小站&lt;/a>&lt;/p></description></item><item><title>背包——误认为贪心的陷阱</title><link>https://boiltask.com/knowledge/knapsack-problem/</link><pubDate>Tue, 09 Aug 2016 18:14:29 +0800</pubDate><guid>https://boiltask.com/knowledge/knapsack-problem/</guid><description>&lt;blockquote>
&lt;p>有n件物品，第i件物品(I = 1,2,3…n)的价值是vi, 重量是wi,我们有一个能承重为m的背包，我们选择一些物品放入背包，每样只能放一个，显然放入背包的总重量不超过m。我们要求选择物品的总价值最大，请问如何选择？这里我们假设所有出现的数都是正整数。&lt;/p>&lt;/blockquote>
&lt;p>背包问题如果没有认真理解的话，第一种思路应该会往贪心的方面思考。&lt;/p>
&lt;p>比如先以物品贵重程度排序，先选比较贵重的。&lt;br>
然而对于数据:&lt;/p>
&lt;blockquote>
&lt;p>n = 3, m = 3&lt;br>
v = （2，2，3）&lt;br>
w = （1，2，3）&lt;/p>&lt;/blockquote>
&lt;p>按照先选贵重物品的策略，会先选择价值为3的那个，并且背包装满了，但是如果我们选取前两个物品，总价值可以达到4。&lt;/p>
&lt;p>如果按照性价比排序：&lt;br>
对于数据&lt;/p>
&lt;blockquote>
&lt;p>n = 3, m = 7&lt;br>
v = （2，3，4）&lt;br>
w = （3，4，5）&lt;/p>&lt;/blockquote>
&lt;p>按这种方法因为2/3 &amp;lt; 3/4 &amp;lt; 4 / 5，我们先选择第三件物品，但是选了它之后别的东西放不下了！总价值是4，但如果我们选择前两件物品可以拿到总价值5。&lt;/p>
&lt;p>造成这种现象的原因是贪心的原则为：通过每一步的最优解推导出整体的最优解，然而对于背包问题，因为每一步取或者不取的最优解取决于整体，也就是“动态”的。所以，背包问题成为了一个经典的动态规划问题。&lt;/p>
&lt;p>再看一道部分背包问题&lt;/p>
&lt;blockquote>
&lt;p>一个旅行者有一个最多能装m公斤的背包，然后又n重物品，它们的重量和价值分别为w[i],c[i]，问旅行者能获得的最大价值&lt;/p>&lt;/blockquote>
&lt;p>这一题便是贪心问题，因为我们可以一直选性价比高的直到填满，所以是否贪心取决于每种物品是否只取走一部分。&lt;/p>
&lt;p>而背包问题又衍生出了很多变形，动态规划的方法也不尽相同，所以需要多加练习才能掌握这一题型。&lt;/p>
&lt;p>参考文章：&lt;br>
51NOD&lt;br>
百度知道&lt;br>
百度文库&lt;/p></description></item><item><title>二分查找——与答案进行比较的思维</title><link>https://boiltask.com/knowledge/binary-search/</link><pubDate>Tue, 26 Jul 2016 17:24:57 +0800</pubDate><guid>https://boiltask.com/knowledge/binary-search/</guid><description>&lt;p>二分查找不算是一种算法
我认为其更偏向为一种思想&lt;/p>
&lt;h2 id="核心代码">&lt;a href="#%e6%a0%b8%e5%bf%83%e4%bb%a3%e7%a0%81" class="header-anchor">&lt;/a>核心代码
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mid&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">judge&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mid&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">r&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">mid&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">l&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">mid&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="优点">&lt;a href="#%e4%bc%98%e7%82%b9" class="header-anchor">&lt;/a>优点
&lt;/h2>&lt;p>使正常搜索的O(n)复杂度降为O(logn)&lt;/p>
&lt;h2 id="要求">&lt;a href="#%e8%a6%81%e6%b1%82" class="header-anchor">&lt;/a>要求
&lt;/h2>&lt;p>所要查找的目标数据必须为有序的&lt;/p>
&lt;h2 id="说明">&lt;a href="#%e8%af%b4%e6%98%8e" class="header-anchor">&lt;/a>说明
&lt;/h2>&lt;p>二分查找是通过不断缩小解可能存在的范围，从而求得问题最优解的方法。在学习与竞赛中，可以经常见到二分思想与其它算法结合的题目。&lt;/p>
&lt;h2 id="用处">&lt;a href="#%e7%94%a8%e5%a4%84" class="header-anchor">&lt;/a>用处
&lt;/h2>&lt;h3 id="搜索有序数组中的某数">&lt;a href="#%e6%90%9c%e7%b4%a2%e6%9c%89%e5%ba%8f%e6%95%b0%e7%bb%84%e4%b8%ad%e7%9a%84%e6%9f%90%e6%95%b0" class="header-anchor">&lt;/a>搜索有序数组中的某数
&lt;/h3>&lt;p>可以通过二分查找搜索数组中
1.有无某数
2.某数的位置&lt;/p>
&lt;h3 id="求出方程在误差范围内的解">&lt;a href="#%e6%b1%82%e5%87%ba%e6%96%b9%e7%a8%8b%e5%9c%a8%e8%af%af%e5%b7%ae%e8%8c%83%e5%9b%b4%e5%86%85%e7%9a%84%e8%a7%a3" class="header-anchor">&lt;/a>求出方程在误差范围内的解
&lt;/h3>&lt;p>通过不断二分缩小解的范围&lt;/p>
&lt;h3 id="最大化最小值">&lt;a href="#%e6%9c%80%e5%a4%a7%e5%8c%96%e6%9c%80%e5%b0%8f%e5%80%bc" class="header-anchor">&lt;/a>最大化最小值
&lt;/h3>&lt;h3 id="最小化平均值">&lt;a href="#%e6%9c%80%e5%b0%8f%e5%8c%96%e5%b9%b3%e5%9d%87%e5%80%bc" class="header-anchor">&lt;/a>最小化平均值
&lt;/h3>&lt;p>因为这种问题可以方便的比较&lt;br>
给定一数与正确解的相对大小&lt;br>
所以即使不知道解具体是什么&lt;br>
但可以通过比较缩小解的范围&lt;/p>
&lt;p>参考文章:&lt;br>
《挑战程序设计竞赛》&lt;br>
百度百科&lt;/p></description></item><item><title>欧几里得——GCD引发的讨论</title><link>https://boiltask.com/knowledge/extended-gcd/</link><pubDate>Thu, 21 Jul 2016 15:08:12 +0800</pubDate><guid>https://boiltask.com/knowledge/extended-gcd/</guid><description>&lt;h2 id="欧几里得算法">&lt;a href="#%e6%ac%a7%e5%87%a0%e9%87%8c%e5%be%97%e7%ae%97%e6%b3%95" class="header-anchor">&lt;/a>欧几里得算法
&lt;/h2>&lt;h3 id="任务">&lt;a href="#%e4%bb%bb%e5%8a%a1" class="header-anchor">&lt;/a>任务
&lt;/h3>&lt;p>求两个数a,b的最大公约数gcd(a,b)&lt;/p>
&lt;h3 id="说明">&lt;a href="#%e8%af%b4%e6%98%8e" class="header-anchor">&lt;/a>说明
&lt;/h3>&lt;p>由贝祖定理[若设a,b是整数，则存在整数x,y，使得ax+by=gcd（a,b）]得，gcd(a,b)=(b,a-b),其中a≥b。通过这样不断的迭代，知道b=0，就是原来数对的最大公约数。考虑到只使用减法会超时，我们观察到如果a-b仍然大于b的话，要进行一次同样的操作，就把a减到不足b为止，所以有gcd(a,b)=gcd(b,a mod b)。由此可以在log的时间内求出两个数的gcd。&lt;/p>
&lt;h3 id="程序">&lt;a href="#%e7%a8%8b%e5%ba%8f" class="header-anchor">&lt;/a>程序
&lt;/h3>&lt;p>int gcd(int a,int b);&lt;/p>
&lt;h3 id="复杂度">&lt;a href="#%e5%a4%8d%e6%9d%82%e5%ba%a6" class="header-anchor">&lt;/a>复杂度
&lt;/h3>&lt;p>O(logN)，其中N和a，b同阶&lt;/p>
&lt;h3 id="输入">&lt;a href="#%e8%be%93%e5%85%a5" class="header-anchor">&lt;/a>输入
&lt;/h3>&lt;p>a，b两个整数&lt;/p>
&lt;h3 id="输出">&lt;a href="#%e8%be%93%e5%87%ba" class="header-anchor">&lt;/a>输出
&lt;/h3>&lt;p>a，b的最大公约数&lt;/p>
&lt;h3 id="代码">&lt;a href="#%e4%bb%a3%e7%a0%81" class="header-anchor">&lt;/a>代码
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">gcd&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">?&lt;/span> &lt;span class="nl">a&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">gcd&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="扩展欧几里得">&lt;a href="#%e6%89%a9%e5%b1%95%e6%ac%a7%e5%87%a0%e9%87%8c%e5%be%97" class="header-anchor">&lt;/a>扩展欧几里得
&lt;/h2>&lt;h3 id="任务-1">&lt;a href="#%e4%bb%bb%e5%8a%a1-1" class="header-anchor">&lt;/a>任务
&lt;/h3>&lt;p>求出A,B的最大公约数，且求出X,Y满足AX+BY=GCD(A,B)。&lt;/p>
&lt;h3 id="说明-1">&lt;a href="#%e8%af%b4%e6%98%8e-1" class="header-anchor">&lt;/a>说明
&lt;/h3>&lt;p>要求X,Y，满足：AX+BY=GCD(A,B)。
当B=0时，有X=1，Y=0时等式成立。
当B&amp;gt;0时，在欧几里得算法的基础上，已知：
GCD(A,B)=GCD(B,A mod B)
先递归楸树X’,Y’满足：
BX’+(A mod B)Y’ = GCD(B,A mod B) = GCD(A,B)
然后可以回推，我们将上式化简得：
BX’+(A-A/B*B)Y’=GCD(A,B)
AY’+BX’-(A/B)&lt;em>BY’=GCD(A,B)
这里除法指整除。把含B的因式提取一个B，可得：
AY’+B(X’-A/B&lt;/em>Y’)=GCD(A,B)
故X=Y’，Y=X’-A/B&amp;amp;Y’&lt;/p>
&lt;h3 id="程序-1">&lt;a href="#%e7%a8%8b%e5%ba%8f-1" class="header-anchor">&lt;/a>程序
&lt;/h3>&lt;p>int extend_gcd(int a,int b,int &amp;amp;x,int &amp;amp;y);&lt;/p>
&lt;h3 id="复杂度-1">&lt;a href="#%e5%a4%8d%e6%9d%82%e5%ba%a6-1" class="header-anchor">&lt;/a>复杂度
&lt;/h3>&lt;p>O(logN)，其中N和a，b同阶&lt;/p>
&lt;h3 id="输入-1">&lt;a href="#%e8%be%93%e5%85%a5-1" class="header-anchor">&lt;/a>输入
&lt;/h3>&lt;p>a，b两个整数
&amp;amp;x,&amp;amp;y引用，ax+by=GCD(a,b)的一组解&lt;/p>
&lt;h3 id="输出-1">&lt;a href="#%e8%be%93%e5%87%ba-1" class="header-anchor">&lt;/a>输出
&lt;/h3>&lt;p>a，b的最大公约数
调用后x，y满足方程ax+by=GCD(a,b)。&lt;/p>
&lt;h3 id="代码-1">&lt;a href="#%e4%bb%a3%e7%a0%81-1" class="header-anchor">&lt;/a>代码
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">int extend_gcd(int a,int b,int &amp;amp;x,int &amp;amp;y) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if(b==0) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> x=1;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> y=0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return a;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } else {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int r=extend_gcd(b,a%b,y,x);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> y-=x*(a/b);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return r;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="参考文章">&lt;a href="#%e5%8f%82%e8%80%83%e6%96%87%e7%ab%a0" class="header-anchor">&lt;/a>参考文章
&lt;/h2>&lt;p>ACM国际大学生程序设计竞赛：算法与实现
百度百科&lt;/p></description></item><item><title>二分图——集合中匹配另一集合中数个</title><link>https://boiltask.com/knowledge/bipartite-graph/</link><pubDate>Fri, 01 Apr 2016 07:07:18 +0800</pubDate><guid>https://boiltask.com/knowledge/bipartite-graph/</guid><description>&lt;p>问题示例:&lt;br>
N台计算机K个任务，各个计算机可以处理的任务种类不同，最多能处理多少任务&lt;br>
过山车每个女生只愿与某几个男生相邻，求最多能安排几对&lt;/p>
&lt;p>匈牙利算法&lt;/p>
&lt;p>参考资料&lt;br>
《挑战程序设计竞赛》&lt;br>
《算法竞赛入门经典》&lt;br>
&lt;a class="link" href="https://baike.baidu.com/item/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/9089246" target="_blank" rel="noopener"
>匈牙利算法_百度百科&lt;/a>&lt;br>
&lt;a class="link" href="http://blog.csdn.net/dark_scope/article/details/8880547" target="_blank" rel="noopener"
>趣写算法系列之–匈牙利算法&lt;/a>&lt;/p></description></item><item><title>欧拉函数——小于n的数中与n互质数的数目</title><link>https://boiltask.com/knowledge/eulers-totient-function/</link><pubDate>Sat, 26 Mar 2016 08:17:46 +0800</pubDate><guid>https://boiltask.com/knowledge/eulers-totient-function/</guid><description>&lt;h2 id="简介">&lt;a href="#%e7%ae%80%e4%bb%8b" class="header-anchor">&lt;/a>简介
&lt;/h2>&lt;blockquote>
&lt;p>在数论，对正整数n，欧拉函数是小于n的数中与n互质的数的数目。此函数以其首名研究者欧拉命名(Ruler&amp;rsquo;so totient function)，它又称为Euler&amp;rsquo;s totient function、φ函数、欧拉商数等。 例如φ(8)=4，因为1,3,5,7均和8互质。 从欧拉函数引伸出来在环论方面的事实和拉格朗日定理构成了欧拉定理的证明。&lt;/p>&lt;/blockquote>
&lt;h2 id="性质">&lt;a href="#%e6%80%a7%e8%b4%a8" class="header-anchor">&lt;/a>性质
&lt;/h2>&lt;p>$\varphi \left( x\right) =x\left( 1-\dfrac{1}{p_{1}}\right) \left( 1-\dfrac{1}{p_{2}}\right) \ldots \left( 1-\dfrac{1}{p_{n}}\right)$&lt;/p>
&lt;p>若n是质数p的k次幂&lt;/p>
&lt;p>$\varphi \left( n\right) =p^{k}-p^{k-1}$&lt;/p>
&lt;p>(因为除了p的倍数外，其他数都跟n互质)&lt;br>
若n为质数则&lt;/p>
&lt;p>$\varphi \left( n\right) = n-1$&lt;/p>
&lt;p>这些定理是筛法求欧拉函数的基础&lt;/p>
&lt;h2 id="算法写法">&lt;a href="#%e7%ae%97%e6%b3%95%e5%86%99%e6%b3%95" class="header-anchor">&lt;/a>算法写法
&lt;/h2>&lt;h3 id="直接求解">&lt;a href="#%e7%9b%b4%e6%8e%a5%e6%b1%82%e8%a7%a3" class="header-anchor">&lt;/a>直接求解
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">int euler(int n){ //返回euler(n)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int res=n,a=n;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for(int i=2;i*i&amp;lt;=a;i++){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if(a%i==0){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> res=res/i*(i-1);//先进行除法是为了防止中间数据的溢出
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> while(a%i==0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> a/=i;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if(a&amp;gt;1) res=res/a*(a-1);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return res;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="筛法">&lt;a href="#%e7%ad%9b%e6%b3%95" class="header-anchor">&lt;/a>筛法
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> long long a[1000020];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> memset(a,0,sizeof(a));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> a[1]=1;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for(int i=2; i&amp;lt;1000020; i++)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if(!a[i])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for(int j=i; j&amp;lt;1000020; j+=i) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if(!a[j])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> a[j]=j;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> a[j]=a[j]/i*(i-1);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>参考资料:&lt;br>
&lt;a class="link" href="http://baike.baidu.com/link?url=Mxfd5P91VH6uydQ3pkR9XoTojeNGlLonX9YVfuEZUgvfBjrBf9f3qwAwb4zPVLYLjws2wWPcTrA1PIpjF4XR0q" target="_blank" rel="noopener"
>欧拉函数_百度百科&lt;/a>&lt;br>
&lt;a class="link" href="http://www.tuicool.com/articles/Enmeyya" target="_blank" rel="noopener"
>欧拉函数线性筛法&lt;/a>&lt;br>
&lt;a class="link" href="http://blog.csdn.net/once_hnu/article/details/6302868" target="_blank" rel="noopener"
>欧拉函数_Lur &amp;rsquo;s acm blog&lt;/a>&lt;/p></description></item><item><title>错排——错误引发的讨论</title><link>https://boiltask.com/knowledge/derangement/</link><pubDate>Wed, 02 Mar 2016 22:32:11 +0800</pubDate><guid>https://boiltask.com/knowledge/derangement/</guid><description>&lt;p>错排问题也是见过许多次了&lt;br>
每一次都感觉到无从下手&lt;br>
不过这次找了个时间专门研究了一下&lt;/p>
&lt;p>&lt;a class="link" href="https://boiltask.com/oj/hdu/2048" >【杭电】[2048]神、上帝以及老天爷&lt;/a>&lt;/p>
&lt;p>百度百科:&lt;br>
&lt;a class="link" href="http://baike.baidu.com/view/1926671.htm" target="_blank" rel="noopener"
>全错位排列——百度百科&lt;/a>&lt;br>
&lt;a class="link" href="http://baike.baidu.com/view/668994.htm" target="_blank" rel="noopener"
>错排公式——百度百科&lt;/a>&lt;br>
&lt;a class="link" href="http://baike.baidu.com/view/5487843.htm" target="_blank" rel="noopener"
>错位重排——百度百科&lt;/a>&lt;/p>
&lt;p>核心递归公式&lt;br>
f(n)=(n-1) {f(n-1)+f(n-2)}&lt;/p>
&lt;blockquote>
&lt;p>方法一：&lt;br>
n各有序的元素应有n！种不同的排列。如若一个排列式的所有的元素都不在原来的位置上，则称这个排列为错排。任给一个n，求出1,2,……,n的错排个数Dn共有多少个。&lt;br>
递归关系式为：D(n)=(n-1)(D(n-1)+D(n-2))&lt;br>
D(1)=0,D(2)=1&lt;br>
可以得到:&lt;br>
错排公式为 f(n) = n![1-1/1!+1/2!-1/3!+……+(-1)^n&lt;em>1/n!]&lt;br>
其中,n!=1&lt;/em>2&lt;em>3&lt;/em>&amp;hellip;..*n,&lt;br>
特别地,有0!=0,1!=1.&lt;br>
解释：&lt;br>
n 个不同元素的一个错排可由下述两个步骤完成：&lt;br>
第一步，“错排” 1 号元素（将 1 号元素排在第 2 至第 n 个位置之一），有 n - 1 种方法。&lt;br>
第二步，“错排”其余 n - 1 个元素，按如下顺序进行。视第一步的结果，若1号元素落在第 k 个位 置，第二步就先把 k 号元素“错排”好， k 号元素的不同排法将导致两类不同的情况发生：&lt;br>
1、 k 号元素排在第1个位置，留下的 n - 2 个元素在与它们的编号集相等的位置集上“错排”，有 f(n -2) 种方法；&lt;br>
2、 k 号元素不排第 1 个位置，这时可将第 1 个位置“看成”第 k 个位置(也就是说本来准备放到k位置为元素，可以放到1位置中),于是形成（包括 k 号元素在内的） n - 1 个元素的“错排”，有 f(n - 1) 种方法。据加法原理，完成第二步共有 f(n - 2)+f(n - 1) 种方法。&lt;br>
根据乘法原理， n 个不同元素的错排种数&lt;br>
f(n) = (n-1)[f(n-2)+f(n-1)] (n&amp;gt;2) 。&lt;br>
证毕。&lt;/p>&lt;/blockquote></description></item><item><title>最小生成树——所有点成树有最小总权和</title><link>https://boiltask.com/knowledge/minimum-spanning-tree/</link><pubDate>Sat, 20 Feb 2016 00:16:16 +0800</pubDate><guid>https://boiltask.com/knowledge/minimum-spanning-tree/</guid><description>&lt;h2 id="问题介绍">&lt;a href="#%e9%97%ae%e9%a2%98%e4%bb%8b%e7%bb%8d" class="header-anchor">&lt;/a>问题介绍
&lt;/h2>&lt;p>一个无向图，如果某个子图中任意两个定点都互相连通并且是一棵树，那么这棵树就叫做生成树。如果边上有权值，那么使得边权和最小的生成树叫做最小生成树。&lt;/p>
&lt;h2 id="常用算法">&lt;a href="#%e5%b8%b8%e7%94%a8%e7%ae%97%e6%b3%95" class="header-anchor">&lt;/a>常用算法
&lt;/h2>&lt;h3 id="prim算法">&lt;a href="#prim%e7%ae%97%e6%b3%95" class="header-anchor">&lt;/a>Prim算法
&lt;/h3>&lt;p>找一个起始点加入树，对所有点寻找到到树的距离，从中选择最小的加入树，再次更新距离，从中寻找最小的，直到所有点都加入树。&lt;/p>
&lt;h3 id="kruskal算法">&lt;a href="#kruskal%e7%ae%97%e6%b3%95" class="header-anchor">&lt;/a>Kruskal算法
&lt;/h3>&lt;p>对权值进行排序，然后从小到大进行判断，如果加入这条边，不成环则是所求树的边。&lt;br>
(结合并查集)&lt;/p>
&lt;p>参考文章:
《算法竞赛入门经典》&lt;br>
《挑战程序设计竞赛》&lt;br>
&lt;a class="link" href="http://www.cnblogs.com/biyeymyhjob/archive/2012/07/30/2615542.html" target="_blank" rel="noopener"
>最小生成树-Prim算法和Kruskal算法&lt;/a>&lt;/p></description></item><item><title>最短路——两点最短总权和</title><link>https://boiltask.com/knowledge/shortest-path/</link><pubDate>Wed, 17 Feb 2016 14:49:25 +0800</pubDate><guid>https://boiltask.com/knowledge/shortest-path/</guid><description>&lt;h2 id="单源最短路问题">&lt;a href="#%e5%8d%95%e6%ba%90%e6%9c%80%e7%9f%ad%e8%b7%af%e9%97%ae%e9%a2%98" class="header-anchor">&lt;/a>单源最短路问题
&lt;/h2>&lt;p>求解一个点到其它所有点的最短路的问题&lt;/p>
&lt;h3 id="用bfs求最短路">&lt;a href="#%e7%94%a8bfs%e6%b1%82%e6%9c%80%e7%9f%ad%e8%b7%af" class="header-anchor">&lt;/a>用BFS求最短路
&lt;/h3>&lt;p>《算法竞赛入门经典》&lt;br>
&lt;a class="link" href="http://blog.csdn.net/zzyafyj/article/details/39323369#t2" target="_blank" rel="noopener"
>第六章数据结构基础之图部分——zzyafyj的专栏&lt;/a>&lt;/p>
&lt;h3 id="dijkstra算法">&lt;a href="#dijkstra%e7%ae%97%e6%b3%95" class="header-anchor">&lt;/a>Dijkstra算法
&lt;/h3>&lt;p>&lt;a class="link" href="http://ahalei.blog.51cto.com/4767671/1387799" target="_blank" rel="noopener"
>【坐在马桶上看算法】算法7：Dijkstra最短路算法&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>我们发现dis[3]=12，dis[2]+e[2][3]=1+9=10，dis[3]&amp;gt;dis[2]+e[2][3]，因此dis[3]要更新为10。这个过程有个专业术语叫做“松弛”。即1号顶点到3号顶点的路程即dis[3]，通过2-&amp;gt;3这条边松弛成功。这便是Dijkstra算法的主要思想：通过“边”来松弛1号顶点到其余各个顶点的路程。&lt;br>
每次找到离源点（上面例子的源点就是1号顶点）最近的一个顶点，然后以该顶点为中心进行扩展，最终得到源点到其余所有点的最短路径。&lt;/p>&lt;/blockquote>
&lt;h2 id="任意两点间的最短路问题">&lt;a href="#%e4%bb%bb%e6%84%8f%e4%b8%a4%e7%82%b9%e9%97%b4%e7%9a%84%e6%9c%80%e7%9f%ad%e8%b7%af%e9%97%ae%e9%a2%98" class="header-anchor">&lt;/a>任意两点间的最短路问题
&lt;/h2>&lt;p>求解所有两点间的最短路的问题&lt;/p>
&lt;h3 id="floyd-warshall算法">&lt;a href="#floyd-warshall%e7%ae%97%e6%b3%95" class="header-anchor">&lt;/a>Floyd-Warshall算法
&lt;/h3>&lt;p>&lt;a class="link" href="http://ahalei.blog.51cto.com/4767671/1383613" target="_blank" rel="noopener"
>坐在马桶上看算法：只有五行的Floyd最短路算法&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>最开始只允许经过1号顶点进行中转，接下来只允许经过1和2号顶点进行中转……允许经过1~n号所有顶点进行中转，求任意两点之间的最短路程。用一句话概括就是：从i号顶点到j号顶点只经过前k号点的最短路程。&lt;/p>&lt;/blockquote>
&lt;p>参考文章:&lt;br>
《挑战程序设计竞赛》&lt;br>
&lt;a class="link" href="http://developer.51cto.com/art/201403/433874.htm" target="_blank" rel="noopener"
>坐在马桶上看算法：只有五行的Floyd最短路算法&lt;/a>&lt;br>
&lt;a class="link" href="http://ahalei.blog.51cto.com/4767671/1387799" target="_blank" rel="noopener"
>【坐在马桶上看算法】算法7：Dijkstra最短路算法&lt;/a>&lt;/p></description></item><item><title>并查集——合并与查询</title><link>https://boiltask.com/knowledge/union-find/</link><pubDate>Wed, 27 Jan 2016 23:13:00 +0800</pubDate><guid>https://boiltask.com/knowledge/union-find/</guid><description>&lt;p>&lt;strong>在下终于下定决心写第一篇真正意义上算法的理解博文了！&lt;/strong>&lt;/p>
&lt;p>鼓掌庆祝先~&lt;br>
不过这个肯定不会是一次就写好哒~哈哈哈 慢慢补充&lt;/p>
&lt;h2 id="并查集算法产生的原因意义">&lt;a href="#%e5%b9%b6%e6%9f%a5%e9%9b%86%e7%ae%97%e6%b3%95%e4%ba%a7%e7%94%9f%e7%9a%84%e5%8e%9f%e5%9b%a0%e6%84%8f%e4%b9%89" class="header-anchor">&lt;/a>并查集算法产生的原因(意义)
&lt;/h2>&lt;blockquote>
&lt;p>在一些有N个元素的集合应用问题中，我们通常是在开始时让每个元素构成一个单元素的集合，然后按一定顺序将属于同一组的元素所在的集合合并，其间要反复查找一个元素在哪个集合中。这一类问题近几年来反复出现在信息学的国际国内赛题中，其特点是看似并不复杂，但数据量极大，若用正常的数据结构来描述的话，往往在空间上过大，计算机无法承受；即使在空间上勉强通过，运行的时间复杂度也极高，根本就不可能在比赛规定的运行时间（1～3秒）内计算出试题需要的结果，只能用并查集来描述。&lt;/p>&lt;/blockquote>
&lt;p>并查集是一种树型的数据结构，用于处理一些不相交集合（Disjoint Sets）的合并及查询问题。&lt;br>
也就是对于一些集合之间的相连关系的描述&lt;/p>
&lt;h2 id="并查集算法的操作能做什么">&lt;a href="#%e5%b9%b6%e6%9f%a5%e9%9b%86%e7%ae%97%e6%b3%95%e7%9a%84%e6%93%8d%e4%bd%9c%e8%83%bd%e5%81%9a%e4%bb%80%e4%b9%88" class="header-anchor">&lt;/a>并查集算法的操作(能做什么)
&lt;/h2>&lt;h3 id="初始化">&lt;a href="#%e5%88%9d%e5%a7%8b%e5%8c%96" class="header-anchor">&lt;/a>初始化
&lt;/h3>&lt;p>把每个点所在集合初始化为其自身。&lt;br>
通常来说，这个步骤在每次使用该数据结构时只需要执行一次，无论何种实现方式，时间复杂度均为O(N)。&lt;/p>
&lt;h3 id="查找">&lt;a href="#%e6%9f%a5%e6%89%be" class="header-anchor">&lt;/a>查找
&lt;/h3>&lt;p>查找元素所在的集合，即根节点。&lt;/p>
&lt;h3 id="合并">&lt;a href="#%e5%90%88%e5%b9%b6" class="header-anchor">&lt;/a>合并
&lt;/h3>&lt;p>将两个元素所在的集合合并为一个集合。&lt;br>
通常来说，合并之前，应先判断两个元素是否属于同一集合，这可用上面的“查找”操作实现。&lt;/p>
&lt;h3 id="判断">&lt;a href="#%e5%88%a4%e6%96%ad" class="header-anchor">&lt;/a>判断
&lt;/h3>&lt;p>判断两个元素是否在一个集合之中&lt;/p>
&lt;h3 id="了解操作的意义">&lt;a href="#%e4%ba%86%e8%a7%a3%e6%93%8d%e4%bd%9c%e7%9a%84%e6%84%8f%e4%b9%89" class="header-anchor">&lt;/a>了解操作的意义
&lt;/h3>&lt;p>通过分析并查集的操作可以更好的理解并查集的思想&lt;br>
也就是遇到需要进行这些操作的问题 可以往并查集这方面来思考&lt;/p>
&lt;h2 id="并查集的例题">&lt;a href="#%e5%b9%b6%e6%9f%a5%e9%9b%86%e7%9a%84%e4%be%8b%e9%a2%98" class="header-anchor">&lt;/a>并查集的例题
&lt;/h2>&lt;p>最简单的例题:&lt;/p>
&lt;blockquote>
&lt;p>若某个家族人员过于庞大，要判断两个是否是亲戚，确实还很不容易，给出某个亲戚关系图，求任意给出的两个人是否具有亲戚关系。
规定：x和y是亲戚，y和z是亲戚，那么x和z也是亲戚。如果x,y是亲戚，那么x的亲戚都是y的亲戚，y的亲戚也都是x的亲戚。&lt;/p>&lt;/blockquote>
&lt;p>根据给出的对应关系求出给定两人是否有亲戚关系&lt;br>
此时便涉及到&lt;br>
对集合的合并(合并有亲戚关系的集合)&lt;br>
对集合的查找(查找两人是否为同一集合)&lt;/p>
&lt;p>详细解答过程&lt;br>
&lt;a class="link" href="http://baike.baidu.com/link?url=qhh24jW9uEWHwEQGrGL-fPutXbfJO9CsYexounhzfo2kaj2tij07reLro0zj6ydyZBBtqn1SM8eEUhszZV4R7q#3" target="_blank" rel="noopener"
>并查集_百度百科&lt;/a>&lt;/p>
&lt;h2 id="并查集的注意点">&lt;a href="#%e5%b9%b6%e6%9f%a5%e9%9b%86%e7%9a%84%e6%b3%a8%e6%84%8f%e7%82%b9" class="header-anchor">&lt;/a>并查集的注意点
&lt;/h2>&lt;h3 id="树形数据结构的退化">&lt;a href="#%e6%a0%91%e5%bd%a2%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e7%9a%84%e9%80%80%e5%8c%96" class="header-anchor">&lt;/a>树形数据结构的退化
&lt;/h3>&lt;p>插入节点时的规则如果不加控制&lt;br>
容易导致树形退化&lt;br>
在二叉搜索树中如:以1-2-3-4-5的顺序插入节点&lt;br>
树的高度会变成n 那么所有操作便都需要O(n)时间才能完成&lt;br>
所以同样在并查集为避免退化的发生&lt;br>
可进行如下操作&lt;br>
1.对于每棵树，记录这棵树的高度&lt;br>
2.合并时如果两棵数的高度不同，那么从高度小的向高度大的连边&lt;/p>
&lt;h3 id="路径压缩">&lt;a href="#%e8%b7%af%e5%be%84%e5%8e%8b%e7%bc%a9" class="header-anchor">&lt;/a>路径压缩
&lt;/h3>&lt;p>对于每个节点&lt;br>
1.一旦向上走到了一次根节点，就把这个点到父亲的边改为直接连向根&lt;br>
2.在查询过程中向上经过的所有的节点，都改为直接连到根上&lt;br>
(并没有必要修改高度rank)&lt;br>
高度记录rank[m]为以m为根节点的树的高度&lt;/p>
&lt;p>参考资料:&lt;br>
《挑战程序设计竞赛》&lt;br>
并查集 - 百度百科&lt;/p></description></item><item><title>算法是一种思维</title><link>https://boiltask.com/record/201601131/</link><pubDate>Wed, 13 Jan 2016 17:50:13 +0800</pubDate><guid>https://boiltask.com/record/201601131/</guid><description>&lt;blockquote>
&lt;p>算法是一种思维。&lt;/p>&lt;/blockquote>
&lt;h2 id="前情提要">&lt;a href="#%e5%89%8d%e6%83%85%e6%8f%90%e8%a6%81" class="header-anchor">&lt;/a>前情提要
&lt;/h2>&lt;p>在下这段时间对算法的理解应该要归结于这样一句话&lt;br>
大胆假设 小心论证嘛&lt;/p>
&lt;p>起初最早对算法有个概念 是贪心算法&lt;br>
对贪心算法的表述&lt;br>
百度百科是这样说的&lt;/p>
&lt;blockquote>
&lt;p>贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的是在某种意义上的局部最优解。&lt;br>
贪心算法不是对所有问题都能得到整体最优解，关键是贪心策略的选择，选择的贪心策略必须具备无后效性，即某个状态以前的过程不会影响以后的状态，只与当前状态有关。&lt;/p>&lt;/blockquote>
&lt;p>当时其实对这种说法还是一知半解的(现在好像也是)&lt;br>
所以对算法到底是什么 一直得不到一个明确的答案&lt;/p>
&lt;p>在想明白之前&lt;br>
在下感觉做题的收益有点低&lt;br>
题目地址: &lt;a class="link" href="https://vjudge.net/contest/103724" target="_blank" rel="noopener"
>HPU15级个人赛 - Virtual Judge&lt;/a> (hpuacm)&lt;br>
而这次的个人赛有八道题目&lt;br>
在下结束之后忘了保存代码了&lt;br>
而又感觉去网站提交记录找 没必要&lt;br>
所以对于这些题目的代码&lt;br>
应该会上传一个重新写的版本&lt;/p>
&lt;h2 id="八道题目分别是">&lt;a href="#%e5%85%ab%e9%81%93%e9%a2%98%e7%9b%ae%e5%88%86%e5%88%ab%e6%98%af" class="header-anchor">&lt;/a>八道题目分别是:
&lt;/h2>&lt;p>&lt;img src="https://boiltask.com/record/201601131/image-1.png"
width="454"
height="243"
srcset="https://boiltask.com/record/201601131/image-1_hu_43bd7bb407e7775c.png 480w, https://boiltask.com/record/201601131/image-1_hu_89eccccb31eeca16.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="186"
data-flex-basis="448px"
>&lt;/p>
&lt;p>就不一一截图了&lt;br>
以后慢慢整理&lt;br>
这篇文章就是从解题思路上来简单说说&lt;/p>
&lt;h3 id="problem-a利息计算-">&lt;a href="#problem-a%e5%88%a9%e6%81%af%e8%ae%a1%e7%ae%97-" class="header-anchor">&lt;/a>Problem A 利息计算 :
&lt;/h3>&lt;p>作为一道纯粹的数学计算题&lt;br>
一定程度上考察了对数据类型和输入输出的控制&lt;br>
但是这种题目作为签到题本身&lt;br>
我觉得更重要的目的是让自己找到感觉&lt;br>
不至于在接下的答题中慌乱&lt;br>
而这此次比赛我恰恰犯了这点错误&lt;br>
对一团数字不加思考就选择先做B题&lt;br>
然而……&lt;/p>
&lt;h3 id="problem-b---18岁生日-">&lt;a href="#problem-b---18%e5%b2%81%e7%94%9f%e6%97%a5-" class="header-anchor">&lt;/a>Problem B - 18岁生日 :
&lt;/h3>&lt;p>在下这次个人赛的噩梦之源&lt;br>
又是一个关于闰年的问题&lt;br>
从这一题&lt;br>
在下第一次知道闰年并不是严格的四年一次&lt;/p>
&lt;blockquote>
&lt;p>一个回归年不是365天,而是365天5小时48分46秒,多出的时间就会累积起来,新年就会后移,所以每隔四年就设一个闰年,这一年的二月改为29天.这样,闰年就有366天.但是,这样每一百年又差不多多了一天,所以又规定&amp;quot;百年&amp;quot;不设闰,即&amp;quot;百年24闰&amp;quot;.但百年扣一天闰还是不刚好,于是又规定,公元年数为400倍数者设闰.&lt;/p>&lt;/blockquote>
&lt;p>而我原先一直以为 1900 不是闰年是个数学问题&lt;br>
也就是1988 1902都是闰年(其实并不是)&lt;br>
但是经过这次教训也是学习了&lt;/p>
&lt;p>同时更深层次的&lt;br>
也是对自己的一个教训&lt;br>
太过自信了&lt;br>
也就是过于相信自己是知道出题人的想法的&lt;br>
(不一定被4整除 被100整除的还要能被400整除)&lt;br>
本来一般的题目这种想法就够了&lt;br>
然而这一题我所采用的方法&lt;br>
恰恰用到了四年一闰这个思想&lt;br>
(这个想法是错误的)&lt;br>
具体解法讨论见题解文章&lt;/p>
&lt;h3 id="problem-c---magic-spheres">&lt;a href="#problem-c---magic-spheres" class="header-anchor">&lt;/a>Problem C - Magic Spheres
&lt;/h3>&lt;p>这一题也是迷之WA&lt;br>
各种情况都想不通&lt;br>
然后发现了一句……&lt;/p>
&lt;blockquote>
&lt;p>he needs at least x blue, y violet and z orange spheres.&lt;/p>&lt;/blockquote>
&lt;p>重点是……&lt;/p>
&lt;blockquote>
&lt;p>at least&lt;/p>&lt;/blockquote>
&lt;p>也就是上面的数据没必要完全等于下面的&lt;br>
只要能把上面变化成大于等于下面的就好了&lt;br>
然而给的两组Yes的数据全部满足&lt;br>
等于下面的&lt;br>
所以导致对题目理解错误……&lt;br>
想想原因&lt;br>
就是对于这种英文题目&lt;br>
我一般是对照输入输入猜题目意思&lt;br>
所以导致了先入为主的思想&lt;br>
这也是以后面对英文需要警醒的一件事情&lt;/p>
&lt;h3 id="problem-d---the-best-gift">&lt;a href="#problem-d---the-best-gift" class="header-anchor">&lt;/a>Problem D - The Best Gift
&lt;/h3>&lt;p>这一题神奇之处在于&lt;br>
我竟然没用到题目给的m就顺利AC了-.-&lt;/p>
&lt;h3 id="problem-e---red-and-black">&lt;a href="#problem-e---red-and-black" class="header-anchor">&lt;/a>Problem E - Red and Black
&lt;/h3>&lt;p>这题是道经典的搜索题&lt;/p>
&lt;h3 id="problem-f---load-balancing">&lt;a href="#problem-f---load-balancing" class="header-anchor">&lt;/a>Problem F - Load Balancing
&lt;/h3>&lt;p>负载均衡 序列平衡的一种算法&lt;br>
当时比赛因为前面用的时间太长了&lt;br>
导致这一题都没时间看了……&lt;br>
(主要也是看到别人都WA了好多 就没写)&lt;/p>
&lt;h3 id="problem-g---the-suspects">&lt;a href="#problem-g---the-suspects" class="header-anchor">&lt;/a>Problem G - The Suspects
&lt;/h3>&lt;p>按照题意应该是并查集&lt;br>
不过当时我的第一眼思路是往搜索想的&lt;br>
最终也是做出来了&lt;/p>
&lt;h3 id="problem-h---networking">&lt;a href="#problem-h---networking" class="header-anchor">&lt;/a>Problem H - Networking
&lt;/h3>&lt;p>最小生成树问题&lt;br>
之前做过类似的了&lt;/p>
&lt;h2 id="思考">&lt;a href="#%e6%80%9d%e8%80%83" class="header-anchor">&lt;/a>思考
&lt;/h2>&lt;p>经过这八道题&lt;br>
其实我在思考到底什么是算法&lt;br>
如果它只是一种解题方法的话&lt;br>
我觉得似乎并不恰当&lt;/p>
&lt;p>比如有些题目 如&lt;br>
Problem G - The Suspects&lt;br>
属于简单的并查集&lt;br>
但如果用搜索却也并不难理解&lt;/p>
&lt;p>又或者&lt;br>
Problem E - Red and Black&lt;br>
属于搜索 但bfs dfs却都可以解答&lt;/p>
&lt;p>那么 什么是算法&lt;br>
我认为把算法归结为一种解题思维&lt;br>
或许更加恰当&lt;/p>
&lt;p>也就是 不需要把算法看做一种模板 而是一种解题的思路&lt;br>
区别是什么呢&lt;br>
我觉得就是判断一道题是像是某某算法的题目&lt;br>
脑海里第一意识出现的是算法的思想 还是算法的代码框架&lt;/p>
&lt;p>我觉得更好的情况还是理解算法的本质&lt;br>
这样无论题目千变万化 总可以找到解题的钥匙&lt;br>
而不用纠结于它到底符合哪一个模板&lt;/p>
&lt;p>算法是一种思维&lt;br>
这便是我现阶段对算法的理解&lt;br>
先照着这条路走吧&lt;br>
然后慢慢修正自己的观点&lt;/p>
&lt;p>更何况&lt;br>
无论怎样理解&lt;br>
对一个算法还是要认真学习的&lt;br>
甚至说更加努力的去学习&lt;br>
探究其本质的一些东西&lt;/p>
&lt;p>话说我最近貌似开始养成&lt;br>
把一篇文章分成几天来写的习惯了-.-&lt;br>
貌似有时候会影响思路~&lt;br>
哈哈哈&lt;br>
尽量还是一口气写完吧~&lt;br>
适当补充还是可以的&lt;/p></description></item></channel></rss>