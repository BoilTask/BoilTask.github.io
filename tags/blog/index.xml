<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Blog on BoilTask&#39;s Blog</title>
        <link>https://boiltask.com/tags/blog/</link>
        <description>Recent content in Blog on BoilTask&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-CN</language>
        <lastBuildDate>Thu, 03 Apr 2025 09:06:12 +0800</lastBuildDate><atom:link href="https://boiltask.com/tags/blog/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>给HUGO博客引入pangu.js</title>
        <link>https://boiltask.com/record/hugo-pangu/</link>
        <pubDate>Thu, 03 Apr 2025 09:06:12 +0800</pubDate>
        
        <guid>https://boiltask.com/record/hugo-pangu/</guid>
        <description>&lt;p&gt;之前经常纠结中英文混排时的排版问题，因此引入了&lt;code&gt;pangu.js&lt;/code&gt;来优化排版效果。&lt;/p&gt;
&lt;p&gt;官方仓库：&lt;a class=&#34;link&#34; href=&#34;https://github.com/vinta/pangu.js&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;vinta/pangu.js: Paranoid text spacing in JavaScript&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;调用&lt;code&gt;pangu.autoSpacingPage()&lt;/code&gt;即可将页面转换为美化之后的结果。&lt;/p&gt;
&lt;p&gt;由于&lt;code&gt;JS&lt;/code&gt;的加载与处理需要时间，直接这么写的话，体验上是用户会先看到处理前的页面，然后短暂停留后刷新为新内容，这就导致体验上很奇怪。&lt;/p&gt;
&lt;p&gt;解决思路的话，可以考虑先隐藏页面，等&lt;code&gt;DOM&lt;/code&gt;加载完，先进行&lt;code&gt;pangu.js&lt;/code&gt;的处理，完毕后再重新显示页面。&lt;/p&gt;
&lt;p&gt;需要注意&lt;code&gt;autoSpacingPage&lt;/code&gt;函数会异步处理，可以改为阻塞版本的&lt;code&gt;spacingPage&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;参考代码&#34;&gt;&lt;a href=&#34;#%e5%8f%82%e8%80%83%e4%bb%a3%e7%a0%81&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;参考代码
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c&#34;&gt;/* 初始隐藏页面内容，避免显示未经处理的文本 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;visibility&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;hidden&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;module&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pangu&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;https://jspm.dev/pangu&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;DOMContentLoaded&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;pangu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;spacingPage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;visibility&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;visible&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>又双叒叕一次重新梳理了一下博客</title>
        <link>https://boiltask.com/record/202411081/</link>
        <pubDate>Fri, 08 Nov 2024 12:46:38 +0800</pubDate>
        
        <guid>https://boiltask.com/record/202411081/</guid>
        <description>&lt;p&gt;最近在整理之前写的事件系统：&lt;a class=&#34;link&#34; href=&#34;https://www.fab.com/zh-cn/listings/a3991470-a7b9-474d-8038-289dad0b0497&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DidaEvent&lt;/a&gt;，为此创建了一个&lt;a class=&#34;link&#34; href=&#34;https://event.didapipa.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;文档&lt;/a&gt;网站。 使用了&lt;code&gt;Hugo&lt;/code&gt;来做了网站生成系统，体验还不错，因此决定把博客也从&lt;code&gt;WordPress&lt;/code&gt;迁移到&lt;code&gt;Hugo&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;为什么要迁移&#34;&gt;&lt;a href=&#34;#%e4%b8%ba%e4%bb%80%e4%b9%88%e8%a6%81%e8%bf%81%e7%a7%bb&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;为什么要迁移
&lt;/h2&gt;&lt;p&gt;本身其实对静态建站方案是比较排斥的，一是和传统的直接在线编辑的方式比没有那么直观，二来有服务器的方案感觉也更加灵活。&lt;/p&gt;
&lt;p&gt;但是自己维护服务器的成本相对还是比较高的，虽然使用了&lt;code&gt;WordPress&lt;/code&gt;，但本身我对&lt;code&gt;PHP&lt;/code&gt;的发展也不太看好，而且相对来说也过于重了。&lt;/p&gt;
&lt;p&gt;经过过去的经验，服务器往往由于续费、维护等原因需要迁移，这就导致每次博客都需要重新折腾一番。让写作这件事情也变得成本更高，也很难坚持下来。&lt;/p&gt;
&lt;p&gt;因此使用类似于&lt;code&gt;Hugo&lt;/code&gt;之类的静态建站方案就突显出了优势，一是有免费的托管方案，二来直接&lt;code&gt;Markdown&lt;/code&gt;的写作方式，也能更灵活的运用起来手头的工具。&lt;/p&gt;
&lt;p&gt;而且真需要一些特殊的模块，其实也可以自己自定义一些空间和页面，因此应该也可以符合目前的需求。&lt;/p&gt;
&lt;h2 id=&#34;为什么选择hugo&#34;&gt;&lt;a href=&#34;#%e4%b8%ba%e4%bb%80%e4%b9%88%e9%80%89%e6%8b%a9hugo&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;为什么选择Hugo
&lt;/h2&gt;&lt;p&gt;备选的静态网站生成器有很多，比如&lt;code&gt;Jekyll&lt;/code&gt;、&lt;code&gt;Hexo&lt;/code&gt;等等，为什么选择&lt;code&gt;Hugo&lt;/code&gt;呢？&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Hexo&lt;/code&gt;是用的&lt;code&gt;Node.js&lt;/code&gt;，生成速度较慢，因此不再考虑了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Jekyll&lt;/code&gt;具有Github的官方支持，可以直接在&lt;code&gt;Github&lt;/code&gt;上部署。但是尝试了一个&lt;code&gt;Jekyll&lt;/code&gt;的主题，感觉太复杂了。
而且其实我是希望数据源与最后生成的文件分开的，这样也方便管理。&lt;/p&gt;
&lt;p&gt;最后选择了&lt;code&gt;Hugo&lt;/code&gt;，一是有合适的主题，二来生成速度快，三来使用的&lt;code&gt;Golang&lt;/code&gt;语言也是我比较看好的一种语言。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DidaEvent&lt;/code&gt;的文档使用的主题是&lt;a class=&#34;link&#34; href=&#34;https://github.com/thuliteio/doks&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Doks&lt;/a&gt;，博客使用的主题是&lt;a class=&#34;link&#34; href=&#34;https://github.com/CaiJimmy/hugo-theme-stack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Stack&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;迁移过程&#34;&gt;&lt;a href=&#34;#%e8%bf%81%e7%a7%bb%e8%bf%87%e7%a8%8b&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;迁移过程
&lt;/h2&gt;&lt;p&gt;简单的部署好框架后，感觉整体还是比较满意的。&lt;/p&gt;
&lt;p&gt;剩下的就是需要迁移原先&lt;code&gt;WordPress&lt;/code&gt;的文章了，本来都做好一点一点复制的准备了，不过好在发现了一款插件：&lt;a class=&#34;link&#34; href=&#34;https://github.com/SchumacherFM/wordpress-to-hugo-exporter&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;wordpress-to-hugo-exporter&lt;/a&gt;。
经过插件的导出，得到了一个文章的压缩包，又根据我自己的需求简单调整了一下，一个大体的博客就算搭建完毕了。&lt;/p&gt;
&lt;p&gt;不过有一些陈年老文章，还有一些图片需要再整理一下，就后续再慢慢翻新吧。&lt;/p&gt;
&lt;h2 id=&#34;评论区配置&#34;&gt;&lt;a href=&#34;#%e8%af%84%e8%ae%ba%e5%8c%ba%e9%85%8d%e7%bd%ae&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;评论区配置
&lt;/h2&gt;&lt;p&gt;评论区配置的时候还是遇见了一些麻烦，详见：&lt;a class=&#34;link&#34; href=&#34;https://boiltask.com/knowledge/hugo-giscus/&#34; &gt;Hogo中Giscus配置&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
