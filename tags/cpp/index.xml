<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C/C++ on BoilTask's Blog</title><link>https://boiltask.com/tags/cpp/</link><description>Recent content in C/C++ on BoilTask's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 03 Apr 2025 09:03:48 +0800</lastBuildDate><atom:link href="https://boiltask.com/tags/cpp/index.xml" rel="self" type="application/rss+xml"/><item><title>虚幻引擎中ASan相关机制</title><link>https://boiltask.com/ue/ue-asan/</link><pubDate>Thu, 03 Apr 2025 09:03:48 +0800</pubDate><guid>https://boiltask.com/ue/ue-asan/</guid><description>&lt;h2 id="简介">&lt;a href="#%e7%ae%80%e4%bb%8b" class="header-anchor">&lt;/a>简介
&lt;/h2>&lt;p>在排查一些内存问题（野指针、越界访问等）时，可以使用AddressSanitizer（ASan）工具。&lt;/p>
&lt;p>比起修改为Stomp分配器的方式，ASan的实现以性能降低约一半的代价，也能扫描出来很多问题。&lt;/p>
&lt;p>性能指标参考：&lt;a class="link" href="https://github.com/google/sanitizers/wiki/AddressSanitizerPerformanceNumbers" target="_blank" rel="noopener"
>AddressSanitizerPerformanceNumbers · google/sanitizers Wiki&lt;/a>&lt;/p>
&lt;h2 id="linux下ds使用">&lt;a href="#linux%e4%b8%8bds%e4%bd%bf%e7%94%a8" class="header-anchor">&lt;/a>Linux下DS使用
&lt;/h2>&lt;h3 id="基本流程">&lt;a href="#%e5%9f%ba%e6%9c%ac%e6%b5%81%e7%a8%8b" class="header-anchor">&lt;/a>基本流程
&lt;/h3>&lt;p>考虑开启 &lt;code>ASan&lt;/code> 对流程和性能的影响，一般需要单独部署一些炮灰环境。&lt;/p>
&lt;ol>
&lt;li>在原有的打包参数之后添加&lt;code>-EnableAsan&lt;/code>标识，用来开启&lt;code>ASan&lt;/code>相关的编译参数&lt;/li>
&lt;li>启动时通过设置环境变量&lt;code>ASAN_OPTIONS&lt;/code>来控制ASan的相关配置&lt;/li>
&lt;li>在原先的启动参数之后加上&lt;code>-ansimalloc&lt;/code>标识&lt;/li>
&lt;li>当遇见异常时，检查&lt;code>stderr&lt;/code>的输出&lt;/li>
&lt;li>可以选择配置&lt;code>log_path&lt;/code>来指定异常时的输出文件&lt;/li>
&lt;/ol>
&lt;h3 id="堆栈获取">&lt;a href="#%e5%a0%86%e6%a0%88%e8%8e%b7%e5%8f%96" class="header-anchor">&lt;/a>堆栈获取
&lt;/h3>&lt;p>通过指定&lt;code>ASAN_SYMBOLIZER_PATH&lt;/code>可以使得输出的信息里自带堆栈，使用了llvm- symbolizer ，性能比起addr2line可以有较高的提升。&lt;/p>
&lt;p>详见：&lt;a class="link" href="https://github.com/google/sanitizers/wiki/AddressSanitizerCallStack" target="_blank" rel="noopener"
>AddressSanitizerCallStack · google/sanitizers Wiki&lt;/a>&lt;/p>
&lt;p>会使得输出日志稍微慢几秒，目测可以接受。&lt;/p>
&lt;p>可以使用格式文本设定&lt;code>stack_trace_format&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// %% - represents a &amp;#39;%&amp;#39; character;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// %n - frame number (copy of frame_no);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// %p - PC in hex format;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// %m - path to module (binary or shared object);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// %o - offset in the module in hex format;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// %f - function name;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// %q - offset in the function in hex format (*if available*);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// %s - path to source file;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// %l - line in the source file;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// %c - column in the source file;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// %F - if function is known to be &amp;lt;foo&amp;gt;, prints &amp;#34;in &amp;lt;foo&amp;gt;&amp;#34;, possibly
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// followed by the offset in this function, but only if source file
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// is unknown;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// %S - prints file/line/column information;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// %L - prints location information: file/line/column, if it is known, or
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// module+offset if it is known, or (&amp;lt;unknown module&amp;gt;) string.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// %M - prints module basename and offset, if it is known, or PC.
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>不过测试下来似乎未取到函数行号，判断是&lt;code>llvm&lt;/code>的问题，&lt;code>addr2line&lt;/code>就可以。&lt;/p>
&lt;p>&lt;code>windows&lt;/code>下使用&lt;code>llvm-symbolizer.exe&lt;/code>也可以成功取到。&lt;/p>
&lt;p>同时，测试下来&lt;code>windows&lt;/code>下使用&lt;code>MinGW&lt;/code>版本的&lt;code>addr2line&lt;/code>也可以取到堆栈，但是慢到无法接收。&lt;/p>
&lt;h3 id="推荐配置">&lt;a href="#%e6%8e%a8%e8%8d%90%e9%85%8d%e7%bd%ae" class="header-anchor">&lt;/a>推荐配置
&lt;/h3>&lt;p>开启堆栈输出并设置日志路径：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Bash" data-lang="Bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">ASAN_OPTIONS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;symbolize=1:print_stacktrace=1:log_path=/home/crash/ds-&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">版本&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">-asan-crash.log&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="问题记录">&lt;a href="#%e9%97%ae%e9%a2%98%e8%ae%b0%e5%bd%95" class="header-anchor">&lt;/a>问题记录
&lt;/h2>&lt;h3 id="开启asan之后加载过慢">&lt;a href="#%e5%bc%80%e5%90%afasan%e4%b9%8b%e5%90%8e%e5%8a%a0%e8%bd%bd%e8%bf%87%e6%85%a2" class="header-anchor">&lt;/a>开启ASan之后加载过慢
&lt;/h3>&lt;p>需要检查&lt;code>fast_unwind_on_malloc&lt;/code>是否被设置为0，如果&lt;code>fast_unwind_on_malloc&lt;/code>被关闭，则会极大地影响性能。&lt;/p>
&lt;p>详见：&lt;a class="link" href="https://developer.android.google.cn/ndk/guides/asan?hl=zh-cn#stack-traces" target="_blank" rel="noopener"
>Address Sanitizer  |  Android NDK  |  Android Developers&lt;/a>&lt;/p>
&lt;h2 id="堆栈还原">&lt;a href="#%e5%a0%86%e6%a0%88%e8%bf%98%e5%8e%9f" class="header-anchor">&lt;/a>堆栈还原
&lt;/h2>&lt;p>写了一个&lt;code>golang&lt;/code>的脚本用于快速的分析堆栈：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-golang" data-lang="golang">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;bufio&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;os&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;os/exec&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;strings&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">convertStackToAddr2line&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inputFile&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outputFile&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">binaryPath&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">infile&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inputFile&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;无法打开输入文件: %v&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">defer&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">infile&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">File&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">infile&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;关闭输入文件时出错: %v\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}(&lt;/span>&lt;span class="nx">infile&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">outfile&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">outputFile&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;无法创建输出文件: %v&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">defer&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">outfile&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">File&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">outfile&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;关闭输出文件时出错: %v\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}(&lt;/span>&lt;span class="nx">outfile&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">scanner&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">bufio&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewScanner&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">infile&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">writer&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">bufio&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewWriter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">outfile&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">defer&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">writer&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">bufio&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Writer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">writer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Flush&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;刷新输出文件时出错: %v\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}(&lt;/span>&lt;span class="nx">writer&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">scanner&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Scan&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">line&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">strings&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">TrimSpace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">scanner&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Text&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">strings&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">HasPrefix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">line&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;#&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">parts&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">strings&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fields&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">line&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">address&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">part&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">parts&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">strings&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">HasPrefix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">part&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;0x&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">address&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">part&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">address&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">cmd&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">exec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Command&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;addr2line&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;-e&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">binaryPath&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">address&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">output&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">cmd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Output&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;执行 addr2line 失败: %v\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">s&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">strings&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">TrimSpace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">output&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">writer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WriteString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;\n&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">writer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WriteString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">line&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;\n&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">line&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">scanner&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Err&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;读取文件时出错: %v&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;转换完成，结果已保存到 %s\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outputFile&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Args&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Usage: go run main.go &amp;lt;input_file&amp;gt; &amp;lt;output_file&amp;gt; &amp;lt;binary_path&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">inputFile&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Args&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">outputFile&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Args&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">binaryPath&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Args&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">convertStackToAddr2line&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inputFile&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outputFile&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">binaryPath&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;错误: %v\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="参考文章">&lt;a href="#%e5%8f%82%e8%80%83%e6%96%87%e7%ab%a0" class="header-anchor">&lt;/a>参考文章
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://dev.epicgames.com/documentation/zh-cn/unreal-engine/using-clang-sanitizers-in-unreal-engine-projects" target="_blank" rel="noopener"
>在虚幻引擎项目中使用Clang检测工具 | 虚幻引擎 5.5 文档 | Epic Developer Community&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/google/sanitizers" target="_blank" rel="noopener"
>google/sanitizers: AddressSanitizer, ThreadSanitizer, MemorySanitizer&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>虚幻引擎中网络角色Role相关概念</title><link>https://boiltask.com/ue/network-role/</link><pubDate>Wed, 02 Apr 2025 13:17:46 +0800</pubDate><guid>https://boiltask.com/ue/network-role/</guid><description>&lt;h2 id="简介">&lt;a href="#%e7%ae%80%e4%bb%8b" class="header-anchor">&lt;/a>简介
&lt;/h2>&lt;p>在Actor的复制过程中，需要关心两个属性，Role与RemoteRole。&lt;/p>
&lt;p>通过这两个属性，可以明确地知道：&lt;/p>
&lt;ul>
&lt;li>谁拥有Actor的主控权&lt;/li>
&lt;li>Actor是否被复制&lt;/li>
&lt;li>复制模式&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>首先一件要确定的事，就是谁拥有特定 actor 的主控权。要确定当前运行的引擎实例是否有主控者，需要查看 Role 属性是否为 &lt;code>ROLE_Authority&lt;/code>。如果是，就表明这个运行中的 &lt;strong>虚幻引擎&lt;/strong> 实例负责掌管此 actor（决定其是否被复制）。&lt;/p>
&lt;p>如果 Role 是 &lt;code>ROLE_Authority&lt;/code>，RemoteRole 是 &lt;code>ROLE_SimulatedProxy&lt;/code> 或 &lt;code>ROLE_AutonomousProxy&lt;/code>，就说明这个引擎实例负责将此 actor 复制到远程连接。&lt;/p>
&lt;/blockquote>
&lt;p>简单来说：&lt;/p>
&lt;p>对于单机模式，Actor的Role与RemoteRole很显然都是ROLE_Authority。&lt;/p>
&lt;p>对于网络模型下，Role代表本地对于Actor的角色，RemoteRole代表对端对于Actor的角色。&lt;/p>
&lt;p>下面将重点描述多人游戏时的相关机制。&lt;/p>
&lt;h2 id="属性类型">&lt;a href="#%e5%b1%9e%e6%80%a7%e7%b1%bb%e5%9e%8b" class="header-anchor">&lt;/a>属性类型
&lt;/h2>&lt;h3 id="role_authority">&lt;a href="#role_authority" class="header-anchor">&lt;/a>ROLE_Authority
&lt;/h3>&lt;p>代表最高权限，通常是服务器持有的状态。&lt;/p>
&lt;p>如果客户端本地生成的一个不同步的Actor，其Role有可能也为ROLE_Authority，因为此时这个客户端对这个Actor具有绝对的权限。&lt;/p>
&lt;h3 id="role_simulatedproxy">&lt;a href="#role_simulatedproxy" class="header-anchor">&lt;/a>ROLE_SimulatedProxy
&lt;/h3>&lt;p>被动模拟角色，由服务器控制，客户端仅接受同步数据。&lt;/p>
&lt;p>比如对于客户端A视角下的另一个角色，它的Role就有可能是ROLE_SimulatedProxy。&lt;/p>
&lt;h3 id="role_autonomousproxy">&lt;a href="#role_autonomousproxy" class="header-anchor">&lt;/a>ROLE_AutonomousProxy
&lt;/h3>&lt;p>主控端角色，通常代表由客户端直接控制，服务器接收控制的输入来同步其状态。&lt;/p>
&lt;p>比如对于客户端A视角下的自身角色，它的Role就有可能是ROLE_AutonomousProxy，接收输入之后发给服务器更新其状态。&lt;/p>
&lt;h2 id="remoterole与role的区别">&lt;a href="#remoterole%e4%b8%8erole%e7%9a%84%e5%8c%ba%e5%88%ab" class="header-anchor">&lt;/a>RemoteRole与Role的区别
&lt;/h2>&lt;p>RemoteRole与Role对应，代表对端对Actor的角色定义，是Role的另一个视角。&lt;/p>
&lt;p>当Actor在服务器为ROLE_Authority，他在服务器上的RemoteRole为ROLE_SimulatedProxy，对应的客户端的Role为ROLE_SimulatedProxy，RemoteRole为ROLE_Authority。&lt;/p>
&lt;p>对于不同的数值观察者，它们的 Role 和 RemoteRole 值&lt;strong>可能&lt;/strong>发生对调。&lt;/p>
&lt;blockquote>
&lt;p>注意这个可能的描述&lt;/p>
&lt;p>比如客户端Role为ROLE_AutonomousProxy，RemoteRole为ROLE_Authority的角色（自己操作的那个），他在服务器上的Role为ROLE_Authority，但是RemoteRole可能为ROLE_SimulatedProxy。&lt;/p>
&lt;/blockquote>
&lt;h2 id="角色组合">&lt;a href="#%e8%a7%92%e8%89%b2%e7%bb%84%e5%90%88" class="header-anchor">&lt;/a>角色组合
&lt;/h2>&lt;h3 id="常见role与remoterole的组合">&lt;a href="#%e5%b8%b8%e8%a7%81role%e4%b8%8eremoterole%e7%9a%84%e7%bb%84%e5%90%88" class="header-anchor">&lt;/a>常见Role与RemoteRole的组合
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">&lt;strong>本地Role&lt;/strong>&lt;/th>
&lt;th style="text-align: center">&lt;strong>远程RemoteRole&lt;/strong>&lt;/th>
&lt;th style="text-align: center">&lt;strong>场景说明&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">ROLE_Authority&lt;/td>
&lt;td style="text-align: center">ROLE_SimulatedProxy&lt;/td>
&lt;td style="text-align: center">服务器视角，控制Actor，客户端仅接收同步数据（如NPC）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">ROLE_SimulatedProxy&lt;/td>
&lt;td style="text-align: center">ROLE_Authority&lt;/td>
&lt;td style="text-align: center">客户端视角，客户端接收服务器同步的Actor（如静态场景物体）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">ROLE_AutonomousProxy&lt;/td>
&lt;td style="text-align: center">ROLE_SimulatedProxy&lt;/td>
&lt;td style="text-align: center">客户端视角，客户端控制Actor，服务器同步其状态（如玩家角色）。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="区分simulatedproxy与autonomousproxy">&lt;a href="#%e5%8c%ba%e5%88%86simulatedproxy%e4%b8%8eautonomousproxy" class="header-anchor">&lt;/a>区分SimulatedProxy与AutonomousProxy
&lt;/h2>&lt;p>参考官方文档的描述，由于Actor的同步具有间隔，为了弥补这个缺陷，客户端在模拟时采取两种策略：&lt;/p>
&lt;p>ROLE_SimulatedProxy通常直接根据服务器同步的信息进行模拟。&lt;/p>
&lt;p>ROLE_AutonomousProxy通常会考虑客户端自身的输入，通过这部分输入来补足信息，而非只通过服务器的信息推算。&lt;/p>
&lt;h2 id="参考文档">&lt;a href="#%e5%8f%82%e8%80%83%e6%96%87%e6%a1%a3" class="header-anchor">&lt;/a>参考文档
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://dev.epicgames.com/documentation/zh-cn/unreal-engine/actor-role-and-remote-role-in-unreal-engine" target="_blank" rel="noopener"
>虚幻引擎Actor的 Role 和 RemoteRole属性 | 虚幻引擎 5.5 文档 | Epic Developer Community&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>虚幻引擎中角色移动相关机制</title><link>https://boiltask.com/ue/character-movement/</link><pubDate>Wed, 02 Apr 2025 12:54:31 +0800</pubDate><guid>https://boiltask.com/ue/character-movement/</guid><description>&lt;h2 id="简介">&lt;a href="#%e7%ae%80%e4%bb%8b" class="header-anchor">&lt;/a>简介
&lt;/h2>&lt;p>本文主要用于整理虚幻引擎中移动相关的机制。&lt;/p>
&lt;p>内容可能摘录自各个文章、论坛、文档等，仅用作记录。&lt;/p>
&lt;h2 id="基础简介">&lt;a href="#%e5%9f%ba%e7%a1%80%e7%ae%80%e4%bb%8b" class="header-anchor">&lt;/a>基础简介
&lt;/h2>&lt;p>移动是一个非常重要并且较为复杂的模块，&lt;code>UnrealEngine&lt;/code>对于移动的实现使用了组合模式，在描述&lt;code>Actor&lt;/code>的移动时，含义是具有移动组件的&lt;code>Actor&lt;/code>可以移动。&lt;/p>
&lt;p>移动组件的基类为&lt;code>UMovementComponent&lt;/code>，提供基本的移动功能，有多个不同功能的子类，一些子类移动组件专门用于服务一种特殊的&lt;code>Actor&lt;/code>，比如通常代表玩家的&lt;code>ACharacter&lt;/code>，对应的移动组件&lt;code>UCharacterMovementComponent&lt;/code>。&lt;/p>
&lt;p>&lt;code>Actor&lt;/code>虽然代表在&lt;code>World&lt;/code>中的一个实体，但是本身是没有位置概念的。&lt;code>Actor&lt;/code>的位置由其具有的&lt;code>USceneComponent&lt;/code>赋予。因此移动的本质，就是改变&lt;code>Actor&lt;/code>上的某个&lt;code>USceneComponent&lt;/code>的位置，通常指的是&lt;code>Actor&lt;/code>的&lt;code>RootComponent&lt;/code>。&lt;/p>
&lt;p>&lt;code>UMovementComponent&lt;/code>上有个属性&lt;code>UpdatedComponent&lt;/code>，就是用于设置移动组件所修改的&lt;code>USceneComponent&lt;/code>。暴露给蓝图有个参数&lt;code>bAutoRegisterUpdatedComponent&lt;/code>，如果设置为&lt;code>true&lt;/code>，则会在组件初始化时，读取&lt;code>Owner&lt;/code>的&lt;code>RootComponent&lt;/code>，调用&lt;code>SetUpdatedComponent&lt;/code>设置&lt;code>UpdatedComponent&lt;/code>。&lt;/p>
&lt;h2 id="移动流程">&lt;a href="#%e7%a7%bb%e5%8a%a8%e6%b5%81%e7%a8%8b" class="header-anchor">&lt;/a>移动流程
&lt;/h2>&lt;p>网络同步下的角色移动至少需要考虑以下几个方面：&lt;/p>
&lt;ul>
&lt;li>玩家客户端操作无延迟
&lt;ul>
&lt;li>需要直接响应移动输入并上报给服务器&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>位置以服务器为准
&lt;ul>
&lt;li>防止外挂&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>同步到的移动需要表现丝滑
&lt;ul>
&lt;li>不可能每帧都收到位置更新，需要适当进行插值&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="自主实现">&lt;a href="#%e8%87%aa%e4%b8%bb%e5%ae%9e%e7%8e%b0" class="header-anchor">&lt;/a>自主实现
&lt;/h3>&lt;p>先思考如果自己实现的情况下可能会怎么做。&lt;/p>
&lt;ul>
&lt;li>本地接收到输入之后，在本地先操作移动，同时把移动的操作发送给服务器
&lt;ul>
&lt;li>可能包含的信息是：当前位置、目标位置等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>服务器接收到移动的操作，在服务器上执行移动，并把玩家位移的信息同步给所有客户端
&lt;ul>
&lt;li>信息同样包含：当前位置、目标位置、速度等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>其他客户端收到了移动的信息后，修改角色的移动目标，根据插值调整角色位置&lt;/li>
&lt;/ul>
&lt;h3 id="引擎实现">&lt;a href="#%e5%bc%95%e6%93%8e%e5%ae%9e%e7%8e%b0" class="header-anchor">&lt;/a>引擎实现
&lt;/h3>&lt;p>虚幻引擎网络同步情况下的移动流程与此类似，大概为：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>每一帧执行TickComponent时，计算这一帧的加速度和转向，之后对于主控的Character，调用ReplicateMoveToServer把移动同步给服务器&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ReplicateMoveToServer会把移动保存到列表，然后执行PerformMovement在本地预执行移动操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>然后会调用ServerMove把移动同步给服务器，告知移动的参数、客户端自己移动的位置，以及时间戳&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ServerMove在服务器上执行，根据客户端声明的位置，与服务器的位置做对比，如果差异过大，则调用ClientAdjustPosition在主控端校正位置&lt;/p>
&lt;/li>
&lt;li>
&lt;p>客户端如果收到ClientAdjustPosition，会把客户端角色位置设置为服务器上的位置，并把bUpdatePosition标记为true，这将会影响到后续的移动更新&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当客户端再次调用TickComponent时，如果存在bUpdatePosition，则会调用ClientUpdatePositionAfterServerUpdate来重演在服务器上调整移动之后发生的所有移动。&lt;/p>
&lt;blockquote>
&lt;p>在引擎源码CharacterMovementComponent.h中可以找到对移动同步流程的描述：&lt;/p>
&lt;p>Here&amp;rsquo;s how player movement prediction, replication and correction works in network games:&lt;/p>
&lt;p>Every tick, the TickComponent() function is called. It figures out the acceleration and rotation change for the frame,
and then calls PerformMovement() (for locally controlled Characters), or ReplicateMoveToServer() (if it&amp;rsquo;s a network client).&lt;/p>
&lt;p>ReplicateMoveToServer() saves the move (in the PendingMove list), calls PerformMovement(), and then replicates the move
to the server by calling the replicated function ServerMove() - passing the movement parameters, the client&amp;rsquo;s
resultant position, and a timestamp.&lt;/p>
&lt;p>ServerMove() is executed on the server. It decodes the movement parameters and causes the appropriate movement
to occur. It then looks at the resulting position and if enough time has passed since the last response, or the
position error is significant enough, the server calls ClientAdjustPosition(), a replicated function.&lt;/p>
&lt;p>ClientAdjustPosition() is executed on the client. The client sets its position to the servers version of position,
and sets the bUpdatePosition flag to true.&lt;/p>
&lt;p>When TickComponent() is called on the client again, if bUpdatePosition is true, the client will call
ClientUpdatePosition() before calling PerformMovement(). ClientUpdatePosition() replays all the moves in the pending
move list which occurred after the timestamp of the move the server was adjusting.&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h3 id="玩家输入">&lt;a href="#%e7%8e%a9%e5%ae%b6%e8%be%93%e5%85%a5" class="header-anchor">&lt;/a>玩家输入
&lt;/h3>&lt;p>管理玩家输入的也是一个组件&lt;code>UInputComponent&lt;/code>，通常可以调用&lt;code>BindAxis&lt;/code>来注册事件响应。&lt;/p>
&lt;p>一般最终会调用到&lt;code>UPawnMovementComponent::AddInputVector&lt;/code>来处理移动。&lt;/p>
&lt;h3 id="主控角色移动">&lt;a href="#%e4%b8%bb%e6%8e%a7%e8%a7%92%e8%89%b2%e7%a7%bb%e5%8a%a8" class="header-anchor">&lt;/a>主控角色移动
&lt;/h3>&lt;p>在UE的网络框架中，角色主要分为三种：ROLE_Authority、ROLE_AutonomousProxy、ROLE_SimulatedProxy。&lt;/p>
&lt;blockquote>
&lt;p>详见：&lt;a class="link" href="https://boiltask.com/ue/network-role/" >虚幻引擎中网络角色Role相关概念&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>在客户端主控角色也即Autonomous角色会接受控制，然后把移动数据发往服务器。&lt;/p>
&lt;p>本地的每次移动都会生成FSavedMove_Character，并维护一个&lt;code>TArray&amp;lt;FSavedMovePtr&amp;gt; SavedMoves&lt;/code>的数组，保存了当前玩家本地已经做的移动，这些移动还没经过服务器检查。&lt;/p>
&lt;p>如果服务器认可了一些移动，就可以把这些移动删掉，如果检查不通过，就可以据此执行异常处理。&lt;/p>
&lt;h3 id="协议选择">&lt;a href="#%e5%8d%8f%e8%ae%ae%e9%80%89%e6%8b%a9" class="header-anchor">&lt;/a>协议选择
&lt;/h3>&lt;p>在UE中，默认使用UDP作为传输协议，这可以使得数据包尽快送达。&lt;/p>
&lt;p>UDP不保证可达和有序，但是应用层面可以通过设计来在需要的地方避免这些问题。&lt;/p>
&lt;h2 id="server同步移动给客户端">&lt;a href="#server%e5%90%8c%e6%ad%a5%e7%a7%bb%e5%8a%a8%e7%bb%99%e5%ae%a2%e6%88%b7%e7%ab%af" class="header-anchor">&lt;/a>Server同步移动给客户端
&lt;/h2>&lt;h3 id="actor基本同步方案">&lt;a href="#actor%e5%9f%ba%e6%9c%ac%e5%90%8c%e6%ad%a5%e6%96%b9%e6%a1%88" class="header-anchor">&lt;/a>Actor基本同步方案
&lt;/h3>&lt;p>Actor自身就支持移动同步，打开ReplicateMovement开关后，当Actor的RootComponent位置、朝向等数据发生变化时，就会把数据同步给Simulate客户端。&lt;/p>
&lt;p>当Simulate的客户端收到同步之后，会简单的设置自己的位置和朝向。移动数据的同步有间隔，因此这种实现会导致Actor发生闪现。&lt;/p>
&lt;h3 id="character移动同步">&lt;a href="#character%e7%a7%bb%e5%8a%a8%e5%90%8c%e6%ad%a5" class="header-anchor">&lt;/a>Character移动同步
&lt;/h3>&lt;p>针对Actor基本同步模式的不足，CharacterMovementComponent针对性的做了表现平滑处理，让Simulate角色移动尽可能平滑自然。&lt;/p>
&lt;p>Character主要有两个组件，Capsule和Mesh，Capsule是Chara&lt;/p>
&lt;h2 id="关键概念">&lt;a href="#%e5%85%b3%e9%94%ae%e6%a6%82%e5%bf%b5" class="header-anchor">&lt;/a>关键概念
&lt;/h2>&lt;h3 id="ucharactermovement">&lt;a href="#ucharactermovement" class="header-anchor">&lt;/a>UCharacterMovement
&lt;/h3>&lt;p>角色移动组件是最为复杂的一个子类，需要重点进行分析。&lt;/p>
&lt;pre class="mermaid">
classDiagram
class UCharacterMovementComponent {
+IRVOAvoidanceInterface
+INetworkPredictionInterface
}
UActorComponent &amp;lt;|-- UMovementComponent
UMovementComponent &amp;lt;|-- UNavMovementComponent
UNavMovementComponent &amp;lt;|-- UPawnMovementComponent
UPawnMovementComponent &amp;lt;|-- UCharacterMovementComponent
&lt;/pre>
&lt;h3 id="fsavedmove_character">&lt;a href="#fsavedmove_character" class="header-anchor">&lt;/a>FSavedMove_Character
&lt;/h3>&lt;p>用于描述玩家的一次移动，可以认为是一次移动的快照。&lt;/p>
&lt;p>主要属性有：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>属性&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>TimeStamp&lt;/td>
&lt;td>这次移动发生的时间&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DeltaTime&lt;/td>
&lt;td>这次移动使用的时间&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CustomTimeDilation&lt;/td>
&lt;td>时间膨胀系数，可以用于快进和慢放&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>StartPackedMovementMode&lt;/td>
&lt;td>移动发生前的MovementMode&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>StartLocation&lt;/td>
&lt;td>移动发生前的位置&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>StartVelocity&lt;/td>
&lt;td>移动发生前的速度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>EndPackedMovementMode&lt;/td>
&lt;td>移动发生后的MovementMode&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>SavedLocation&lt;/td>
&lt;td>移动发生后的位置&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>SavedVelocity&lt;/td>
&lt;td>移动发生后的速度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Acceleration&lt;/td>
&lt;td>移动所用加速度&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>理论上只要有这些数据，就能复盘整个移动过程，也可用作回放功能。&lt;/p>
&lt;h3 id="replicatemovetoserver">&lt;a href="#replicatemovetoserver" class="header-anchor">&lt;/a>ReplicateMoveToServer
&lt;/h3>&lt;p>首先会从SavedMoves里找到最早发生的一个ImportantMove（通过IsImportantMove判断），也就是最新被服务器确认的有显著差异的Move。&lt;/p>
&lt;p>之后创建一个FSavedMove_Character并初始化。然后执行PerformMovement，对角色计算操作后的属性，设置上相关信息。&lt;/p>
&lt;p>根据能否被合并，进行处理。&lt;/p>
&lt;h3 id="延迟发送move">&lt;a href="#%e5%bb%b6%e8%bf%9f%e5%8f%91%e9%80%81move" class="header-anchor">&lt;/a>延迟发送Move
&lt;/h3>&lt;p>一个Move有可能可以被延迟一会，与后面的Move合并后再发给服务器。因此一个新建的Move被发往服务器前会先判断是否可以延迟发送。&lt;/p>
&lt;p>首先判断是否开启了NetEnableMoveCombining，如果没开也不会延迟发送。&lt;/p>
&lt;p>同时还会判断当前的Move是否能被延迟发送，会检查该Move前后MovementMode是否改变，如果改变也需要即使变化。也就是说，如果此次Move没有显著改变，那么则可以延后发送，理论上服务器根据之前的信息推算，结果应该是一样的。&lt;/p>
&lt;p>然后会计算当前预期的移动更新时间间隔，根据当前网速、玩家数量等信息，在基准值ClientNetSendMoveDeltaTime上做调整，得到最终间隔，如果Tick时还没达到更新间隔，就会延迟发送Move，把它储存在PendingMove中，留着以后处理。&lt;/p>
&lt;h3 id="callservermove">&lt;a href="#callservermove" class="header-anchor">&lt;/a>CallServerMove
&lt;/h3>&lt;p>函数接受两个参数，一个是刚创建的Move，另一个是之前获取的ImportantMove（ImportantMove可能为空）。不需要把整个Move都发往服务器，只需要位置、旋转、加速度等关键信息，并且这些信息会经过压缩。&lt;/p>
&lt;p>压缩的过程简单来说，会尝试牺牲精度，把一些字段合并在一个数据结构中。&lt;/p>
&lt;p>之后还会调用ServerMoveOld，把ImportantMove中的一些信息发送到服务器，可以简单理解为一种冗余的保险。&lt;/p>
&lt;p>如果存在PendingMove，说明存在未合并的Move，需要调用ServerMoveDual一次发送两个连续的Move。否则，说明发送间隔较大，或者PendingMove已经被合并，就调用ServerMode发送这个Move。&lt;/p>
&lt;h3 id="servermoveold">&lt;a href="#servermoveold" class="header-anchor">&lt;/a>ServerMoveOld
&lt;/h3>&lt;p>ServerMoveOld主要作为一种冗余措施，防止服务器新收到一个移动数据时，因为网络丢包而落后太多，导致移动判断不通过，进而纠正客户端位置。ServerMoveOld可以让服务器使用传递的加速度，粗略的从旧位置快速移动到新位置，不校验移动结果。&lt;/p>
&lt;blockquote>
&lt;p>TODO：安全性如何保证？&lt;/p>
&lt;/blockquote>
&lt;h2 id="todo">&lt;a href="#todo" class="header-anchor">&lt;/a>TODO
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>具有物理模拟下的移动&lt;/p>
&lt;/li>
&lt;li>
&lt;p>移动如何通过RPC发送的&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="参考文章">&lt;a href="#%e5%8f%82%e8%80%83%e6%96%87%e7%ab%a0" class="header-anchor">&lt;/a>参考文章
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/114341957" target="_blank" rel="noopener"
>UE4移动的网络同步 - 知乎&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/664568047" target="_blank" rel="noopener"
>UE4/UE5 Character Movement Component移动组件网络同步详解 - 知乎&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/650314172" target="_blank" rel="noopener"
>「Grow by UE」图解角色移动组件 - 知乎&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/20098342802" target="_blank" rel="noopener"
>UE移动同步原理分析（一）：Pawn的移动属性复制 - 知乎&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>虚幻引擎中Actor复制流程</title><link>https://boiltask.com/ue/actor-replication/</link><pubDate>Mon, 02 Dec 2024 22:17:16 +0800</pubDate><guid>https://boiltask.com/ue/actor-replication/</guid><description>&lt;blockquote>
&lt;p>&lt;a class="link" href="https://dev.epicgames.com/documentation/zh-cn/unreal-engine/detailed-actor-replication-flow-in-unreal-engine" target="_blank" rel="noopener"
>Detailed Actor Replication Flow&lt;/a>暂时没有官方翻译，尝试理解顺便翻译一下。&lt;/p>
&lt;/blockquote>
&lt;h2 id="简介">&lt;a href="#%e7%ae%80%e4%bb%8b" class="header-anchor">&lt;/a>简介
&lt;/h2>&lt;p>&lt;strong>Actor复制&lt;/strong>是一个详细的多步骤过程，其中&lt;strong>网络驱动程序&lt;/strong>（Net Driver）确定需要向哪些连接复制哪些Actor，以及按照什么顺序复制。本页面提供了Actor复制流程的概述。&lt;/p>
&lt;p>大多数Actor的复制是在&lt;a class="link" href="https://dev.epicgames.com/documentation/zh-cn/unreal-engine/API/Runtime/Engine/Engine/UNetDriver/ServerReplicateActors" target="_blank" rel="noopener"
>&lt;code>UNetDriver::ServerReplicateActors&lt;/code>&lt;/a>函数中进行的。 在这个函数中，服务器会首先收集所有被判定对每个客户端相关的Actor，然后将自上次更新以来发生变化的属性发送给每个已连接的客户端。随后，&lt;a class="link" href="https://dev.epicgames.com/documentation/zh-cn/unreal-engine/API/Runtime/Engine/Engine/UActorChannel/ReplicateActor" target="_blank" rel="noopener"
>&lt;code>UActorChannel::ReplicateActor&lt;/code>&lt;/a> 函数负责处理将特定Actor复制到某一通道的详细操作。&lt;/p>
&lt;h2 id="重要属性">&lt;a href="#%e9%87%8d%e8%a6%81%e5%b1%9e%e6%80%a7" class="header-anchor">&lt;/a>重要属性
&lt;/h2>&lt;p>对于如何更新 actor、调用某些框架回调以及用于确定在当前服务器 tick 期间是否复制 actor 的属性，有一个定义的流程。以下是一些重要的属性：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>属性&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>AActor::NetUpdateFrequency&lt;/code>&lt;/td>
&lt;td>决定Actor复制的频率。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>AActor::PreReplication&lt;/code>&lt;/td>
&lt;td>在任何复制操作发生之前调用。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>AActor::bOnlyRelevantToOwner&lt;/code>&lt;/td>
&lt;td>如果该Actor只会复制给其拥有者，则为&lt;code>True&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>AActor::IsRelevancyOwnerFor&lt;/code>&lt;/td>
&lt;td>当&lt;code>bOnlyRelevantToOwner&lt;/code>为&lt;code>True&lt;/code>时，决定Actor的相关性。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>AActor::IsNetRelevantFor&lt;/code>&lt;/td>
&lt;td>当&lt;code>bOnlyRelevantToOwner&lt;/code>为&lt;code>False&lt;/code>时，决定Actor的相关性。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>AActor::NetDormancy&lt;/code>&lt;/td>
&lt;td>决定Actor是处于休眠状态还是激活状态。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="actor复制流程概述">&lt;a href="#actor%e5%a4%8d%e5%88%b6%e6%b5%81%e7%a8%8b%e6%a6%82%e8%bf%b0" class="header-anchor">&lt;/a>Actor复制流程概述
&lt;/h2>&lt;p>以下步骤构成了Actor复制过程的高级概述：&lt;/p>
&lt;ol>
&lt;li>确定需要复制的Actors，并进行检查以确定它们的休眠状态、更新频率以及拥有的连接。&lt;/li>
&lt;li>将通过这些检查的Actors添加到一个列表中，准备进行复制。&lt;/li>
&lt;li>遍历每个连接，并根据当前的Actor和连接执行检查。完成此步骤后，得到每个连接需要复制的Actor列表。&lt;/li>
&lt;li>按照优先级对每个连接的Actors进行排序。&lt;/li>
&lt;li>确定该Actor是否对当前连接相关。&lt;/li>
&lt;li>将该Actor复制到当前连接。&lt;/li>
&lt;/ol>
&lt;p>以下部分将提供上述Actor复制流程概述中每一步的详细描述。&lt;/p>
&lt;hr>
&lt;h3 id="将actor添加到待复制列表">&lt;a href="#%e5%b0%86actor%e6%b7%bb%e5%8a%a0%e5%88%b0%e5%be%85%e5%a4%8d%e5%88%b6%e5%88%97%e8%a1%a8" class="header-anchor">&lt;/a>将Actor添加到待复制列表
&lt;/h3>&lt;p>此步骤首先检查所有Actors，确定哪些Actors正在进行复制（通过检查是否调用了 &lt;code>AActor::SetReplicates(true)&lt;/code>）。对于每个正在复制的Actor，&lt;code>NetDriver&lt;/code> 执行以下检查：&lt;/p>
&lt;ul>
&lt;li>判断当前Actor是否初始处于休眠状态（&lt;code>ENetDormancy::DORM_Initial&lt;/code>）。
&lt;ul>
&lt;li>如果是休眠状态，则跳过该Actor。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>检查当前Actor是否需要更新，具体通过检查 &lt;code>AActor::NetUpdateFrequency&lt;/code> 属性。
&lt;ul>
&lt;li>如果不需要更新，则跳过该Actor。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>如果 &lt;code>AActor::bOnlyRelevantToOwner&lt;/code> 为 &lt;code>true&lt;/code>，则检查该Actor的拥有连接的相关性，通过调用 &lt;code>AActor::IsRelevancyOwnerFor&lt;/code> 来判断。
&lt;ul>
&lt;li>如果相关，则将其添加到该连接的“拥有者相关列表”中。&lt;/li>
&lt;li>在这种情况下，该Actor只会发送给单个连接。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>对于通过上述检查的每个Actor，调用 &lt;code>AActor::PreReplication&lt;/code>。在 &lt;code>AActor::PreReplication&lt;/code> 中，你可以决定是否希望某些属性仅复制到特定连接。可以使用 &lt;code>DOREPLIFETIME_ACTIVE_OVERRIDE&lt;/code> 宏来控制Actor复制到哪些连接。&lt;/li>
&lt;/ul>
&lt;p>如果Actor通过了所有检查，将其添加到待复制列表中。&lt;/p>
&lt;hr>
&lt;h3 id="遍历每个连接">&lt;a href="#%e9%81%8d%e5%8e%86%e6%af%8f%e4%b8%aa%e8%bf%9e%e6%8e%a5" class="header-anchor">&lt;/a>遍历每个连接
&lt;/h3>&lt;p>接下来，系统遍历每个连接，并为从前一步骤中获得的待复制Actor列表中的每个Actor执行以下检查和操作：&lt;/p>
&lt;ul>
&lt;li>判断当前Actor是否处于休眠状态，通过调用 &lt;code>AActor::NetDormancy&lt;/code>。
&lt;ul>
&lt;li>如果该Actor在此连接下处于休眠状态，则跳过该Actor。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>如果尚未打开通道：
&lt;ul>
&lt;li>判断客户端是否已加载当前Actor所在的关卡。&lt;/li>
&lt;li>如果该关卡尚未加载，则跳过该Actor。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>判断当前Actor是否与该连接相关，通过调用 &lt;code>AActor::IsNetRelevantFor&lt;/code>。
&lt;ul>
&lt;li>如果Actor与连接不相关，则跳过该Actor。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>将所有在连接的“拥有者相关列表”中的Actors添加到此列表中。此时，列表中包含了所有与该连接相关且不处于休眠状态的Actors。然后按照优先级（&lt;code>AActor::GetNetPriority&lt;/code>）对这些Actors进行排序，优先级从高到低排序。排序至关重要，尤其是当考虑复制大量Actor时，需要确保优先复制高优先级的Actor。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="遍历排序后的actor列表">&lt;a href="#%e9%81%8d%e5%8e%86%e6%8e%92%e5%ba%8f%e5%90%8e%e7%9a%84actor%e5%88%97%e8%a1%a8" class="header-anchor">&lt;/a>遍历排序后的Actor列表
&lt;/h3>&lt;p>对于该连接的每个Actor，在排序后的待复制列表中执行以下操作：&lt;/p>
&lt;ul>
&lt;li>如果连接尚未加载该Actor所在的关卡，则关闭通道（如果存在）并继续。&lt;/li>
&lt;li>每秒检查一次Actor是否与连接相关，调用 &lt;code>AActor::IsNetRelevantFor&lt;/code>。
&lt;ul>
&lt;li>如果在5秒内不相关，则关闭通道。&lt;/li>
&lt;li>如果相关且没有通道打开，则打开通道。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>如果此连接在任何时刻变得饱和：
&lt;ul>
&lt;li>对于剩余的Actors：
&lt;ul>
&lt;li>如果相关时间少于1秒，则强制在下一tick更新。&lt;/li>
&lt;li>如果相关时间超过1秒，调用 &lt;code>AActor::IsNetRelevantFor&lt;/code> 判断是否在下一tick更新。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>对于通过所有检查的Actor，通过调用 &lt;code>UActorChannel::ReplicateActor&lt;/code> 将Actor复制到连接。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="控制每次调用时复制的客户端数">&lt;a href="#%e6%8e%a7%e5%88%b6%e6%af%8f%e6%ac%a1%e8%b0%83%e7%94%a8%e6%97%b6%e5%a4%8d%e5%88%b6%e7%9a%84%e5%ae%a2%e6%88%b7%e7%ab%af%e6%95%b0" class="header-anchor">&lt;/a>控制每次调用时复制的客户端数
&lt;/h3>&lt;p>你可以通过以下几种方式控制 &lt;code>UNetDriver::ServerReplicateActors&lt;/code> 每次调用时复制的客户端数：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>引擎配置和命令行参数：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>启动项目时使用 &lt;code>-limitclientticks&lt;/code> 命令行参数。&lt;/li>
&lt;li>修改引擎配置中的 &lt;code>NetClientTicksPerSecond&lt;/code> 值（位于 &lt;code>[/Script/Engine.Engine]&lt;/code> 类别）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>命令行参数：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>启动项目时使用命令行参数：&lt;code>-limitclientticks -ini:Engine:[/Script/Engine.Engine]:NetClientTicksPerSecond=&amp;lt;VALUE&amp;gt;&lt;/code>，其中 &lt;code>&amp;lt;VALUE&amp;gt;&lt;/code> 是每秒希望使用的客户端ticks数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>控制台变量：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>设置 &lt;code>net.MaxConnectionsToTickPerServerFrame&lt;/code> 控制台变量。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>更多信息请参考 &lt;code>UNetDriver::ServerReplicateActors_PrepConnections&lt;/code>。&lt;/p>
&lt;hr>
&lt;h3 id="将actor复制到连接">&lt;a href="#%e5%b0%86actor%e5%a4%8d%e5%88%b6%e5%88%b0%e8%bf%9e%e6%8e%a5" class="header-anchor">&lt;/a>将Actor复制到连接
&lt;/h3>&lt;p>&lt;code>UActorChannel::ReplicateActor&lt;/code> 是复制Actor及其所有组件到连接的主要方法。其流程如下：&lt;/p>
&lt;ul>
&lt;li>判断这是Actor通道打开后的第一次更新。
&lt;ul>
&lt;li>如果是第一次更新，则序列化需要的信息（初始位置、旋转等）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>判断当前连接是否拥有该Actor。
&lt;ul>
&lt;li>如果没有拥有该Actor，且该Actor的角色为 &lt;code>ENetRole::ROLE_AutonomousProxy&lt;/code>，则降级为 &lt;code>ENetRole::ROLE_SimulatedProxy&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>复制该Actor已更改的属性。&lt;/li>
&lt;li>复制每个组件已更改的属性。&lt;/li>
&lt;li>对于任何已删除的组件，发送特殊的删除命令。&lt;/li>
&lt;li>一旦Actor列表已处理完，或通道已饱和，开始考虑下一个连接，并重复该过程直到所有连接都已更新。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="更多信息">&lt;a href="#%e6%9b%b4%e5%a4%9a%e4%bf%a1%e6%81%af" class="header-anchor">&lt;/a>更多信息
&lt;/h3>&lt;p>有关Actor复制的更多信息，请参考以下头文件中的内容：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>/Engine/Source/Runtime/Engine/Classes/Engine/NetDriver.h&lt;/code>&lt;br>
关于 &lt;code>UNetDriver::ServerReplicateActors&lt;/code> 的信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>/Engine/Source/Runtime/Engine/Classes/GameFramework/Actor.h&lt;/code>&lt;br>
关于 &lt;code>AActor&lt;/code> 及其函数和属性的信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>/Engine/Source/Runtime/Engine/Classes/Engine/ActorChannel.h&lt;/code>&lt;br>
关于 &lt;code>UActorChannel&lt;/code> 和 &lt;code>UActorChannel::ReplicateActor&lt;/code> 的信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>/Engine/Source/Runtime/Engine/Classes/Engine/EngineTypes.h&lt;/code>&lt;br>
关于 &lt;code>ENetRole&lt;/code> 和 &lt;code>ENetDormancy&lt;/code> 等类型的信息。&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>虚幻引擎中网络相关机制</title><link>https://boiltask.com/ue/network-start/</link><pubDate>Mon, 02 Dec 2024 13:13:25 +0800</pubDate><guid>https://boiltask.com/ue/network-start/</guid><description>&lt;h2 id="简介">&lt;a href="#%e7%ae%80%e4%bb%8b" class="header-anchor">&lt;/a>简介
&lt;/h2>&lt;p>想到哪里写到哪里吧，后续有可能再补充。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://boiltask.com/ue/actor-replication/" >虚幻引擎中Actor复制流程&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://boiltask.com/ue/network-role/" >虚幻引擎中网络角色Role相关概念&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>虚幻引擎中编辑器下Python的使用</title><link>https://boiltask.com/ue/editor-python/</link><pubDate>Mon, 02 Dec 2024 12:57:53 +0800</pubDate><guid>https://boiltask.com/ue/editor-python/</guid><description>&lt;h2 id="功能简介">&lt;a href="#%e5%8a%9f%e8%83%bd%e7%ae%80%e4%bb%8b" class="header-anchor">&lt;/a>功能简介
&lt;/h2>&lt;p>参考文档：&lt;a class="link" href="https://dev.epicgames.com/documentation/zh-cn/unreal-engine/scripting-the-unreal-editor-using-python" target="_blank" rel="noopener"
>使用Python脚本化运行虚幻编辑器&lt;/a>&lt;/p></description></item><item><title>虚幻引擎中DataAsset的使用</title><link>https://boiltask.com/ue/data-asset/</link><pubDate>Thu, 28 Nov 2024 13:14:08 +0800</pubDate><guid>https://boiltask.com/ue/data-asset/</guid><description>&lt;h2 id="dataasset简介">&lt;a href="#dataasset%e7%ae%80%e4%bb%8b" class="header-anchor">&lt;/a>DataAsset简介
&lt;/h2>&lt;p>一般用于表示一个数据块，功能与DataTable类似，某种程度上可以理解成一个仅有一行的DataTable。&lt;/p>
&lt;p>参考文档：&lt;a class="link" href="https://dev.epicgames.com/documentation/zh-cn/unreal-engine/data-assets-in-unreal-engine" target="_blank" rel="noopener"
>数据资产&lt;/a>&lt;/p></description></item><item><title>客户端编程规范</title><link>https://boiltask.com/knowledge/client-style-guide/</link><pubDate>Mon, 10 May 2021 21:34:36 +0800</pubDate><guid>https://boiltask.com/knowledge/client-style-guide/</guid><description>&lt;blockquote>
&lt;p>整理一下总结的客户端向的编程规范，尽可能做到有理有据，后续可能还会不定期修订。&lt;/p>
&lt;/blockquote>
&lt;h2 id="头文件">&lt;a href="#%e5%a4%b4%e6%96%87%e4%bb%b6" class="header-anchor">&lt;/a>头文件
&lt;/h2>&lt;h3 id="include">&lt;a href="#include" class="header-anchor">&lt;/a>Include
&lt;/h3>&lt;ul>
&lt;li>头文件
&lt;ul>
&lt;li>通过宏防止重复包含&lt;/li>
&lt;li>&lt;code>#pragma once&lt;/code>，所用的所有编译器均支持&lt;/li>
&lt;li>包含时尽量细粒化。例如，勿包含Core.h，而在核心中包含需要定义的特定头文件。&lt;/li>
&lt;li>尽量直接包含所需的头文件，以便进行细粒化包含。&lt;/li>
&lt;li>在 &lt;code>#include&lt;/code> 中插入空行以分割相关头文件, C 库, C++ 库, 其他库的 &lt;code>.h&lt;/code> 和本项目内的 &lt;code>.h&lt;/code> 是个好习惯。&lt;/li>
&lt;li>尽可能在cpp中引用其他头文件，避免头文件中直接引用某一类。
&lt;ul>
&lt;li>可以考虑优先使用声明类的形式来在头文件中使用另一类而在cpp中再真正include，可以有效梳理结构避免循环引用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>尽可能先根据：cpp对应头文件、C++标准库文件、框架头文件、第三方头文件、项目通用头文件、具体功能头文件的顺序来引用文件，方便理清文件引用结构。&lt;/li>
&lt;li>引用头文件时尽可能避免使用相对位置，比如....\NetDef.h，不利于文件梳理以及理解文件结构。&lt;/li>
&lt;li>避免使用反斜线&lt;code>\&lt;/code>来标记路径，在一些编译器会存在异常，应使用斜线&lt;code>/&lt;/code>来标记路径。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="前置声明">&lt;a href="#%e5%89%8d%e7%bd%ae%e5%a3%b0%e6%98%8e" class="header-anchor">&lt;/a>前置声明
&lt;/h3>&lt;ul>
&lt;li>所谓「前置声明」（forward declaration）是类、函数和模板的纯粹声明，没伴随着其定义
&lt;ul>
&lt;li>前置声明能够节省编译时间，多余的 &lt;code>#include&lt;/code> 会迫使编译器展开更多的文件，处理更多的输入。&lt;/li>
&lt;li>前置声明能够节省不必要的重新编译的时间。 &lt;code>#include&lt;/code> 使代码因为头文件中无关的改动而被重新编译多次。&lt;/li>
&lt;li>尽可能的使用前置声明，而非头文件，在CPP中包含对应的头文件&lt;/li>
&lt;li>减少编译的时间&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="内联函数">&lt;a href="#%e5%86%85%e8%81%94%e5%87%bd%e6%95%b0" class="header-anchor">&lt;/a>内联函数
&lt;/h3>&lt;ul>
&lt;li>内联函数的合理使用可提高代码执行效率&lt;/li>
&lt;li>当函数只有10行甚至更少时才将其定义为内联函数&lt;/li>
&lt;li>谨慎对待析构函数，析构函数往往比其表面看起来要更长，因为有隐含的成员和基类析构函数被调用&lt;/li>
&lt;li>包含循环和switch语句的函数内联通常得不偿失&lt;/li>
&lt;li>声明了内联也不一定会被编译器内联，虚函数和递归函数不会被正常内联&lt;/li>
&lt;li>类内部的函数一般会自动内联。所以某函数一旦不需要内联，其定义就不要再放在头文件里，而是放到对应的 cpp 文件里。这样可以保持头文件的类相当精炼，也很好地贯彻了声明与定义分离的原则。&lt;/li>
&lt;/ul>
&lt;h3 id="范例">&lt;a href="#%e8%8c%83%e4%be%8b" class="header-anchor">&lt;/a>范例
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#pragma once
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 头文件区
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;CoreMinimal.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;UObject/ObjectMacros.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;UObject/UObjectBaseUtility.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;UObject/Object.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;TestObject.generated.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 前置声明区
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">AActor&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">AController&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">UPrimitiveComponent&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">FAttachedActorInfo&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 结构体定义
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">USTRUCT&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">FTestStruct&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">GENERATED_BODY&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UPROPERTY&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">TestValue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 委托定义
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 类体定义
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">UCLASS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BlueprintType&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Blueprintable&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">ATestObject&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">AActor&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">GENERATED_BODY&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ATestObject&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">....&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 内联函数定义
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="作用域">&lt;a href="#%e4%bd%9c%e7%94%a8%e5%9f%9f" class="header-anchor">&lt;/a>作用域
&lt;/h2>&lt;h3 id="命名空间">&lt;a href="#%e5%91%bd%e5%90%8d%e7%a9%ba%e9%97%b4" class="header-anchor">&lt;/a>命名空间
&lt;/h3>&lt;ul>
&lt;li>命名空间将全局作用域细分为独立的, 具名的作用域, 可有效防止全局作用域的命名冲突。&lt;/li>
&lt;li>禁止使用using namespace xxx;&lt;/li>
&lt;li>禁止使用内联命名空间
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">namespace&lt;/span> &lt;span class="n">X&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">inline&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">Y&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>X::Y::foo与X::foo是等价的&lt;/li>
&lt;li>内联命名空间主要用来保持跨版本的 ABI 兼容性。（一般用不到）&lt;/li>
&lt;li>在头文件中使用匿名空间违背了C++的唯一定义原则（One Definition Rule（ODR））&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="匿名命名空间和静态变量">&lt;a href="#%e5%8c%bf%e5%90%8d%e5%91%bd%e5%90%8d%e7%a9%ba%e9%97%b4%e5%92%8c%e9%9d%99%e6%80%81%e5%8f%98%e9%87%8f" class="header-anchor">&lt;/a>匿名命名空间和静态变量
&lt;/h3>&lt;ul>
&lt;li>内部链接性
&lt;ul>
&lt;li>意味着你在这个文件中声明的这些标识符都不能在另一个文件中被访问。即使两个文件声明了完全一样名字的标识符，它们所指向的实体实际上是完全不同的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>在 .cpp 文件中定义一个不需要被外部引用的变量时，可以将它们放在匿名命名空间或声明为 &lt;code>static&lt;/code> 。&lt;/li>
&lt;li>不需要被外部引用的变量&lt;/li>
&lt;li>不要在头文件中使用&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="n">xxx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">cpp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">namespace&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">xxx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">xxx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="局部变量">&lt;a href="#%e5%b1%80%e9%83%a8%e5%8f%98%e9%87%8f" class="header-anchor">&lt;/a>局部变量
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>函数变量尽可能置于最小作用域，并在变量声明时进行初始化&lt;/p>
&lt;ul>
&lt;li>离第一次使用越近越好，方便阅读者更容易定位变量声明的位置&lt;/li>
&lt;li>局部变量在声明的同时进行显式值初始化，比起隐式初始化再赋值的两步过程要高效，同时也贯彻了计算机体系结构重要的概念「局部性（locality）」。&lt;/li>
&lt;li>对象：循环作用域外声明要高效的多&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 坏——初始化和声明分离
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">g&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 好——初始化时声明
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 用花括号初始化更好
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">};&lt;/span> &lt;span class="c1">// 好——v 一开始就初始化
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 低效的实现
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">1000000&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Foo&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 构造函数和析构函数分别调用 1000000 次!
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">DoSomething&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Foo&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 构造函数和析构函数只调用 1 次
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">1000000&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">f&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">DoSomething&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>属于 &lt;code>if&lt;/code>, &lt;code>while&lt;/code> 和 &lt;code>for&lt;/code> 语句的变量应当在这些语句中正常地声明，这样子这些变量的作用域就被限制在这些语句中了，举例而言:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">strchr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;/&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="n">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="静态和全局变量">&lt;a href="#%e9%9d%99%e6%80%81%e5%92%8c%e5%85%a8%e5%b1%80%e5%8f%98%e9%87%8f" class="header-anchor">&lt;/a>静态和全局变量
&lt;/h3>&lt;ul>
&lt;li>原生数据类型POD（Plain Old Data）
&lt;ul>
&lt;li>Int, char, float等基本类型，POD类型的指针、数组、结构体&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>静态生存周期变量
&lt;ul>
&lt;li>全局变量，静态变量，静态类成员变量和函数静态变量&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>禁止使用类的静态生存周期变量，因为在这种情况下构造和析构函数调用顺序是不确定的，他们会导致难以发现的bug。（对象A依赖对象B，但对象B早于A析构）&lt;/li>
&lt;li>不允许用函数返回值来初始化POD变量，除非该函数不涉及任何全局变量（比如 &lt;code>getenv()&lt;/code> 或 &lt;code>getpid()&lt;/code> ）&lt;/li>
&lt;li>函数的作用域内的静态变量除外，毕竟他们的初始化顺序是有明确定义，只会在指令执行到它的声明那里才会发生&lt;/li>
&lt;li>同一个编译单元（cpp）内是明确的，静态初始化优先于动态初始化，初始化顺序按照声明顺序进行，销毁则逆序，不同编译单元之间的初始化和销毁顺序则属于未明确行为&lt;/li>
&lt;li>quick_exit替代exit，前者不会执行任何析构，也不会执行atexit绑定的任何handlers&lt;/li>
&lt;li>如果确实需要一个class类型的静态或全局变量，可以使用单例模式&lt;/li>
&lt;/ul>
&lt;h2 id="类">&lt;a href="#%e7%b1%bb" class="header-anchor">&lt;/a>类
&lt;/h2>&lt;h3 id="构造函数">&lt;a href="#%e6%9e%84%e9%80%a0%e5%87%bd%e6%95%b0" class="header-anchor">&lt;/a>构造函数
&lt;/h3>&lt;ul>
&lt;li>不要在构造函数中调用自身的虚函数，这类调用时不会重定向到子类的虚函数实现，即使现在没有被子类重载，将来也是隐患
&lt;ul>
&lt;li>C++中的虚函数允许在运行时动态绑定，即在运行时根据实际对象的类型来确定调用哪个虚函数实现。这样的动态绑定是通过虚函数表（vtable）来实现的。在构造函数中调用虚函数时，由于对象尚未完全构造完成，可能会导致虚函数表指针尚未被正确初始化，从而导致无法正确调用虚函数的实现。&lt;/li>
&lt;li>当虚函数在构造函数中被调用时，如果基类的构造函数中调用了虚函数，由于动态绑定机制，可能会调用派生类中未被构造完全的函数。这样可能会导致对象的状态不正确，甚至产生未定义的行为。&lt;/li>
&lt;li>&lt;strong>应该尽量避免在构造函数中进行复杂的初始化逻辑，以保证对象正确地构造完成。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ABaseMonster&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ABaseMonster&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">FObjectInitializer&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">ObjectInitializer&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">:&lt;/span> &lt;span class="n">BornLocation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FVector&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ZeroVector&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">,&lt;/span> &lt;span class="n">bCanCrouch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">true&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">,&lt;/span> &lt;span class="n">LocomotionComp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">nullptr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">AutoDestory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SpawnedByWaveSpawner&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MonsterLevel&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SpawnType&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ETypeofSpawn&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">None&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">NetCullDistanceSquared&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FMath&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Square&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">8000.f&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">AkForFoot&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CreateDefaultSubobject&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">UAkComponent&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;AkForFoot&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">AkForFoot&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">SetupAttachment&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">RootComponent&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">AkForFoot&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">PrimaryComponentTick&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">bAllowTickOnDedicatedServer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">WeaponComponent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CreateDefaultSubobject&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">UStarsWeaponComponent&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;WeaponComponent&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SetCollisionEnabled&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">false&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">USkeletalMeshComponent&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">SKMesh&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GetMesh&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//SKMesh-&amp;gt;VisibilityBasedAnimTickOption = EVisibilityBasedAnimTickOption::OnlyTickPoseWhenRendered;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//SKMesh-&amp;gt;bEnableUpdateRateOptimizations = true;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">AttributeManagerComponent&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">AttributeManagerComponent&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">SetOwnerType&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">EAttributeOwnerType&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Monster&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SetTeamID&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FGenericTeamId&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">uint8&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">EFactionType&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">MonsterFac&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">RespawnRate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bBeingCaptured&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>构造函数内不要调类似初始化的函数，因为初始化理论上会失败，如果执行失败返回了一个初始化失败的对象，后续怎么使用该对象是比较奇怪的&lt;/li>
&lt;/ul>
&lt;h3 id="隐式类型变换">&lt;a href="#%e9%9a%90%e5%bc%8f%e7%b1%bb%e5%9e%8b%e5%8f%98%e6%8d%a2" class="header-anchor">&lt;/a>隐式类型变换
&lt;/h3>&lt;ul>
&lt;li>不要定义隐式类型变换，对于转换运算符和单参数构造函数, 请使用 &lt;code>explicit&lt;/code> 关键字&lt;/li>
&lt;li>隐式类型转换会隐藏类型不匹配的错误. 有时, 目的类型并不符合用户的期望, 甚至用户根本没有意识到发生了类型转换.&lt;/li>
&lt;li>隐式类型转换会让代码难以阅读, 尤其是在有函数重载的时候, 因为这时很难判断到底是哪个函数被调用.&lt;/li>
&lt;/ul>
&lt;h3 id="可拷贝类型和可移动类型">&lt;a href="#%e5%8f%af%e6%8b%b7%e8%b4%9d%e7%b1%bb%e5%9e%8b%e5%92%8c%e5%8f%af%e7%a7%bb%e5%8a%a8%e7%b1%bb%e5%9e%8b" class="header-anchor">&lt;/a>可拷贝类型和可移动类型
&lt;/h3>&lt;ul>
&lt;li>如果需要显式定义拷贝和移动，否则就把隐式产生的拷贝和移动函数禁掉&lt;/li>
&lt;li>如果需要就让你的类型可拷贝 / 可移动. 作为一个经验法则, 如果对于你的用户来说这个拷贝操作不是一眼就能看出来的, 那就不要把类型设置为可拷贝. 如果让类型可拷贝, 一定要同时给出拷贝构造函数和赋值操作的定义, 反之亦然. 如果让类型可移动, 同时移动操作的效率高于拷贝操作, 那么就把移动的两个操作 (移动构造函数和赋值操作) 也给出定义. 如果类型不可拷贝, 但是移动操作的正确性对用户显然可见, 那么把这个类型设置为只可移动并定义移动的两个操作&lt;/li>
&lt;li>如果定义了拷贝/移动操作, 则要保证这些操作的默认实现是正确的. 记得时刻检查默认操作的正确性, 并且在文档中说明类是可拷贝的且/或可移动的&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Foo&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Foo&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">field_&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">other&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">field&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 差, 只定义了移动构造函数, 而没有定义对应的赋值运算符.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Field&lt;/span> &lt;span class="n">field_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>如果你的类不需要拷贝 / 移动操作, 请显式地通过在 &lt;code>public&lt;/code> 域中使用 &lt;code>= delete&lt;/code> 或其他手段禁用之.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// MyClass is neither copyable nor movable.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">MyClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">MyClass&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">MyClass&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">MyClass&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="继承">&lt;a href="#%e7%bb%a7%e6%89%bf" class="header-anchor">&lt;/a>继承
&lt;/h3>&lt;ul>
&lt;li>析构函数，虚函数&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">A&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;A::~A()&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">protected&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">B&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">A&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">B&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">xx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">xx&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">xx&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">xx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;B::~B()&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">protected&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">xx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">B&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="多重继承">&lt;a href="#%e5%a4%9a%e9%87%8d%e7%bb%a7%e6%89%bf" class="header-anchor">&lt;/a>多重继承
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>最多只有一个基类是非抽象类，其他基类都是纯接口类&lt;/p>
&lt;/li>
&lt;li>
&lt;p>菱形继承？？通常意味着设计出了问题&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="接口">&lt;a href="#%e6%8e%a5%e5%8f%a3" class="header-anchor">&lt;/a>接口
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>C++接口&lt;/p>
&lt;/li>
&lt;li>
&lt;p>蓝图接口&lt;/p>
&lt;ul>
&lt;li>
&lt;p>BlueprintImplementableEvent&lt;/p>
&lt;/li>
&lt;li>
&lt;p>BlueprintNativeEvent&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="运算符重载">&lt;a href="#%e8%bf%90%e7%ae%97%e7%ac%a6%e9%87%8d%e8%bd%bd" class="header-anchor">&lt;/a>运算符重载
&lt;/h3>&lt;ul>
&lt;li>运算符重载会混淆视听，让人误以为耗时的操作和操作内建类型一样轻巧&lt;/li>
&lt;/ul>
&lt;h3 id="成员变量">&lt;a href="#%e6%88%90%e5%91%98%e5%8f%98%e9%87%8f" class="header-anchor">&lt;/a>成员变量
&lt;/h3>&lt;p>一般不建议把成员变量标记为&lt;code>public&lt;/code>，接口变更时更容易出现遗漏。&lt;/p>
&lt;p>并且一个&lt;code>public&lt;/code>的变量，对象自身对其更难以控制，不利于约束其读写行为。&lt;/p>
&lt;p>考虑为其增加&lt;code>public&lt;/code>的&lt;code>Set&lt;/code>与&lt;code>Get&lt;/code>相关接口来实现对其的操作。&lt;/p>
&lt;p>比如如下例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="n">FString&lt;/span> &lt;span class="n">SaveKey&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">StarsSaveGame&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OverrideSaveKey&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">SaveKey&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">IsEmpty&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SaveKey&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Class&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetName&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果调用者错误使用了&lt;code>FString&amp;amp; SaveKey = StarsSaveGame-&amp;gt;OverrideSaveKey&lt;/code>，那么就会错误修改成员变量。&lt;/p>
&lt;p>如果改成函数的返回则没有这种隐患，会在编译器得到警告：&lt;/p>
&lt;blockquote>
&lt;p>Binding r-value to l-value reference is non-standard Microsoft C++ extension&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="n">FString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">SaveKey&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">StarsSaveGame&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetOverrideSaveKey&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">SaveKey&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">IsEmpty&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SaveKey&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Class&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetName&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="结构体">&lt;a href="#%e7%bb%93%e6%9e%84%e4%bd%93" class="header-anchor">&lt;/a>结构体
&lt;/h2>&lt;h3 id="成员变量初始化">&lt;a href="#%e6%88%90%e5%91%98%e5%8f%98%e9%87%8f%e5%88%9d%e5%a7%8b%e5%8c%96" class="header-anchor">&lt;/a>成员变量初始化
&lt;/h3>&lt;p>如下：用到的指针一定要进行初始化，在栈上创建结构体时，指针并不会被UE初始化，会造成野指针&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="n">USTRUCT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BlueprintType&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">FDeathInfo&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">GENERATED_BODY&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UPROPERTY&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BlueprintReadOnly&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">EDeadCauserType&lt;/span> &lt;span class="n">DeadCauserType&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">EDeadCauserType&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Common&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/** 击杀者 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UPROPERTY&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BlueprintReadOnly&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">AActor&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">Killer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/** 被击杀者 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UPROPERTY&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BlueprintReadOnly&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">AActor&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">Victim&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="枚举">&lt;a href="#%e6%9e%9a%e4%b8%be" class="header-anchor">&lt;/a>枚举
&lt;/h2>&lt;p>如果枚举值需要暴露给蓝图，那么他需要在&lt;code>uint8&lt;/code>范围内，否则在一些时候会有超出预期的问题。&lt;/p>
&lt;p>如果想要大数值的枚举，又不想在蓝图中直接写死数值，可以考虑使用&lt;code>FName&lt;/code>来与之对应，推荐使用表格维护。&lt;/p>
&lt;h3 id="枚举值类型">&lt;a href="#%e6%9e%9a%e4%b8%be%e5%80%bc%e7%b1%bb%e5%9e%8b" class="header-anchor">&lt;/a>枚举值类型
&lt;/h3>&lt;p>枚举值应使用&lt;code>enum class&lt;/code>定义并标识所使用的存储结构，而不应该直接使用&lt;code>enum&lt;/code>。&lt;/p>
&lt;h4 id="枚举值类型理由">&lt;a href="#%e6%9e%9a%e4%b8%be%e5%80%bc%e7%b1%bb%e5%9e%8b%e7%90%86%e7%94%b1" class="header-anchor">&lt;/a>枚举值类型理由
&lt;/h4>&lt;p>&lt;code>enum&lt;/code>无法指定底层所使用的数据类型。同一&lt;code>enum&lt;/code>的存储结构在不同的编译器下可能不同，有的时候会造成代码的泛用性降低。改为&lt;code>enum class&lt;/code>后，可以指定具体的存储结构，使得开发者对其结构更为可控。&lt;/p>
&lt;p>&lt;code>enum&lt;/code>存在向整形的隐式转换。隐式转换在一些时候虽然方便了开发者调用，但在错误复制或编码时没有明确的报错，因此不建议使用隐式转换。改为&lt;code>enum class&lt;/code>后，如果需要进行转换可以使用&lt;code>static_cast&lt;/code>来显式转换。&lt;/p>
&lt;p>&lt;code>enum&lt;/code>无法定义重名。&lt;code>enum&lt;/code>为了解决这个问题一般需要在枚举值命名中加入类型名，从而导致在一些情境下枚举值较长。而&lt;code>enum class&lt;/code>没有这种问题，可以按照设计的枚举值进行命名。&lt;/p>
&lt;h3 id="枚举值命名">&lt;a href="#%e6%9e%9a%e4%b8%be%e5%80%bc%e5%91%bd%e5%90%8d" class="header-anchor">&lt;/a>枚举值命名
&lt;/h3>&lt;p>枚举值类型命名为以E开头，如&lt;code>EUnitClientType&lt;/code>，即使不暴露给蓝图也可以遵循此规范。&lt;/p>
&lt;p>因为枚举值常常直接拿出值用作比较，使用此规范可以区分出枚举值和普通的类型，也方便代码补全工具查找指定枚举。&lt;/p>
&lt;h3 id="枚举值顺序">&lt;a href="#%e6%9e%9a%e4%b8%be%e5%80%bc%e9%a1%ba%e5%ba%8f" class="header-anchor">&lt;/a>枚举值顺序
&lt;/h3>&lt;p>除非明确地知道修改顺序不会产生影响，否则不要修改枚举的顺序，有可能造成逻辑或者数据不兼容。&lt;/p>
&lt;p>若枚举值的顺序不应被修改（一般是在配置表或其他逻辑中有调用），考虑用&lt;code>=&lt;/code>写出其枚举值。&lt;/p>
&lt;p>若枚举值无固定值，则可以默认视为枚举值顺序改变不影响逻辑。&lt;/p>
&lt;h3 id="枚举值举例">&lt;a href="#%e6%9e%9a%e4%b8%be%e5%80%bc%e4%b8%be%e4%be%8b" class="header-anchor">&lt;/a>枚举值举例
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">enum&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">EGameType&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">uint8&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">None&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Local&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Multiple&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="异常">&lt;a href="#%e5%bc%82%e5%b8%b8" class="header-anchor">&lt;/a>异常
&lt;/h2>&lt;p>要注重异常处理，对于有可能报错的函数，可以考虑增加bool的返回值来标识是否正常处理。&lt;/p>
&lt;p>如果有可能有多种错误，建议返回错误码来标识错误类型。&lt;/p>
&lt;h3 id="错误码">&lt;a href="#%e9%94%99%e8%af%af%e7%a0%81" class="header-anchor">&lt;/a>错误码
&lt;/h3>&lt;p>使用&lt;code>EErrorId&lt;/code>的枚举来表示错误码。&lt;/p>
&lt;p>避免在逻辑中直接写死&lt;code>int32&lt;/code>的错误值，在&lt;code>C++&lt;/code>中使用错误码，在蓝图或者&lt;code>Lua&lt;/code>中使用&lt;code>FName&lt;/code>。&lt;/p>
&lt;p>可以使用&lt;code>UErrorIdLibrary&lt;/code>中的函数从&lt;code>枚举&lt;/code>/&lt;code>int32&lt;/code>/&lt;code>FName&lt;/code>之间转换。&lt;/p>
&lt;p>判断一个&lt;code>int32&lt;/code>是否是&lt;code>OK&lt;/code>可以使用&lt;code>UErrorLibrary::IsErrorIdOK&lt;/code>。&lt;/p>
&lt;p>判断一个&lt;code>in32&lt;/code>是否是指定枚举需要将枚举转为&lt;code>int32&lt;/code>判断。&lt;/p>
&lt;p>避免&lt;code>int32&lt;/code>转为枚举来判断，有可能出现不是一个合法的枚举而产生非预期结果。&lt;/p>
&lt;h2 id="函数">&lt;a href="#%e5%87%bd%e6%95%b0" class="header-anchor">&lt;/a>函数
&lt;/h2>&lt;h3 id="输入和输出">&lt;a href="#%e8%be%93%e5%85%a5%e5%92%8c%e8%be%93%e5%87%ba" class="header-anchor">&lt;/a>输入和输出
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>按值返回，否则按引用返回。避免返回指针，除非它可以为空。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>输入参数放在所有输出参数之前。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">TestFunction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">p1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="n">p2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">FString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">p3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">bool&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">bOutResult1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">FString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">OutResult2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="编写简短函数">&lt;a href="#%e7%bc%96%e5%86%99%e7%ae%80%e7%9f%ad%e5%87%bd%e6%95%b0" class="header-anchor">&lt;/a>编写简短函数
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>如果函数特别长，应思考在不影响程序结构的前提下对其进行分割&lt;/p>
&lt;/li>
&lt;li>
&lt;p>编译器优化一方面是消除常用的子表达式。而函数越大，编译器进行辨识的工作量就越大。从而导致编译时间大大增长。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="常量正确性">&lt;a href="#%e5%b8%b8%e9%87%8f%e6%ad%a3%e7%a1%ae%e6%80%a7" class="header-anchor">&lt;/a>常量正确性
&lt;/h3>&lt;ul>
&lt;li>不要直接进行值传递，避免一次内存拷贝，传递const引用参数&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 差 - 返回常量数组
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">TArray&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">FString&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">GetSomeArray&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 优 - 返回常量数组的引用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">TArray&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">FString&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">GetSomeArray&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 差 - 传递数组
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">TestSomething&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TArray&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">FString&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">StringArray&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{...}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 优 - 传递常引用数组（避免一次内存拷贝）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">TestSomething&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">TArray&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">FString&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">StringArray&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{...}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 优 - 移动语义（避免一次内存拷贝）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">TestSomething&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TArray&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">FString&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">StringArray&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{...}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>若方法不修改对象，将函数标记为常量函数&lt;/p>
&lt;ul>
&lt;li>
&lt;p>常量成员函数承诺不会修改类的成员变量，提高代码的安全性，防止意外的数据修改和潜在错误。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>代码逻辑更清晰，一眼就能看出这是个只读函数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>给编译器优化空间&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">FThing&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">SomeNonMutatingOperation&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 若此代码在FThing上被调用，其不会修改FThing
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>游戏中的例子：如果PrintAIData函数定位为const，则我们立马能确认函数体内的AIDataPack成员变量进行的都是只读操作，否则还要去判断是否有写入操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">ABaseMonster&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">PrintAIData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">CompName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">FString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">TreeDescName&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TArray&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">FString&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">BBLine&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">const&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/*if (AIDataPack.ComponmentName.IsEmpty())
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> return;*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CompName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">AIDataPack&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ComponmentName&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TreeDescName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">AIDataPack&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">TreeDescription&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">AIDataPack&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">BlackboardDescription&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ParseIntoArrayLines&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BBLine&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MARK_DIRTY&lt;/span>&lt;span class="err">？？&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>若循环不修改容器，则在容器上使用常量迭代&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="n">TArray&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">FString&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">StringArray&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">FString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="nl">Str&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">StringArray&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 此循环的主体不会修改StringArray
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="函数重载">&lt;a href="#%e5%87%bd%e6%95%b0%e9%87%8d%e8%bd%bd" class="header-anchor">&lt;/a>函数重载
&lt;/h3>&lt;ul>
&lt;li>若要使用函数重载, 则必须能让读者一看调用点就胸有成竹, 而不用花心思猜测调用的重载函数到底是哪一种. 这一规则也适用于构造函数&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyClass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">Analyze&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">string&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">text&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Analyze&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">text&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">textlen&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>如果函数单靠不同的参数类型而重载 (这意味着参数数量不变), 读者就得十分熟悉 C++ 五花八门的匹配规则, 以了解匹配过程具体到底如何。另外，如果派生类只重载了某个函数的部分变体，继承语义就容易令人困惑。&lt;/li>
&lt;/ul>
&lt;h3 id="缺省参数">&lt;a href="#%e7%bc%ba%e7%9c%81%e5%8f%82%e6%95%b0" class="header-anchor">&lt;/a>缺省参数
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>缺省参数实际上是函数重载语义的另一种实现方式&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于子类继承的虚函数，不允许使用缺省参数&lt;/p>
&lt;ul>
&lt;li>
&lt;p>虚函数是动态绑定，而缺省参数值是静态绑定。即虚函数是运行时确定类型，而缺省参数值是编译时就确定的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果重新定义的话，会使得程序使用基类虚函数的默认参数，这显然并不是你想要的结果。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Shape&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">enum&lt;/span> &lt;span class="nc">Color&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Red&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Green&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Blue&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">draw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Color&lt;/span> &lt;span class="n">color&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Red&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">ColorToString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Color&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="nl">Red&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;Red&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="nl">Green&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;Green&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="nl">Blue&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;Blue&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Rectangle&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Shape&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">draw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Color&lt;/span> &lt;span class="n">color&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Green&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Rectangle : &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">ColorToString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Circle&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Shape&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">draw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Color&lt;/span> &lt;span class="n">color&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Circle : &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">ColorToString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Rectangle&lt;/span> &lt;span class="n">R&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Circle&lt;/span> &lt;span class="n">C&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">R&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">draw&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">//输出：Rectangle : Green
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//C.draw(); //报错，静态绑定无法继承默认参数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Shape&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">pr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Shape&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">pc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">C&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pr&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">draw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Shape&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Blue&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//输出：Rectangle : Blue
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">pc&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">draw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Shape&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Blue&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//输出：Circle : Blue
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 静态绑定，使用基类的默认参数，完成派生类的动作
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">pr&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">draw&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">//输出：Rectangle : Red
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">pc&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">draw&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">//输出：Circle : Red
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="lambda表达式">&lt;a href="#lambda%e8%a1%a8%e8%be%be%e5%bc%8f" class="header-anchor">&lt;/a>Lambda表达式
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>不要使用默认捕获（=, &amp;amp;），所有变量捕获都显式写出来&lt;/p>
&lt;ul>
&lt;li>非异步的lambda表达式除外，例如：Foreach之类的&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>异步回调Lambda表达式捕获局部变量&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Lambda不要捕获UObject裸指针&lt;/p>
&lt;ul>
&lt;li>
&lt;p>如果再等待异步回调执行之前，捕获的UObject裸指针已被GC且在原来的内存上又分配了新的UObject&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果此时在回调中对该过期了的UObject进行写入，则相当于在一个未知的内存上写入，可能把新的UObject写坏了。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 异步回调的情况
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">UStarsAssetsManager&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Instance&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">AsyncLoad&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MeshInfo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">MeshPath&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="n">WeakThis&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">CallBack&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">CompPtr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MeshInfo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">WithCollision&lt;/span>&lt;span class="p">](&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">FSoftObjectPath&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">ObjectPath&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">CompPtr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">IsValid&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">WeakThis&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">IsValid&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 非异步的情况
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">SpecialElementNames&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Empty&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ForeachRow&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">FSpecialElementTableRow&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">](&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">FName&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">RowName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">FSpecialElementTableRow&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">Row&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SpecialElementNames&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Emplace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Row&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Type&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RowName&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="配置">&lt;a href="#%e9%85%8d%e7%bd%ae" class="header-anchor">&lt;/a>配置
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>使用&lt;code>UDataManger&lt;/code>来管理所有表格&lt;/p>
&lt;/li>
&lt;li>
&lt;p>需要使用&lt;code>StarsGetDataTable&lt;/code>等接口来读表，禁止使用UE自带的表格读取&lt;/p>
&lt;ul>
&lt;li>我们会对同结构表格在读取时进行合并处理&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>考虑热更配置的需求，谨慎对配置进行缓存，优先考虑以&lt;code>RowName&lt;/code>去查表。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="回调">&lt;a href="#%e5%9b%9e%e8%b0%83" class="header-anchor">&lt;/a>回调
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>谨慎使用回调，尤其需要注意是否存在跨帧逻辑与递归逻辑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>谨慎缓存Delegate，有可能会使得闭包异常。&lt;/p>
&lt;ul>
&lt;li>比如在Delegate的回调中，修改了这个Delegate，那么捕获的变量会存在异常。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="标准库">&lt;a href="#%e6%a0%87%e5%87%86%e5%ba%93" class="header-anchor">&lt;/a>标准库
&lt;/h2>&lt;p>UE有自己的一套模板库，大部分情况下应该使用UE，下面是可以在UE中使用的标准库。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;atomic>&lt;/td>
&lt;td>应在新代码中使用，在迁移旧代码时也应该使用。原子性（Atomic）将在所有受支持平台上高效推广。 &lt;code>TAtomic&lt;/code> 仅实现了部分功能，Epic后续也不会继续进行维护和改善。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;lt;type_traits&amp;gt;&lt;/td>
&lt;td>应在旧版UE特性（trait）和标准特性重叠的地方使用。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;lt;initializer_list&amp;gt;&lt;/td>
&lt;td>用于支持初始化器（initializer）语法&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;regex>&lt;/td>
&lt;td>正则表达式，UE没有自己的正则表达式方案&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;limits>&lt;/td>
&lt;td>&lt;code>std::numeric_limits&lt;/code> 可以完整使用。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;cmath>&lt;/td>
&lt;td>这个头文件中只有浮点比较函数可以使用&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="排版与格式">&lt;a href="#%e6%8e%92%e7%89%88%e4%b8%8e%e6%a0%bc%e5%bc%8f" class="header-anchor">&lt;/a>排版与格式
&lt;/h2>&lt;h3 id="命名相关">&lt;a href="#%e5%91%bd%e5%90%8d%e7%9b%b8%e5%85%b3" class="header-anchor">&lt;/a>命名相关
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>命名（如类型或变量）中的每个单词需大写首字母，单词间通常无下划线。例如：&lt;code>Health&lt;/code> 和 &lt;code>UPrimitiveComponent&lt;/code>，而非 &lt;code>lastMouseCoordinates&lt;/code> 或 &lt;code>delta_coordinates&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>类型名前缀需使用额外的大写字母，用于区分其和变量命名。例如：&lt;code>FSkin&lt;/code> 为类型名，而 &lt;code>Skin&lt;/code> 则是 &lt;code>FSkin&lt;/code> 的实例。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>模板类的前缀为T。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>继承自 &lt;code>UObject&lt;/code> 的类前缀为U。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>继承自 &lt;code>AActor&lt;/code> 的类前缀为A。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>继承自 &lt;code>SWidget&lt;/code> 的类前缀为S。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>接口的前缀为I。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>枚举的前缀为E。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>布尔变量必须以b为前缀（例如 &lt;code>bPendingDestruction&lt;/code> 或 &lt;code>bHasFadedIn&lt;/code>）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>其他多数类均以F为前缀，而部分子系统则以其他字母为前缀。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Typedefs应以任何与其类型相符的字母为前缀：若为结构体的Typedefs，则使用F；若为 &lt;code>Uobject&lt;/code> 的Typedefs，则使用U，以此类推。&lt;/p>
&lt;ul>
&lt;li>特别模板实例化的Typedef不再是模板，并应加上相应前缀，例如：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="n">TArray&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">FMytype&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">FArrayOfMyTypes&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>即使不暴露给蓝图，也可以遵循此命名规范以适应UE的规范。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>类型和变量的命名为名词。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>方法名是动词，以描述方法的效果或未被方法影响的返回值。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>所有返回布尔的函数应发起true/false的询问，如&lt;code>IsVisible()或ShouldClearBuffer()&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>若函数参数通过引用传递，同时该值会写入函数，建议以&amp;quot;Out&amp;quot;做为函数参数命名的前缀（非必需）。此操作将明确表明传入该参数的值将被函数替换。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>若In或Out参数同样为布尔，以b作为In/Out的前缀，如 &lt;code>bOutResult&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>返回值的函数应描述返回的值.命名应说明函数将返回的值。此规则对布尔函数极为重要。请参考以下两个范例方法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// True的意义是什么？
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">bool&lt;/span> &lt;span class="nf">CheckTea&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FTea&lt;/span> &lt;span class="n">Tea&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 命名明确说明茶是新鲜的
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">bool&lt;/span> &lt;span class="nf">IsTeaFresh&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FTea&lt;/span> &lt;span class="n">Tea&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>对于缩写单词，推荐仍然使用首字母大写其余小写的格式&lt;/p>
&lt;ul>
&lt;li>
&lt;p>可以避免陷入什么是缩写什么不是的争议中&lt;/p>
&lt;ul>
&lt;li>PHP-&amp;gt;Php&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>对于复杂变量名可以获得更清晰的展示&lt;/p>
&lt;ul>
&lt;li>如HTTPSubsystem-&amp;gt;HttpSubsystem&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>UE内部变量两者都有，以仅大写首字母为主&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>命名范例&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">float&lt;/span> &lt;span class="n">TeaWeight&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">int32&lt;/span> &lt;span class="n">TeaCount&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">bool&lt;/span> &lt;span class="n">bDoesTeaStink&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">FName&lt;/span> &lt;span class="n">TeaName&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">FString&lt;/span> &lt;span class="n">TeaFriendlyName&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">UClass&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">TeaClass&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">USoundCue&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">TeaSound&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">UTexture&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">TeaTexture&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">FPlayerIdentifier&lt;/span> &lt;span class="n">PlayerId&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="代码格式">&lt;a href="#%e4%bb%a3%e7%a0%81%e6%a0%bc%e5%bc%8f" class="header-anchor">&lt;/a>代码格式
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>一行不超过120个字符&lt;/p>
&lt;/li>
&lt;li>
&lt;p>尽量不使用非ASCII编码，文件编码必须为UTF-8&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缩进使用制表位\t&lt;/p>
&lt;/li>
&lt;li>
&lt;p>大括号格式必须一致。在Epic的传统做法中，大括号固定被放在新行。请遵循此格式。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>固定在单语句块中使用大括号。例如：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bThing&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>if-else语句中的所有执行块都应该使用大括号。此举是为防止编辑时出错——未使用大括号时，可能会意外地将另一行加入if块中。多余行不受if表达式控制，会成为较差代码。条件编译的项目导致if/else语句中断时，也会造成不良结果。因此务必使用大括号。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bHaveUnrealLicense&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">InsertYourGameHere&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CallMarkRein&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>switch语句&lt;/p>
&lt;ul>
&lt;li>一定有Default条件，其中包含有break，以防在默认条件后添加新的条件。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">condition&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 落入
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="注释">&lt;a href="#%e6%b3%a8%e9%87%8a" class="header-anchor">&lt;/a>注释
&lt;/h2>&lt;h3 id="规范">&lt;a href="#%e8%a7%84%e8%8c%83" class="header-anchor">&lt;/a>规范
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>无所谓英不英文，代码是项目组内的人看的，方便大家读懂就行&lt;/p>
&lt;/li>
&lt;li>
&lt;p>函数注释&lt;/p>
&lt;ul>
&lt;li>
&lt;p>大概功能描述&lt;/p>
&lt;/li>
&lt;li>
&lt;p>各个参数的描述&lt;/p>
&lt;/li>
&lt;li>
&lt;p>返回值的描述&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>其他信息&lt;/strong>：可选择使用 &lt;code>@warning&lt;/code>、&lt;code>@note&lt;/code>、&lt;code>@see&lt;/code> 和 &lt;code>@deprecated&lt;/code> 记载额外相关信息。此类注释应在其他注释后单列一行声明。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @brief 判断所给定义的道具是否是确定的
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 比如如果是随机品质的定义，就不是确定的
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @param ItemDef 所需检查的物品定义
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @param CheckQualityNum 是否需要检查该道具是否仅有一个品质
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 如果检查并且发现该道具仅有一个品质
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 那么即使定义随机也会认为是唯一的
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @return 返回值的意义
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">UFUNCTION&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BlueprintCallable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Category&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;Item&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="n">IsItemDefCertain&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">FBagItemDef&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">ItemDef&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="n">CheckQualityNum&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="原则">&lt;a href="#%e5%8e%9f%e5%88%99" class="header-anchor">&lt;/a>原则
&lt;/h3>&lt;ul>
&lt;li>编写含义清晰的代码：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 错误示范：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">l&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 正确示范：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">TotalLeaves&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SmallLeaves&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">LargeLeaves&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">SmallAndLargeLeaves&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>编写有用的注释：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 错误示范：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// increment Leaves
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="n">Leaves&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 正确示范：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// we know there is another tea leaf
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="n">Leaves&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>不要对低质量代码进行注释——重新编写这些代码：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 错误示范：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// total number of leaves is sum of
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// small and large leaves less the
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// number of leaves that are both
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">l&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 正确示范：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">TotalLeaves&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SmallLeaves&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">LargeLeaves&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">SmallAndLargeLeaves&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>不要让代码与注释自相矛盾：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 错误示范：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// never increment Leaves!
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="n">Leaves&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 正确示范：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// we know there is another tea leaf
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="n">Leaves&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="todo">&lt;a href="#todo" class="header-anchor">&lt;/a>TODO
&lt;/h3>&lt;p>对那些临时的, 短期的解决方案, 或已经够好但仍不完美的代码使用 TODO 注释。&lt;/p>
&lt;p>标记一些未完成的或完成的不尽如人意的地方, 这样一搜索, 就知道还有哪些活要干, 日志都省了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">PriorityQueue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Num&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">logger&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CheckLoop&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">__FUNCTION__&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//取出优先队列头
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">auto&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">PopData&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">PriorityQueue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">HeapTop&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 先判空一下，TODO: 后面查一下循环内销毁问题
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">PopData&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SmeltComp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">IsValid&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PriorityQueue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">HeapPopDiscard&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DataPredicate&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">continue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="其他相关">&lt;a href="#%e5%85%b6%e4%bb%96%e7%9b%b8%e5%85%b3" class="header-anchor">&lt;/a>其他相关
&lt;/h2>&lt;h3 id="sizeof">&lt;a href="#sizeof" class="header-anchor">&lt;/a>Sizeof
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>尽可能的使用sizeof(varname)代替sizeof(type)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>假设varname的类型变了，sizeof(type)大概率会忘改造成bug&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="迭代器">&lt;a href="#%e8%bf%ad%e4%bb%a3%e5%99%a8" class="header-anchor">&lt;/a>迭代器
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>前置自增效率更高，少了一次拷贝&lt;/p>
&lt;/li>
&lt;li>
&lt;p>迭代器失效的情况&lt;/p>
&lt;ul>
&lt;li>
&lt;p>TArray&lt;/p>
&lt;ul>
&lt;li>
&lt;p>增加导致的内存重分配&lt;/p>
&lt;/li>
&lt;li>
&lt;p>删除元素&lt;/p>
&lt;/li>
&lt;li>
&lt;p>插入元素&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="死循环">&lt;a href="#%e6%ad%bb%e5%be%aa%e7%8e%af" class="header-anchor">&lt;/a>死循环
&lt;/h3>&lt;ul>
&lt;li>无符号整数错误使用导致的死循环&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">...&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>容器的size()返回类型size_t是无符号整数&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">vec&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">vec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">idx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="n">idx&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">idx&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;===== &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>while循环，条件永远不满足&lt;/p>
&lt;/li>
&lt;li>
&lt;p>死循环检查工具&lt;/p>
&lt;ul>
&lt;li>
&lt;p>FDeadLockDetector&lt;/p>
&lt;ul>
&lt;li>死循环时崩掉并打印主线程堆栈&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="浮点数">&lt;a href="#%e6%b5%ae%e7%82%b9%e6%95%b0" class="header-anchor">&lt;/a>浮点数
&lt;/h3>&lt;ul>
&lt;li>判断浮点数是否相等&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">float&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mf">0.2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">// 错误用法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">abs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mf">0.2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mf">0.00001&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">// 正确用法
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="stdvectorbool">&lt;a href="#stdvectorbool" class="header-anchor">&lt;/a>std::vector&amp;lt;bool&amp;gt;
&lt;/h3>&lt;ul>
&lt;li>尽量不要在vector中存放bool类型，vector为了做优化，它的内部存放的其实不是bool。&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h3 id="空指针">&lt;a href="#%e7%a9%ba%e6%8c%87%e9%92%88" class="header-anchor">&lt;/a>空指针
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>空指针尽量使用nullptr而非NULL&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;char*&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;int&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 编译失败 error: call of overloaded ‘func(NULL)’ is ambiguous
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// char*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="数值溢出">&lt;a href="#%e6%95%b0%e5%80%bc%e6%ba%a2%e5%87%ba" class="header-anchor">&lt;/a>数值溢出
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Plain" data-lang="Plain">&lt;span class="line">&lt;span class="cl">const int32 RetryToken = FMath::RandRange(0, INT_MAX); // 这里会随机出负数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">##RandRange 实现
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">static FORCEINLINE int32 RandRange(int32 Min, int32 Max)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> const int32 Range = (Max - Min) + 1; //INT_MAX的情况下，一定溢出
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return Min + RandHelper(Range);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="内存">&lt;a href="#%e5%86%85%e5%ad%98" class="header-anchor">&lt;/a>内存
&lt;/h2>&lt;h3 id="常见问题">&lt;a href="#%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98" class="header-anchor">&lt;/a>常见问题
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>避免使用原生数组，尽量使用UE容器&lt;/p>
&lt;ul>
&lt;li>原生数组无法检查越界&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>空指针未判空&lt;/p>
&lt;ul>
&lt;li>
&lt;p>空指针导致的崩溃占大多数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>防御性编程&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>缓冲区溢出&lt;/p>
&lt;ul>
&lt;li>
&lt;p>sprintf，printf，memcpy，memset，strcat，strcpy等等&lt;/p>
&lt;/li>
&lt;li>
&lt;p>上述函数拷贝内存的时候没有检查是否越界，如果发生越界会把其他不相干的内存写坏，导致无法预料的bug&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">szName&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">strcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">szName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>返回局部引用&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">xxx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">xxx&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>指针未初始化&lt;/p>
&lt;ul>
&lt;li>
&lt;p>UObject成员带UPROPERTY，会被自动初始化为nullptr&lt;/p>
&lt;/li>
&lt;li>
&lt;p>普通指针未初始化，指向任意地址&lt;/p>
&lt;ul>
&lt;li>if判断已经无效，向野指针内写入数据&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>注意：USTRUCT的指针成员就算带UPROPERTY也不会初始化位null&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>不正确的类型转换&lt;/p>
&lt;ul>
&lt;li>
&lt;p>使用C++的类型转换，避免C类型转换&lt;/p>
&lt;ul>
&lt;li>
&lt;p>static_cast，不使用C类型转换&lt;/p>
&lt;/li>
&lt;li>
&lt;p>const_cast，去掉const限定符&lt;/p>
&lt;/li>
&lt;li>
&lt;p>reinterpret_cast，指针类型和整形或其他指针之间进行不安全的相互转换&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>当程序执行不正确的类型转换时，就会发生不可预测的结果。这可能会导致程序崩溃写坏内存或产生不正确的输出。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">num&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 不正确的类型转换
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">5.0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 写越界
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ptr&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>Memcpy, memset用于非POD类型，把vtable的指针给破坏掉了&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">A&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">nn&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">protected&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">nn&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">B&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">A&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">B&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">A&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">test&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;B::test, %d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">nn&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">B&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>函数内自销毁，导致后续代码访问或写入成员变量时写坏内存&lt;/p>
&lt;ul>
&lt;li>
&lt;p>宠物切换状态会停掉行为树，而此函数在行为树Task节点中直接执行（Task内停掉行为树）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>行为树Task节点尝试删掉行为树Owner的Actor（危险操作、应延迟一帧执行）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>有自销毁操作时需小心，考虑清楚是否需要延迟一帧&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>循环操作没有取引用，导致发生了结构体拷贝&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Lambda表达式自销毁，内部引用的捕获变量被销毁后使用引发的内存问题&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="n">TWeakObjectPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">UWorldManager&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">thisObject&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Stars&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Message&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">PvpTrigger&lt;/span> &lt;span class="n">triggerData&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">trigger&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">GetWorld&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetTimerManager&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">SetTimer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PvPingTimerHandle&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">FTimerDelegate&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">CreateWeakLambda&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">thisObject&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">triggerData&lt;/span>&lt;span class="p">](){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">thisObject&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">IsValid&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">thisObject&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">m_GuildManager&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="k">nullptr&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">int32&lt;/span> &lt;span class="n">DefenEndTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">AStarsGameState&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">GetWorldDayZeroTime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">thisObject&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Get&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">triggerData&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">defendendtime&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">int32&lt;/span> &lt;span class="n">worldTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">AStarsGameState&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">GetWorldTime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">thisObject&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Get&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">worldTime&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">DefenEndTime&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">thisObject&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">m_WorldInfo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">PlanetPVPStatus&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">EPlanetPVPStatus&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">None&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">DefenEndTime&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">86400&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//防守结束
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">thisObject&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">m_WorldInfo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">PlanetPVPStatus&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">EPlanetPVPStatus&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">None&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thisObject&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">m_GuildManager&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OnPlanetPVPStatusStart&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">EPlanetPVPStatus&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">None&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thisObject&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">m_GuildManager&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OnPvpBattleEnd&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SetWorldInfomation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">thisObject&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">m_WorldInfo&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">AStarsGameState&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">GetWorldIntTime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">thisObject&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Get&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="n">triggerData&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">enttime&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//完全结束
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">thisObject&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">m_WorldInfo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">PlanetPVPStatus&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">EPlanetPVPStatus&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">None&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thisObject&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">m_WorldInfo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">PVPStatusStartTime&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thisObject&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">m_WorldInfo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">PVPStatusEndTime&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thisObject&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">m_WorldInfo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">PVPDefenseStartTime&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thisObject&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">m_WorldInfo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">PVPDefenseEndTime&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thisObject&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">m_WorldInfo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">IsPlanetBattleStatues&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thisObject&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">m_GuildManager&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OnPlanetPVPStatusStart&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">EPlanetPVPStatus&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">None&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thisObject&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">m_GuildManager&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OnPVPBattleStateChanged&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">false&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thisObject&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">m_GuildManager&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OnPvpBattleEnd&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 这里Lambda表达式被销毁，导致thisObject被销毁
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">thisObject&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetWorld&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetTimerManager&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">ClearTimer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">thisObject&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">PvPingTimerHandle&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 好在这里是读内存不是写，没有造成更坏的情况
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">SetWorldInfomation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">thisObject&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">m_WorldInfo&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}),&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="智能指针">&lt;a href="#%e6%99%ba%e8%83%bd%e6%8c%87%e9%92%88" class="header-anchor">&lt;/a>智能指针
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>智能指针&lt;/p>
&lt;ul>
&lt;li>
&lt;p>一个裸指针使用多个智能指针包裹&lt;/p>
&lt;ul>
&lt;li>前一个智能指针销毁后导致内存被销毁，后面的再写入导致内存写坏&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">rawPtr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">TSharedPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">p1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MakeShareable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rawPtr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">TSharedPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">p2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MakeShareable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rawPtr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">*&lt;/span>&lt;span class="n">p2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>TSharedPtr&lt;/p>
&lt;ul>
&lt;li>引用计数&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>TUniquePtr&lt;/p>
&lt;ul>
&lt;li>只能转移所有权&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>注意循环引用&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">B&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;~A&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TSharedPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">B&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;~B&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TSharedPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TSharedPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MakeShared&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TSharedPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MakeShared&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">a&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">b&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>TWeakPtr&lt;/p>
&lt;ul>
&lt;li>解决循环引用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="容器">&lt;a href="#%e5%ae%b9%e5%99%a8" class="header-anchor">&lt;/a>容器
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>循环内删除与添加&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">erase&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">vec&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">iter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="n">iter&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">vec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">();)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 这个正确
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">iter&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">iter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">erase&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">iter&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">++&lt;/span>&lt;span class="n">iter&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">iter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="n">iter&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">vec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">iter&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// error
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">iter&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">erase&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">iter&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// error
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>拷贝到一个新容器中再做循环删除&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用迭代器&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>内存重分配问题&lt;/p>
&lt;ul>
&lt;li>
&lt;p>TArray&lt;/p>
&lt;/li>
&lt;li>
&lt;p>TMap也存在此问题&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">TestStruct&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">0.0f&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">FString&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">TestStruct&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UE_LOG&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">LogTemp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Log&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;~TestStruct&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">TMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TestStruct&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">structMap&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">TestStruct&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">val1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">structMap&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Emplace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">TestStruct&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">val2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">structMap&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Emplace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">10000&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">structMap&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Emplace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="ue的内存管理">&lt;a href="#ue%e7%9a%84%e5%86%85%e5%ad%98%e7%ae%a1%e7%90%86" class="header-anchor">&lt;/a>UE的内存管理
&lt;/h3>&lt;h4 id="gc机制">&lt;a href="#gc%e6%9c%ba%e5%88%b6" class="header-anchor">&lt;/a>GC机制
&lt;/h4>&lt;p>  UE使用标记清除算法实现GC，当对象的引用链不可达时，GC会回收该对象所占用的内存。在进行GC之前，UE会从根集出发对所有UObject对象进行标记，标记活动对象，并清除所有未被标记的非活动对象。&lt;/p>
&lt;p>  GC的触发通常在特定时机，如关卡切换、游戏循环周期等，以避免对游戏性能造成过多影响。&lt;/p>
&lt;p>  开发者在UE中需要注意正确管理对象引用，避免出现不必要的长期引用，以确保GC可以正确回收不再使用的内存资源，从而提高游戏性能和稳定性。&lt;/p>
&lt;h4 id="弱指针">&lt;a href="#%e5%bc%b1%e6%8c%87%e9%92%88" class="header-anchor">&lt;/a>弱指针
&lt;/h4>&lt;ul>
&lt;li>
&lt;p>通过UObject的弱指针判断其是否在生命周期内&lt;/p>
&lt;ul>
&lt;li>
&lt;p>通过GUObjectArray中的索引来指向具体的UObject&lt;/p>
&lt;/li>
&lt;li>
&lt;p>自增量校验指向的合法性&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ATestActor&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">pActor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GetWorld&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">SpawnActor&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ATestActor&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">FTimerHandle&lt;/span> &lt;span class="n">handle&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">GetWorld&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetTimerManager&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">SetTimer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">handle&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">pActor&lt;/span>&lt;span class="p">]()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 完犊子了，野指针写入！！！
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">pActor&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Test&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pActor&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Destroy&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">},&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 强制GC
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">pActor&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Destroy&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">CollectGarbage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GARBAGE_COLLECTION_KEEPFLAGS&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 新的TestActor复用原有内存
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">ATestActor&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">pActor2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GetWorld&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">SpawnActor&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ATestActor&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>非主线程中使用UObject或者其弱指针的问题&lt;/p>
&lt;ul>
&lt;li>
&lt;p>UObject是在主线程中被GC掉，所以非主线程中无法预料其生命周期&lt;/p>
&lt;/li>
&lt;li>
&lt;p>所以在非主线程中尽量不访问UObject或其弱指针，在外部主线程中将非主线程需要处理的数据全部备份好，通过Lambda表达式传递进去，任务处理完回到主线程后再访问UObject的弱指针&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="n">TWeakObjectPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">UBuildingSearchProxy&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">WeakThis&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">uint8&lt;/span> &lt;span class="n">Id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">WeakThis&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Id&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">FString&lt;/span> &lt;span class="n">SearchInput&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">WeakThis&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">SearchInput&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">TArray&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">FName&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">List&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">WeakThis&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">AsyncTask&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ENamedThreads&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">AnyBackgroundThreadNormalTask&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">WeakThis&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SearchInput&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">WeakThis&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">IsValid&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TSet&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">FName&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">SearchResult&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">FName&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="nl">Part&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Id&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">IdCounter&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#if WITH_EDITOR
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Part&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ToString&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">Contains&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SearchInput&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SearchResult&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Part&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">continue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">FItemTableRow&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">pRow&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">UDataManager&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FindRow&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">FItemTableRow&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Part&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">pRow&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="k">nullptr&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">pRow&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">DisplayName&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ToString&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">Contains&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SearchInput&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SearchResult&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Part&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">AsyncTask&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ENamedThreads&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">GameThread&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">WeakThis&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SearchResult&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">WeakThis&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">IsValid&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">WeakThis&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Id&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">IdCounter&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">WeakThis&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">PostSearchResult&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Broadcast&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SearchResult&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">WeakThis&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">SetReadyToDestroy&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>成员变量保存UE的接口裸指针&lt;/p>
&lt;ul>
&lt;li>
&lt;p>无法判断其生命周期，应保存UObject的弱指针&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用的时候再将其Cast为接口指针&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="n">TWeakObjectPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">UObject&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">CauserAttributePtr&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//伤害造成者
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">TWeakObjectPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">UObject&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">TakerAttributePtr&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//伤害承受者
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">IAttributeInterface&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">GetCauserAttributeInterface&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">IAttributeInterface&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">GetTakerAttributeInterface&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="网络">&lt;a href="#%e7%bd%91%e7%bb%9c" class="header-anchor">&lt;/a>网络
&lt;/h3>&lt;h3 id="proto">&lt;a href="#proto" class="header-anchor">&lt;/a>Proto
&lt;/h3>&lt;p>禁止直接缓存消息的Proto结构，内存有可能会被重新分配或回收。&lt;/p>
&lt;p>如果需要保存调用项目封装的接口，或者使用Proto上的CopyFrom接口。&lt;/p>
&lt;p>考虑使用&lt;code>FByteArray&lt;/code>或者&lt;code>FByteCompressedArray&lt;/code>来快捷保存通用数据。&lt;/p>
&lt;h2 id="日志">&lt;a href="#%e6%97%a5%e5%bf%97" class="header-anchor">&lt;/a>日志
&lt;/h2>&lt;p>现状：该有日志的地方没有，不该有的地方疯狂打，导致出bug时很难通过日志判断。&lt;/p>
&lt;h3 id="日志规范">&lt;a href="#%e6%97%a5%e5%bf%97%e8%a7%84%e8%8c%83" class="header-anchor">&lt;/a>日志规范
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>各功能模块的重要事件，尽量记录（只要不是频繁重复发生）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>无用信息或过于频繁打印的就不要输出了（可通过Verbosity等级控制）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>新增加的模块，尽量记录足够还原现场的日志&lt;/p>
&lt;/li>
&lt;li>
&lt;p>涉及玩家数值的行为，如物品得失、经验获得、货币流通、装备升级等，尽量记录&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果数量太大可以考虑归并后打印&lt;/p>
&lt;/li>
&lt;li>
&lt;p>避免三字符序列&lt;/p>
&lt;ul>
&lt;li>
&lt;p>在C和C++中，三字符序列是一种特殊的字符序列，用两个问号（??）开头，并由另一个字符结尾。例如，&amp;quot;??=&amp;ldquo;代表#，&amp;rdquo;??/&amp;ldquo;代表\，等等。这些三字符序列是为了在早期的编码系统中处理一些没有对应字符的情况而设计的，但在现代的编码系统中，这些三字符序列已经不再使用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当编译器在转换三字符序列时遇到问题时，就会报错：&amp;ldquo;trigraph converted to &amp;rsquo; &amp;rsquo; character&amp;rdquo;。这意味着编译器无法正确地将三字符序列转换为预期的字符，通常是因为在转换时出现了错误或者遇到了无法识别的三字符序列。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="n">UE_LOG&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">LogAStar&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Error&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Particle Type Shrink Error????!!&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="checklist">&lt;a href="#checklist" class="header-anchor">&lt;/a>CheckList
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>裸指针成员变量未初始化为空&lt;/p>
&lt;/li>
&lt;li>
&lt;p>局部变量未初始化使用&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数组越界&lt;/p>
&lt;/li>
&lt;li>
&lt;p>内存拷贝缓冲区溢出&lt;/p>
&lt;/li>
&lt;li>
&lt;p>UObject需要强引用的未用UPROPERTY包裹&lt;/p>
&lt;/li>
&lt;li>
&lt;p>UObject不需强引用的没有用弱指针&lt;/p>
&lt;/li>
&lt;li>
&lt;p>USTRUCT中包含UObject成员未用UPROPERTY&lt;/p>
&lt;/li>
&lt;li>
&lt;p>成员变量保存UE接口的裸指针&lt;/p>
&lt;/li>
&lt;li>
&lt;p>构造函数内调用虚函数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>基类析构函数未声明成虚函数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>指针未判空使用&lt;/p>
&lt;/li>
&lt;li>
&lt;p>异步回调捕获所有&amp;amp;,=&lt;/p>
&lt;/li>
&lt;li>
&lt;p>异步回调Lambda表达式传入裸指针&lt;/p>
&lt;/li>
&lt;li>
&lt;p>异步回调未判断Upvalue的生命周期&lt;/p>
&lt;/li>
&lt;li>
&lt;p>异步回调Lambda表达式引用捕获局部变量&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Lambda表达式自销毁导致的Upvalue生命周期问题&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用异常机制&lt;/p>
&lt;/li>
&lt;li>
&lt;p>返回局部变量的引用或指针&lt;/p>
&lt;/li>
&lt;li>
&lt;p>手动管理内存的申请和回收未成对&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不正确的类型转换&lt;/p>
&lt;/li>
&lt;li>
&lt;p>容器的循环内删除错误&lt;/p>
&lt;/li>
&lt;li>
&lt;p>智能指针循环引用&lt;/p>
&lt;/li>
&lt;li>
&lt;p>TArray取值未判断边界&lt;/p>
&lt;/li>
&lt;li>
&lt;p>TArray写入未判断边界&lt;/p>
&lt;/li>
&lt;li>
&lt;p>TArray前值指针或引用在触发内存重分配后野掉&lt;/p>
&lt;/li>
&lt;li>
&lt;p>TMap前值指针或引用再触发内存重分配后野掉&lt;/p>
&lt;/li>
&lt;li>
&lt;p>TMap取值前未判断是否存在&lt;/p>
&lt;/li>
&lt;li>
&lt;p>非主线程中对UObject的使用&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用类对象的静态存储周期变量&lt;/p>
&lt;/li>
&lt;li>
&lt;p>出现菱形继承&lt;/p>
&lt;/li>
&lt;li>
&lt;p>间接无限递归调用导致栈溢出&lt;/p>
&lt;/li>
&lt;li>
&lt;p>死循环&lt;/p>
&lt;/li>
&lt;li>
&lt;p>关键事件未加日志&lt;/p>
&lt;/li>
&lt;li>
&lt;p>该用PushModel未用&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Memset, memcpy用于非POD结构&lt;/p>
&lt;/li>
&lt;li>
&lt;p>浮点数判断是否相等导致的问题&lt;/p>
&lt;/li>
&lt;li>
&lt;p>UE_LOG传入的参数类型不匹配导致崩溃&lt;/p>
&lt;/li>
&lt;li>
&lt;p>设置的Timer没有回收，导致Timer泄漏&lt;/p>
&lt;/li>
&lt;li>
&lt;p>除0问题&lt;/p>
&lt;/li>
&lt;li>
&lt;p>循环操作该用引用时没有用引用&lt;/p>
&lt;/li>
&lt;li>
&lt;p>尽量使用UE内置typedef的基础数据类型（如：int32, int64，不要使用long, size_t之类的）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可复制变量不能是Public，不能是蓝图可写&lt;/p>
&lt;/li>
&lt;li>
&lt;p>配置表所有的引用都要使用软引用&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="参考文献">&lt;a href="#%e5%8f%82%e8%80%83%e6%96%87%e7%8c%ae" class="header-anchor">&lt;/a>参考文献
&lt;/h2>&lt;p>&lt;a class="link" href="https://docs.unrealengine.com/4.27/zh-CN/ProductionPipelines/DevelopmentSetup/CodingStandard/" target="_blank" rel="noopener"
>https://docs.unrealengine.com/4.27/zh-CN/ProductionPipelines/DevelopmentSetup/CodingStandard/&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/" target="_blank" rel="noopener"
>https://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.zhihu.com/question/26901409/answer/1858690571" target="_blank" rel="noopener"
>https://www.zhihu.com/question/26901409/answer/1858690571&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Icassell/UE4-Style-Guide-1" target="_blank" rel="noopener"
>https://github.com/Icassell/UE4-Style-Guide-1&lt;/a>&lt;/p></description></item><item><title>Windows下C++版本Protobuf使用方法</title><link>https://boiltask.com/knowledge/cpp-protobuf/</link><pubDate>Sat, 18 Jul 2020 17:39:54 +0000</pubDate><guid>https://boiltask.com/knowledge/cpp-protobuf/</guid><description>&lt;p>参考下文配置&lt;code>Protobuf&lt;/code>：&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/protocolbuffers/protobuf/tree/master/src#c-installation---windows" target="_blank" rel="noopener"
>https://github.com/protocolbuffers/protobuf/tree/master/src#c-installation&amp;mdash;windows&lt;/a>&lt;/p>
&lt;h2 id="所需环境">&lt;a href="#%e6%89%80%e9%9c%80%e7%8e%af%e5%a2%83" class="header-anchor">&lt;/a>所需环境
&lt;/h2>&lt;p>推荐提前安装以下环境：&lt;/p>
&lt;ul>
&lt;li>Windows 10&lt;/li>
&lt;li>Git&lt;/li>
&lt;li>Cmake&lt;/li>
&lt;li>Visual Studio 2019&lt;/li>
&lt;/ul>
&lt;h2 id="生成工具">&lt;a href="#%e7%94%9f%e6%88%90%e5%b7%a5%e5%85%b7" class="header-anchor">&lt;/a>生成工具
&lt;/h2>&lt;p>在&lt;a class="link" href="https://github.com/protocolbuffers/protobuf/releases/latest" target="_blank" rel="noopener"
>https://github.com/protocolbuffers/protobuf/releases/latest&lt;/a>下载&lt;code>protobuf&lt;/code>生成工具。&lt;/p>
&lt;p>文件应形如&lt;code>protoc-$VERSION-win32.zip&lt;/code>，解压其中的&lt;code>bin/protoc.exe&lt;/code>，放于&lt;code>Dep/protobuf/bin&lt;/code>下。&lt;/p>
&lt;h2 id="编译依赖">&lt;a href="#%e7%bc%96%e8%af%91%e4%be%9d%e8%b5%96" class="header-anchor">&lt;/a>编译依赖
&lt;/h2>&lt;p>参考下文编译所需依赖：&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/protocolbuffers/protobuf/blob/master/cmake/README.md" target="_blank" rel="noopener"
>https://github.com/protocolbuffers/protobuf/blob/master/cmake/README.md&lt;/a>&lt;/p>
&lt;p>在&lt;a class="link" href="https://github.com/protocolbuffers/protobuf/releases/latest" target="_blank" rel="noopener"
>https://github.com/protocolbuffers/protobuf/releases/latest&lt;/a>下载&lt;code>protobuf&lt;/code>源文件。&lt;/p>
&lt;p>文件应形如 &lt;code>protobuf-cpp-[VERSION].tar.gz&lt;/code>。&lt;/p>
&lt;p>解压全部文件到文件夹中，此处以&lt;code>D:\Protobuf&lt;/code>为例。&lt;/p>
&lt;p>打开&lt;code>cmake-gui&lt;/code>，选择&lt;code>source code&lt;/code>文件夹为&lt;code>D:\Protobuf\cmake&lt;/code>，&lt;code>build the binaries&lt;/code>文件夹为目标文件夹，此处以&lt;code>D:\Protobuf-build&lt;/code>为例。&lt;/p>
&lt;p>点击&lt;code>Configure&lt;/code>，选择&lt;code>Visual Studio 2019&lt;/code>。&lt;/p>
&lt;p>取消配置中的所有勾选。&lt;/p>
&lt;p>留意&lt;code>CMAKE_INSTALL_PREFIX&lt;/code>值，此值为之后运行安装后目标文件存放位置。此处以&lt;code>D:/Protobuf-install&lt;/code>为例。&lt;/p>
&lt;p>点击&lt;code>Generate&lt;/code>生成解决方案，之后&lt;code>Open Project&lt;/code>打开解决方案。&lt;/p>
&lt;p>选择&lt;code>MinSizeRel&lt;/code>与&lt;code>x64&lt;/code>，之后生成解决方案。&lt;/p>
&lt;p>右键&lt;code>INSTALL&lt;/code>，选择生成，目标文件会被生成在前面所配置文件夹中。&lt;/p>
&lt;p>复制&lt;code>D:/Protobuf-install/include&lt;/code>到项目&lt;code>/protobuf/include&lt;/code>。&lt;/p>
&lt;p>复制&lt;code>D:/Protobuf-install/lib&lt;/code>到项目&lt;code>/protobuf/lib&lt;/code>。&lt;/p>
&lt;h2 id="配置项目">&lt;a href="#%e9%85%8d%e7%bd%ae%e9%a1%b9%e7%9b%ae" class="header-anchor">&lt;/a>配置项目
&lt;/h2>&lt;p>在&lt;code>Visual Studio&lt;/code>的项目中，参考如下方法配置&lt;code>Protobuf&lt;/code>。&lt;/p>
&lt;h3 id="配置头文件引用">&lt;a href="#%e9%85%8d%e7%bd%ae%e5%a4%b4%e6%96%87%e4%bb%b6%e5%bc%95%e7%94%a8" class="header-anchor">&lt;/a>配置头文件引用
&lt;/h3>&lt;p>右键项目属性，点击&lt;code>C/C++&lt;/code>，在&lt;code>附加包含目录&lt;/code>之中，填入&lt;code>protobuf&lt;/code>头文件目录，如：&lt;code>\protobuf\include&lt;/code>。&lt;/p>
&lt;h3 id="配置静态链接">&lt;a href="#%e9%85%8d%e7%bd%ae%e9%9d%99%e6%80%81%e9%93%be%e6%8e%a5" class="header-anchor">&lt;/a>配置静态链接
&lt;/h3>&lt;p>右键项目属性，点击&lt;code>链接器&lt;/code>，在&lt;code>附加库目录&lt;/code>之中，填入&lt;code>protobuf&lt;/code>依赖文件目录，如：&lt;code>\protobuf\lib&lt;/code>。&lt;/p>
&lt;p>展开&lt;code>链接器&lt;/code>一栏，选择&lt;code>输入&lt;/code>，在&lt;code>附加依赖项&lt;/code>之中，填入&lt;code>protobuf&lt;/code>依赖文件名，如&lt;code>libprotobuf.lib&lt;/code>与&lt;code>libprotobuf-lite.lib&lt;/code>。&lt;/p></description></item><item><title>C++中static关键字用法总结</title><link>https://boiltask.com/knowledge/cpp-static/</link><pubDate>Mon, 23 Mar 2020 05:30:15 +0000</pubDate><guid>https://boiltask.com/knowledge/cpp-static/</guid><description>&lt;h2 id="修饰普通变量">&lt;a href="#%e4%bf%ae%e9%a5%b0%e6%99%ae%e9%80%9a%e5%8f%98%e9%87%8f" class="header-anchor">&lt;/a>修饰普通变量
&lt;/h2>&lt;p>修改变量的存储区域和生命周期，使变量存储在静态区，在 main 函数运行前就分配了空间，如果有初始值就用初始值初始化它，如果没有初始值系统用默认值初始化它。&lt;/p>
&lt;p>普通变量，当程序执行到它的定义处时，为其在栈上分配空间，在函数执行结束时被释放掉。使用&lt;code>static&lt;/code>修饰变量，可以使得函数中的值保存至下一次调用。&lt;/p>
&lt;p>&lt;code>static&lt;/code>修饰的静态局部变量只执行初始化一次，而且延长了局部变量的生命周期，直到程序运行结束以后才释放。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">staticLocalVar&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 运行期时初始化一次, 下次再调用时, 不进行初始化工作
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;a=&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">++&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">staticLocalVar&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 第一次调用, 输出a=0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">staticLocalVar&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 第二次调用, 记忆了第一次退出时的值, 输出a=1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="修饰普通函数">&lt;a href="#%e4%bf%ae%e9%a5%b0%e6%99%ae%e9%80%9a%e5%87%bd%e6%95%b0" class="header-anchor">&lt;/a>修饰普通函数
&lt;/h2>&lt;p>表明函数的作用范围，仅在定义该函数的文件内才能使用。在多人开发项目时，为了防止与他人命名空间里的函数重名，可以将函数定位为&lt;code>static&lt;/code>。&lt;/p>
&lt;h2 id="修饰成员变量">&lt;a href="#%e4%bf%ae%e9%a5%b0%e6%88%90%e5%91%98%e5%8f%98%e9%87%8f" class="header-anchor">&lt;/a>修饰成员变量
&lt;/h2>&lt;p>修饰成员变量使所有的对象只保存一个该变量，而且不需要生成对象就可以访问该成员。&lt;/p>
&lt;p>C++中需要一个数据对象为整个类服务，可将其定义为静态数据。&lt;/p>
&lt;p>比如一个类的所有对象都要调用的值，设为&lt;code>static&lt;/code>后只需要修改这个值，就能使得所有对象都可以使用新值。&lt;/p>
&lt;h2 id="修饰成员函数">&lt;a href="#%e4%bf%ae%e9%a5%b0%e6%88%90%e5%91%98%e5%87%bd%e6%95%b0" class="header-anchor">&lt;/a>修饰成员函数
&lt;/h2>&lt;p>修饰成员函数使得不需要生成对象就可以访问该函数，但是在&lt;code>static&lt;/code>函数内不能访问非静态成员。&lt;/p>
&lt;h2 id="static与const">&lt;a href="#static%e4%b8%8econst" class="header-anchor">&lt;/a>static与const
&lt;/h2>&lt;p>&lt;code>static const&lt;/code>等价于&lt;code>const static&lt;/code>，修饰成员变量把二者结合起来理解。&lt;/p>
&lt;p>不可以同时用&lt;code>const&lt;/code>和&lt;code>static&lt;/code>修饰成员函数，二者的含义矛盾。&lt;/p></description></item><item><title>C++中const关键字用法总结</title><link>https://boiltask.com/knowledge/cpp-const/</link><pubDate>Mon, 23 Mar 2020 05:00:00 +0000</pubDate><guid>https://boiltask.com/knowledge/cpp-const/</guid><description>&lt;blockquote>
&lt;p>当用&lt;code>const&lt;/code>进行修饰时，根据&lt;code>const&lt;/code>位置的不同有三种不同效果。&lt;/p>
&lt;p>判断的标准是：&lt;code>const&lt;/code>修饰谁，谁（在&lt;code>const&lt;/code>后面）的内容就是不可变的。&lt;/p>
&lt;/blockquote>
&lt;h2 id="修饰变量">&lt;a href="#%e4%bf%ae%e9%a5%b0%e5%8f%98%e9%87%8f" class="header-anchor">&lt;/a>修饰变量
&lt;/h2>&lt;p>&lt;code>const int a;&lt;/code>，表示变量不可被改变。&lt;/p>
&lt;h2 id="修饰指针">&lt;a href="#%e4%bf%ae%e9%a5%b0%e6%8c%87%e9%92%88" class="header-anchor">&lt;/a>修饰指针
&lt;/h2>&lt;p>分为指向常量的指针（pointer to const）和自身是常量的指针（常量指针，const pointer）。&lt;/p>
&lt;h3 id="const-int-p--a">&lt;a href="#const-int-p--a" class="header-anchor">&lt;/a>const int *p = &amp;amp;a;
&lt;/h3>&lt;p>&lt;code>*p&lt;/code>不可变，&lt;code>*p&lt;/code>是&lt;code>p&lt;/code>指向的内存单元的内容，所以&lt;code>*p&lt;/code>不可变也就是&lt;code>p&lt;/code>指向的内存单元的内容不可变。&lt;code>p&lt;/code>是可变的，即&lt;code>p&lt;/code>指向的内存单元（变量）是可变的，但是&lt;code>p&lt;/code>指向谁，谁的值就不可变。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&amp;lt;iostream&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//不可以用*p改变a的值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;a = %d &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//*p = 20; //语法错误，*p不可被修改
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">40&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//可以直接赋值进行修改
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;a = %d &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">11&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;b = %d &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">q&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">*&lt;/span>&lt;span class="n">q&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//可以用*q改变a的值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;a = %d &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//给a赋值也可以修改a的值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;a = %d &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">40&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">11&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">20&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">30&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="int-const-p--a">&lt;a href="#int-const-p--a" class="header-anchor">&lt;/a>int* const p = &amp;amp;a;
&lt;/h3>&lt;p>&lt;code>const&lt;/code>修饰&lt;code>p&lt;/code>，指针&lt;code>p&lt;/code>是不可变的，即&lt;code>p&lt;/code>指向的内存单元不可变。&lt;code>p&lt;/code>的指向不可变，&lt;code>p&lt;/code>指向的内存单元的内容可以变。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&amp;lt;iostream&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//p的指向不可变
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;a = %d &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//可以修改p指向的内存单元的内容
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;a = %d &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">11&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//p = &amp;amp;b; //语法错误
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;b = %d &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//修改了a的值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;a = %d &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">20&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">11&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">11&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="const-int-const-p--a">&lt;a href="#const-int-const-p--a" class="header-anchor">&lt;/a>const int* const p = &amp;amp;a;
&lt;/h3>&lt;p>&lt;code>const&lt;/code>修饰了&lt;code>*p&lt;/code>和&lt;code>p&lt;/code>，所以&lt;code>p&lt;/code>指向的内存单元和&lt;code>p&lt;/code>指向的内存单元的内容都不可变。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&amp;lt;iostream&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//const修饰了p和*p
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;a = %d &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//*p = 20; //不可修改p指向的内存单元的内容
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;a = %d &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">11&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//p = &amp;amp;b; //不可修改p的指向
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;b = %d &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">11&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="修饰引用">&lt;a href="#%e4%bf%ae%e9%a5%b0%e5%bc%95%e7%94%a8" class="header-anchor">&lt;/a>修饰引用
&lt;/h2>&lt;p>指向常量的引用（reference to const），用于形参类型，即避免了拷贝，又避免了函数对值的修改；&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&amp;lt;iostream&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//定义了a的引用r
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;a = %d &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//也修改了a的值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;a = %d &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//int &amp;amp;rm = 3; //语法错误，引用不可直接绑定常量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">rm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&amp;amp;rm = %d &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">rm&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//常量可以绑定const引用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="cm">/* 编译器分配内存空间，把rm放在符号表中
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> int temp = 3;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> const int &amp;amp;rm = temp;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">rb&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;b = %d &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">rb&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//rb = 6; //const修饰引用不可更改
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">3.1415&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//int &amp;amp;rp = p; //引用类型需与绑定类型相同
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">rp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//可以绑定到const引用上
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&amp;amp;rp = %d &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">rp&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//常量可以绑定const引用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> double p = 3.1415;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> int temp = p;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> const int &amp;amp;rp = temp;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">20&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">rm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">rp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>const&lt;/code>引用的目的,禁止通过修改引用值来改变被引用的对象。&lt;/p>
&lt;p>没有const reference，因为引用本身就是 const pointer。&lt;/p>
&lt;ul>
&lt;li>普通引用相当于&lt;code>int* const e&lt;/code>&lt;/li>
&lt;li>&lt;code>const int &amp;amp;e&lt;/code>相当于&lt;code>const int* const e&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="修饰成员函数">&lt;a href="#%e4%bf%ae%e9%a5%b0%e6%88%90%e5%91%98%e5%87%bd%e6%95%b0" class="header-anchor">&lt;/a>修饰成员函数
&lt;/h2>&lt;p>说明该成员函数内不能修改成员变量。&lt;/p>
&lt;ul>
&lt;li>有&lt;code>const&lt;/code>修饰的成员函数，对数据成员只能读取，没有&lt;code>const&lt;/code>修饰的成员函数，对数据成员可读可写。&lt;/li>
&lt;li>&lt;code>const&lt;/code>对象可以调用&lt;code>const&lt;/code>成员函数，不能调用非&lt;code>const&lt;/code>修饰的函数。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Test&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="nf">getA&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="nf">getAc&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Test&lt;/span> &lt;span class="n">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">test&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getA&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">test&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getAc&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>相当于，C++对类的成员函数数中的&lt;code>this&lt;/code>指针做了隐藏。本质上，&lt;code>const&lt;/code>修饰的是被隐藏的&lt;code>this&lt;/code>指针所指向的内存空间，修饰的是&lt;code>this&lt;/code>指针（&lt;code>const Class *this&lt;/code>）。&lt;/p></description></item><item><title>【愿成其身】[15]思维的优化 – 数学的魅力</title><link>https://boiltask.com/iwbtg/15/</link><pubDate>Mon, 29 Aug 2016 16:00:57 +0000</pubDate><guid>https://boiltask.com/iwbtg/15/</guid><description>&lt;p>本篇文章讲解题目：&lt;a class="link" href="http://oj.didapipa.com/problem/1143" target="_blank" rel="noopener"
>小学求和1到n&lt;/a>&lt;/p>
&lt;p>&lt;span class="dida-font-red">推荐先独立进行解题尝试，然后再阅读本篇讲解！&lt;/span>&lt;/p>
&lt;hr>
&lt;p>注意观察这道题与上一个求和的差别。&lt;/p>
&lt;p>首先从一组数据变为了多组数据，但这一点在学习了循环之后应该已经不再是问题了。&lt;/p>
&lt;p>我们只需要读取一个变量T记录组数，然后使用语句：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在大括号里写程序即可。&lt;/p>
&lt;p>这道题给的范围为$0 &amp;lt; n &amp;lt; 10 ^ 9$，所以如果依旧使用for的话循环最大要进行$10^9$次&lt;/p>
&lt;hr>
&lt;p>评测机一秒大概可运行$10 ^ 7 \sim 10 ^ 8 $次 ，所以O(n)的复杂度是不行的&lt;/p>
&lt;p>(推荐先自己查阅时间复杂度相关资料)&lt;/p>
&lt;hr>
&lt;p>事实上，如果让小学生来解，这便是一道很简单的等差数列求和，所以可用求和公式直接算出答案。&lt;/p>
&lt;p>当然，还需要注意数据范围的问题。&lt;/p>
&lt;hr>
&lt;p>再次举这一题的例子也是想再次说明思维的重要性。&lt;/p>
&lt;p>一道题随着题目描述的不同，解答方式也许有着差异，所以不要局限于某一种解法，多加尝试才能处变不惊。&lt;/p></description></item><item><title>【愿成其身】[14]for循环 – 另一种表达方法</title><link>https://boiltask.com/iwbtg/14/</link><pubDate>Sun, 28 Aug 2016 16:00:46 +0000</pubDate><guid>https://boiltask.com/iwbtg/14/</guid><description>&lt;p>本篇文章讲解题目：&lt;a class="link" href="http://oj.didapipa.com/problem/1142" target="_blank" rel="noopener"
>大学求和1到n&lt;/a>&lt;/p>
&lt;p>&lt;span class="dida-font-red">推荐先独立进行解题尝试，然后再阅读本篇讲解！&lt;/span>&lt;/p>
&lt;hr>
&lt;p>依旧是一道小学题目。&lt;/p>
&lt;p>&lt;span class="dida-font-blue">本篇文章有过激言论，请谨慎阅读。&lt;/span>&lt;/p>
&lt;p>这一题一般常用做初讲for循环的例题，而这道题也确实很合适，因为这标志着思考问题解决方案的可行性，由优先思考数学方法转变为思考时间复杂度。&lt;/p>
&lt;p>而有争议的地方，便是for循环的写法。&lt;/p>
&lt;p>首先是基本结构如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="cm">/*起始语句*/&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/*判断语句*/&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/*修正语句*/&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/*循环语句*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>同样画出它的流程图：&lt;/p>
&lt;p>&lt;img src="https://boiltask.com/"
loading="lazy"
alt="TODO"
>&lt;/p>
&lt;p>(参考文章《for,(do-)while的循环体执行》)&lt;/p>
&lt;p>for循环比while好在它能清晰的操作循环变量，比如下面代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/*循环语句*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这便是让循环语句循环n次的写法，同样的操作可写为while(n&amp;ndash;)。&lt;/p>
&lt;p>但是如果我们在循环中用到了i，比如我们想让奇数次时执行某一语句，偶数时执行另一语句，就可以写为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/*偶数时操作*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/*奇数时操作*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>所以具体什么时候该用哪种循环，取决于哪一种可以使代码简洁、写起来方便，可以进行互相转换。&lt;/p>
&lt;p>上边代码就等同于：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/*偶数时操作*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/*奇数时操作*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>而至于for循环有争议的地方，便是for循环中的i=0。&lt;/p>
&lt;p>在C++中，我们可以在循环的初始语句里写成：for(int i=0; i&amp;lt;n; i++)，也就是把定义变量放在循环内部，这样的话变量作用范围就仅限于这个循环里面。如此做，可以防止循环与循环之间的干扰，特别是需要函数互相调用时，防止变量因为已被占用而发生错误。&lt;/p>
&lt;p>(关于变量的作用范围，可参考我之前写过的一些文章《for循环中的定义变量》《关于for循环中定义变量的后续讨论》)&lt;/p>
&lt;p>然而，&lt;span class="dida-font-red">在标准C中不允许这么写&lt;/span>，可以尝试把代码保存为.c和.cpp来查看编译区别。&lt;/p>
&lt;p>所以如果需要使用在for中定义变量的形式，提交时需要选C++，事实上我认为最好以后默认选C++。&lt;/p>
&lt;p>&lt;span class="dida-font-blue">这不是C语言课……&lt;/span>&lt;/p>
&lt;p>&lt;span class="dida-font-blue">这不是C语言课……&lt;/span>&lt;/p>
&lt;p>&lt;span class="dida-font-blue">这不是C语言课……&lt;/span>&lt;/p>
&lt;p>所以我认为，只要自己在使用时清楚地认识到哪部分是C++特有的，那么我们大可放心使用C++。毕竟我依旧认为，我们不应该在语言层面纠结太长时间。&lt;/p>
&lt;p>这些问题需要在今后的学习过程中自己体会与抉择，这里不多说了……&lt;/p>
&lt;hr>
&lt;p>&lt;span class="dida-font-red">注意事项：&lt;/span>&lt;/p>
&lt;p>多条循环语句不要忘了加大括号！&lt;/p>
&lt;p>不要忘了加大括号！&lt;/p>
&lt;p>加大括号！&lt;/p>
&lt;hr>
&lt;p>剩下的就没有什么了，在掌握了循环之后，已经可以开始尝试一些入门级水题了。&lt;/p>
&lt;p>这条路，长且艰……&lt;/p></description></item><item><title>【愿成其身】[13]循环结构 – 计算机的神奇</title><link>https://boiltask.com/iwbtg/13/</link><pubDate>Sat, 27 Aug 2016 16:00:42 +0000</pubDate><guid>https://boiltask.com/iwbtg/13/</guid><description>&lt;p>本篇文章讲解题目：&lt;a class="link" href="http://oj.didapipa.com/problem/1141" target="_blank" rel="noopener"
>蜗牛爬树&lt;/a>&lt;/p>
&lt;p>&lt;span class="dida-font-red">推荐先独立进行解题尝试，然后再阅读本篇讲解！&lt;/span>&lt;/p>
&lt;hr>
&lt;p>一道小学数学题，但对于计算机来说，却是直接模拟这一过程更为简洁。&lt;/p>
&lt;p>很明显的一个思路是，对高度不断模拟上升下落的这一过程，然后统计次数，直到高度达到树的高度。&lt;/p>
&lt;p>简单的画一个流程图：&lt;/p>
&lt;p>&lt;img src="https://boiltask.com/"
loading="lazy"
alt="TODO 流程图"
>&lt;/p>
&lt;hr>
&lt;p>分析可以发现，这里的循环是由一个条件控制的。如果满足某一条件则一直循环，否则退出循环。&lt;/p>
&lt;p>在C语言里，这种形式可以使用while语句表达，其基本形式为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="cm">/*条件*/&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/*语句*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以发现与if语句形式类似，也是很好理解，若满足条件，则不断执行语句，每次执行之后判断条件是否成立，然后选择继续执行或者跳出循环。&lt;/p>
&lt;hr>
&lt;p>有了上面的基础知识，我们再来思考这道题，发现上面的程序流程图对于一些情况是没有考虑到的。&lt;/p>
&lt;ul>
&lt;li>首先是Impossible不可能的情况，下降比上升的幅度还大，那么很显然是不可能的。但是有一种却要排除在外，也就是第一天白天就能够爬到树顶的情况，那么应该输出1。&lt;/li>
&lt;li>考虑到如果白天就爬到，那么晚上就不用掉落，很显然我们在白天爬完之后应该判断，是否已经到了树顶，如果到了，那么就不需要晚上掉落这一部分了。
加上这些考虑，我们改进流程图如下：&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://boiltask.com/"
loading="lazy"
alt="TODO 流程图"
>&lt;/p>
&lt;hr>
&lt;p>有了这些思考，AC还是件难事吗-.-。&lt;/p>
&lt;p>嗯……似乎还有些问题。&lt;/p>
&lt;p>首先是对于输出不可能判定的条件有两个，在C语言里我们使用两个&amp;amp;号，也就是“&amp;amp;&amp;amp;”来表示并且，而用“||”来表示或者。这个条件就可以写为n&amp;lt;h&amp;amp;&amp;amp;n≤m。&lt;/p>
&lt;p>再来是循环内的判断，如何终止循环呢？我们可以使用continue与break来控制循环。&lt;/p>
&lt;p>continue的作用是跳过continue下面的部分直接回到循环条件那里判断是否需要进行下一次循环。&lt;/p>
&lt;p>break的作用就是直接跳出循环。&lt;/p>
&lt;p>测试代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span>&lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> if(T==5)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> continue;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> if(T==5)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> break;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里还顺带写了while的一种常见用法while(T&amp;ndash;)，可先自己理解理解其中含义，在后面输入输出系列中会详细说明。&lt;/p>
&lt;p>写到这里，这一题就算告一段落了。&lt;/p>
&lt;p>事实上，while还有一种变形，do-while，其基本形式为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">do&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/*语句*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="cm">/*条件*/&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>也就是判断循环条件是否成立之前，先执行一次循环体，这在解决一些问题的时候很方便。&lt;/p>
&lt;p>也许你可以自己尝试画出它的流程图呀~&lt;/p></description></item><item><title>【愿成其身】[12]从交换输出谈起 – 黑盒的漏洞</title><link>https://boiltask.com/iwbtg/12/</link><pubDate>Fri, 26 Aug 2016 16:00:45 +0000</pubDate><guid>https://boiltask.com/iwbtg/12/</guid><description>&lt;p>本篇文章讲解题目：&lt;a class="link" href="http://oj.didapipa.com/problem/1140" target="_blank" rel="noopener"
>交换输出&lt;/a>&lt;/p>
&lt;p>&lt;span class="dida-font-red">推荐先独立进行解题尝试，然后再阅读本篇讲解！&lt;/span>&lt;/p>
&lt;hr>
&lt;p>这也是一道经典问题，今天就从它谈起。&lt;/p>
&lt;p>$a \rightleftharpoons b$&lt;/p>
&lt;p>首先分析题目，下面这种写法肯定是错的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span>&lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d %d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">a&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">b&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>因为在a=b的时候，a的值已经被替换成b了。&lt;/p>
&lt;hr>
&lt;p>这个时候我们想，若把a的值提前记录下来便可以了。&lt;/p>
&lt;p>也就是int t=a;a=b;b=t;&lt;/p>
&lt;hr>
&lt;p>事实上，还有一种更为酷炫的不借助其它变量的写法如下。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">b&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>也就是直接把b的值存在a里面，然后a-b便是a的值——赋值给b，然后此时a-b便是b的值——赋值给a。&lt;/p>
&lt;hr>
&lt;p>同样按照这种思路，有依靠于二进制运算的更为酷炫的写法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span>&lt;span class="o">^=&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">b&lt;/span>&lt;span class="o">^=&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span>&lt;span class="o">^=&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>因为对计算机来说二进制更为快速，所以这种写法也是更省时间的。&lt;/p>
&lt;hr>
&lt;p>下面还有一个最终版本。&lt;/p>
&lt;p>在前面说过，黑盒测试是给输入数据然后比较输出数据是否一样，而这一道问题的输出是a和b交换值之后输出a和b的值。&lt;/p>
&lt;p>那么我们便可以提交如下代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span>&lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d %d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>同样是符合题意的一种代码。&lt;/p>
&lt;hr>
&lt;p>在分析这道题的过程中。&lt;/p>
&lt;ol>
&lt;li>首先，根据最简单的题意我们写出了一份代码。&lt;/li>
&lt;li>然后，根据数学知识做出了优化(所用空间减少)。&lt;/li>
&lt;li>之后，根据同样地思想用二进制优化了计算过程(所用时间减少)。&lt;/li>
&lt;li>最后，依照黑盒测试的特点写出了最简代码。&lt;/li>
&lt;/ol>
&lt;p>当然，对于这一题来说，即使是最初的代码所用的时间与空间也是非常少的，所以优化对这一题来说也许没必要。&lt;/p>
&lt;p>但是这种思想是我们应该学习的，正是在这种优化中，自身的编码能力及思考问题的能力会有显著的提高。&lt;/p>
&lt;p>而实际比赛中，我们也可以根据题意，在符合要求的前提下，选取那个最容易想出且容易写成的方案来实现。&lt;/p></description></item><item><title>【愿成其身】[11]字符的本质 – ASCII的作用</title><link>https://boiltask.com/iwbtg/11/</link><pubDate>Thu, 25 Aug 2016 16:00:15 +0000</pubDate><guid>https://boiltask.com/iwbtg/11/</guid><description>&lt;p>本篇文章讲解题目：&lt;a class="link" href="http://oj.didapipa.com/problem/1139" target="_blank" rel="noopener"
>比较字符&lt;/a>&lt;/p>
&lt;p>&lt;span class="dida-font-red">推荐先独立进行解题尝试，然后再阅读本篇讲解！&lt;/span>&lt;/p>
&lt;hr>
&lt;p>细想之下，计算机能储存字符是一件非常了不起的事情，毕竟它不同于数字。&lt;/p>
&lt;p>数字还可以使用二进制转换，而字符怎么办……&lt;/p>
&lt;p>为了解决这一问题，在C语言里，字符是被存储为数字的，其可像数字一样参与运算。&lt;/p>
&lt;p>我们可以使用类似于下面的代码来查看代表字符的数字是多少：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span>&lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="sc">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="sc">&amp;#39;B&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="sc">&amp;#39;C&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="sc">&amp;#39;b&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="sc">&amp;#39;c&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>所以这一题便可以方便的进行比较。&lt;/p>
&lt;p>字符的类型为char，格式化输入输出使用%c。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span>&lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%c&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%c&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>需要注意的是，小写字母ASCII值是大于大写字母ASCII值的，而题目定义为小写字母小于大写字母，所以对于这种情况应该特殊判断。&lt;/p></description></item><item><title>【愿成其身】[10]问号表达式 – 酷炫的利器</title><link>https://boiltask.com/iwbtg/10/</link><pubDate>Wed, 24 Aug 2016 16:00:02 +0000</pubDate><guid>https://boiltask.com/iwbtg/10/</guid><description>&lt;blockquote>
&lt;p>君甚屌,令堂可知？&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;p>第十篇文章，能看到这里，说明已经基本上踏入了这道大门。虽然路还很长，但是已经走在了路上。&lt;/p>
&lt;p>所以这一篇文章讲一个虽然不影响解题，但是熟练运用会让代码看起来很酷炫的小知识点：问号表达式。&lt;/p>
&lt;p>其基本形式如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="cm">/*条件*/&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="cm">/*语句1*/&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="cm">/*语句2*/&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当条件1成立的时候，表达式的值取决于语句1，否则取决于语句2。&lt;/p>
&lt;p>例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="s">&amp;#34;A&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="s">&amp;#34;B&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>具体的如何运用，还是需要自己在实践中多多尝试。&lt;/p>
&lt;p>如果能运用的非常自如，那么说明对程序的结构把握的很好，也有利于进一步的学(zhuang)习(bi)。&lt;/p>
&lt;p>练习题：&lt;/p>
&lt;p>&lt;a class="link" href="http://oj.didapipa.com/problem/1138" target="_blank" rel="noopener"
>三个数的最值&lt;/a>&lt;/p></description></item><item><title>【愿成其身】[9]分支结构 – 程序的魅力</title><link>https://boiltask.com/iwbtg/9/</link><pubDate>Tue, 23 Aug 2016 16:00:14 +0000</pubDate><guid>https://boiltask.com/iwbtg/9/</guid><description>&lt;p>本篇文章讲解题目：&lt;a class="link" href="http://oj.didapipa.com/problem/1137" target="_blank" rel="noopener"
>两数的距离&lt;/a>&lt;/p>
&lt;p>&lt;span class="dida-font-red">推荐先独立进行解题尝试，然后再阅读本篇讲解！&lt;/span>&lt;/p>
&lt;hr>
&lt;p>由数学知识得，两点在数轴对应点的距离为$\left| x_{1}-x_{2}\right|$。&lt;/p>
&lt;p>相减没什么难度，所以这一题实际上在于求绝对值。&lt;/p>
&lt;p>事实上，这是一个逻辑问题，也就是如果a&amp;lt;0，那么应该输出-a，如果a&amp;gt;0，那么应该输出a，如果a=0，那么应该输出0。&lt;/p>
&lt;hr>
&lt;p>C语言对于分支结构有两种常用表达：&lt;/p>
&lt;p>是if-else、switch，其中前者因为便于理解而更为常用，今后也将重点使用if-else，switch在可以方便使用时再讲解，可以自行百度。&lt;/p>
&lt;hr>
&lt;p>if-else的大概结构如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="cm">/*条件1*/&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/*语句1*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="cm">/*条件2*/&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/*语句2*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/*语句3*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>if顾名思义，是如果的意思，这段代码的意思也就是：&lt;/p>
&lt;p>如果条件1成立执行语句1；如果条件2成立执行语句2；否则执行语句3。&lt;/p>
&lt;p>若条件下只有一条语句，则大括号可以省略。&lt;/p>
&lt;p>&lt;span class="dida-font-red">若一个条件下有多条语句，则大括号不可省略(因为如果省略，编译器便把它当成只有一条语句在该条件下)。&lt;/span>&lt;/p>
&lt;hr>
&lt;p>所以这道题的代码就很好写了。&lt;/p>
&lt;p>数据范围很小，用int型就足够了，然后就是进行判断求解。&lt;/p></description></item><item><title>【愿成其身】[8]实数的运用 – 整数化作的实数</title><link>https://boiltask.com/iwbtg/8/</link><pubDate>Mon, 22 Aug 2016 16:00:47 +0000</pubDate><guid>https://boiltask.com/iwbtg/8/</guid><description>&lt;p>本篇文章讲解题目：&lt;a class="link" href="http://oj.didapipa.com/problem/1136" target="_blank" rel="noopener"
>愿成其身A÷B&lt;/a>&lt;/p>
&lt;p>&lt;span class="dida-font-red">推荐先独立进行解题尝试，然后再阅读本篇讲解！&lt;/span>&lt;/p>
&lt;hr>
&lt;p>我们知道C语言中用&amp;quot;/&amp;ldquo;来表示相除，整数的除法是采用的舍尾的方式。&lt;/p>
&lt;p>$5 \div 2 = 2 \ldots \ldots 1$&lt;/p>
&lt;p>$5 / 2 = 2$&lt;/p>
&lt;p>所以对于这一题来说，题目要求输出A÷B的结果并保留到整数位。&lt;/p>
&lt;p>如果写成A/B，A,B都是整数的话，那么会得出结果的整数部分，小数部分会被舍弃，而这一题应该四舍五入。&lt;/p>
&lt;p>所以如下面代码是错误的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span>&lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d %d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>为了表示小数，我们可以使用double(float因为精度问题一般不使用)。&lt;/p>
&lt;p>提到了精度问题，请&lt;span class="dida-font-red">百度double的注意事项&lt;/span>，应重点关注double的表示范围与计算误差。&lt;/p>
&lt;p>在这里暂时不对这一问题进行深入研究。&lt;/p>
&lt;hr>
&lt;p>声明一个double型变量依旧类似。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">double&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在格式化输入输出里用%lf表示(有些标准对于有些情况使用%f，但一般统一写作%lf)。&lt;/p>
&lt;p>那么如何表示精确到整数呢？&lt;/p>
&lt;p>我们可以使用printf(&amp;rdquo;%.lf\n&amp;quot;,a);&lt;/p>
&lt;p>可以注意到在%与lf中间加了一个点，这个便表示四舍五入到整数输出。&lt;/p>
&lt;hr>
&lt;p>这也是格式化输出的一种运用，在后面会再细讲。&lt;/p>
&lt;p>类似的还有：&lt;/p>
&lt;p>printf(&amp;quot;%.2lf\n&amp;quot;,a); 四舍五入到小数点后两位数字输出。&lt;/p>
&lt;p>printf(&amp;quot;%.3lf\n&amp;quot;,a); 四舍五入到小数点后三位数字输出。&lt;/p>
&lt;p>等等……&lt;/p>
&lt;hr>
&lt;p>还有一点需要注意：&lt;/p>
&lt;p>此题的的输入数据描述，由两个整数变为了两个数。&lt;/p>
&lt;p>所以输入数据有可能为小数，这个时候便不可以用整数来读取。&lt;/p></description></item><item><title>【愿成其身】[7]整数的魅力 – 数字的最后一位</title><link>https://boiltask.com/iwbtg/7/</link><pubDate>Sun, 21 Aug 2016 16:00:32 +0000</pubDate><guid>https://boiltask.com/iwbtg/7/</guid><description>&lt;p>本篇文章讲解题目：&lt;a class="link" href="http://oj.didapipa.com/problem/1135" target="_blank" rel="noopener"
>最后一位&lt;/a>&lt;/p>
&lt;p>&lt;span class="dida-font-red">推荐先独立进行解题尝试，然后再阅读本篇讲解！&lt;/span>&lt;/p>
&lt;hr>
&lt;p>在C语言中，除了加减乘除运算之外，还有一个较为常用的运算，取余&amp;quot;%&amp;quot;。&lt;/p>
$$5 \% 2 = 1$$&lt;p>由数学知识得，一个整数对10取余即可得到最后一位数字。&lt;/p>
$$12345 \% 10 = 5$$&lt;p>这一题便可使用这一种方法轻松得出答案。&lt;/p>
&lt;hr>
&lt;p>从上一篇文章中学到，这里如果计算A×B的话，依旧应该使用long long，然后对结果进行取余运算即可。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,(&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>因为最后一位数字肯定是int范围内的数字，所以可以直接以int型输出。&lt;/p>
&lt;hr>
&lt;p>对于这一题来说还有一种避免使用long long的方法。&lt;/p>
&lt;p>我们想到，对于乘法，其结果的最后一位只取决于A和B的最后一位，所以我们可以先分别求出A与B的最后一位，然后求出最后一位相乘的最后一位。&lt;/p>
&lt;hr>
&lt;p>这种把$\left( A\times B\right) \% 10$转变为$\left[ \left( A\% 10 \right) \times \left( B\% 10 \right) \right] \% 10$的思维，对于&lt;code>ACM&lt;/code>来说很重要，因为通过各种转化，我们可以突破题目的一些数据限制，从而得到正确答案。&lt;/p>
&lt;p>思考，若题目的数据范围是$0 \leq a,b \leq 10^{18}$，那么我们便不能使用第一种方法，而使用后一种方法便可以轻松得到正确答案。&lt;/p>
&lt;p>&lt;span class="dida-font-red">这才是这一题的意义！&lt;/span>&lt;/p></description></item><item><title>【愿成其身】[6]A×B的学问 – 较大数的处理</title><link>https://boiltask.com/iwbtg/6/</link><pubDate>Sat, 20 Aug 2016 16:00:01 +0000</pubDate><guid>https://boiltask.com/iwbtg/6/</guid><description>&lt;p>本篇文章讲解题目：&lt;a class="link" href="http://oj.didapipa.com/problem/1134" target="_blank" rel="noopener"
>愿成其身A×B&lt;/a>&lt;/p>
&lt;p>&lt;span class="dida-font-red">推荐先独立进行解题尝试，然后再阅读本篇讲解！&lt;/span>&lt;/p>
&lt;hr>
&lt;p>对于这一题，因为C语言中用&amp;quot;*&amp;ldquo;号来表示乘法，所以我们很容易写出以下代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span>&lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d %d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>提交发现wrong answer答案错误。&lt;/p>
&lt;p>分析题目数据范围：$-10^9&amp;lt;a,b&amp;lt;10^9$。&lt;/p>
&lt;p>我们知道int类型在电脑中的范围是$-2^{32}\leq int \leq2^{32}-1$。&lt;/p>
&lt;p>大概约为2147483648～2147483647(PS：可以自己想办法求求看哦~)&lt;/p>
&lt;p>而很显然a,b是在int范围内的，那么为什么会出现答案错误呢……&lt;/p>
&lt;hr>
&lt;p>计算A×B的范围是$-10^{18}&amp;lt;a,b&amp;lt;10^{18}$。&lt;/p>
&lt;p>超出了int范围了！&lt;/p>
&lt;p>我们可以试着输入测试数据：&lt;/p>
&lt;p>100000000 100000000&lt;/p>
&lt;p>上述程序输出了错误答案……&lt;/p>
&lt;hr>
&lt;p>怎么解决呢？&lt;/p>
&lt;p>有一种比int类型范围更大的数据类型long long(__int64)类型。&lt;/p>
&lt;p>写成两种形式是因为C语言的标准不同，导致不同的编译器版本可能有不一样的规定，具体使用哪一种类型，需要查看OJ的FAQ，一般都会特别说明(此题所使用的OJ采取long long)。&lt;/p>
&lt;hr>
&lt;p>long long的范围大概为$-2^{64}\leq long long \leq 2^{64}-1$。&lt;/p>
&lt;p>使用时与int类似，声明写为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">long&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>代表声明一个名称为a的long long型变量。&lt;/p>
&lt;p>在格式化输入输出函数里，正如%d代表int型，我们用%lld代表long long型(%I64d代表__int64型)。&lt;/p>
&lt;p>所以此题即可使用long long解决。&lt;/p>
&lt;hr>
&lt;p>因为若非必要，应该优先使用int型，所以若感觉此题可用int读取a,b，则也可进行解题。&lt;/p>
&lt;p>但输出时需要注意！&lt;/p>
&lt;p>如果写作&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%lld&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>测试发现依旧会出现错误，因为编译器计算时，a与b都是int型，则a*b就会以int型计算，这样写只不过是把这个int型以long long型输出。&lt;/p>
&lt;p>而实际上，在a*b时就已经超过int型了，所以会出现错误答案，这就属于中间结果溢出。&lt;/p>
&lt;hr>
&lt;p>那么应该怎么写呢？&lt;/p>
&lt;p>我们可以使用类型转换写为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%lld&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,(&lt;/span>&lt;span class="kt">long&lt;/span> &lt;span class="kt">long&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>此语句表示把a转换为long long类型，然后与b进行乘法运算，并且结果以long long型输出。&lt;/p>
&lt;p>long long型与int相乘，会把int型先转换为long long型，然后变成两个long long型相乘，从而得到正确结果。&lt;/p></description></item><item><title>【愿成其身】[5]数据类型 – 装数据的盒子</title><link>https://boiltask.com/iwbtg/5/</link><pubDate>Fri, 19 Aug 2016 16:00:49 +0000</pubDate><guid>https://boiltask.com/iwbtg/5/</guid><description>&lt;blockquote>
&lt;p>凡邦之有疾病者，疕疡者造焉，则使医分而治之，是亦不自医也。&lt;/p>&lt;span class="cite">&lt;span>― &lt;/span>&lt;span>清·俞樾, &lt;/span>&lt;cite>《群经平议·周官二》&lt;/cite>&lt;/span>&lt;/blockquote>
&lt;div style="text-align:center">&lt;p>0000|0000|0000|0000&lt;/p>&lt;/div>
&lt;p>上次提到了C语言中的数据类型，这部分应该是比较难讲有趣的，为了防止沦落成为教学文章，只好强行引用了一句“分而治之”。事实上，我认为这也能很好地理解数据在计算机中的存储。&lt;/p>
&lt;p>首先我们应该知道，计算机是不知道怎么存储数据的，所有数据在内部都会表示成二进制&amp;quot;0&amp;quot;&amp;ldquo;1&amp;rdquo;。所以C语言中的数据结构，也便是给这些数据一个划分，比如4个一组(0000~1111[0,15])，8个一组(00000000~11111111[0,255])。这也方便理解为什么可以“自定义类型”。&lt;/p>
&lt;p>原理就讲这么多，再往深层次的讲就跑题了。-.-
事实上，这种知识也没办法投机取巧，只能在学习中进行记忆。所以我认为一个比较高效的方式就是：“用到哪里学哪里”，这就要求自己多找机会去用，否则的话便容易跟不上进度。&lt;/p>
&lt;hr>
&lt;p>了解了各种数据类型，我们也知道格式化输入输出函数。&lt;/p>
&lt;p>那么在格式化输入输出函数中的参数便可以随心所欲的使用了，比如%d代表int型，%c代表char型等。&lt;/p>
&lt;p>后面还是以例题来从使用出发讲解各个常用的类型。&lt;/p>
&lt;hr>
&lt;p>参考文章：&lt;/p>
&lt;p>&lt;a class="link" href="http://www.cnblogs.com/onedime/archive/2012/11/21/2780149.html" target="_blank" rel="noopener"
>C语言基本数据类型简介 - onedime&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://blog.csdn.net/woods2001/article/details/6532761" target="_blank" rel="noopener"
>C语言基本数据类型详解 - woods2001的专栏&lt;/a>&lt;/p></description></item><item><title>【愿成其身】[4]从A+B谈起 – 一切的开端</title><link>https://boiltask.com/iwbtg/4/</link><pubDate>Thu, 18 Aug 2016 16:00:36 +0000</pubDate><guid>https://boiltask.com/iwbtg/4/</guid><description>&lt;p>有人说：“程序员总难免开始于&lt;span class="dida-font-red">A+B&lt;/span>。”&lt;/p>
&lt;hr>
&lt;p>说了这么多，我们还是停留在“定量”阶段。前面说过，黑盒测试应该是根据系统给的输入数据来进行输出数据的比较。那么，如何获取输入数据呢？&lt;/p>
&lt;p>在stdio.h中，与格式化输出printf()相对的，有格式化输入scanf()。&lt;/p>
&lt;p>对比一下两者的标准格式。&lt;/p>
&lt;p>printf(格式化文本,参数1,参数2,……);&lt;/p>
&lt;p>其中格式化文本控制了输出的格式，在其中可以使用如&amp;quot;%d&amp;quot;这样的格式说明来替换后面的参数，第几个%d便可以指定使参数几替换它。&lt;/p>
&lt;p>这样说有点绕……&lt;/p>
&lt;p>例如：printf(&amp;quot;%d&amp;quot;,1); 的输出结果便是 1&lt;/p>
&lt;p>如果参数是个变量，比如提前建立一个整型的变量a=5(int a = 5 ;)。&lt;/p>
&lt;p>那么：printf(&amp;quot;%d&amp;quot;,a); 的输出结果便是 5&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span>&lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>同理，对于scanf()函数。&lt;/p>
&lt;p>scanf(格式化文本,参数1,参数2,……);&lt;/p>
&lt;p>格式化文本代表输入的格式，参数1、2……代表变量的地址。&lt;/p>
&lt;p>-.-好 什么叫地址？暂且理解为门牌号吧。&lt;/p>
&lt;p>同样的建立一个整型的变量a，然后从键盘读取一个数赋值给他。&lt;/p>
&lt;p>scanf(&amp;quot;%d&amp;quot;,&amp;amp;a);&lt;/p>
&lt;p>好，&amp;amp;是什么意思？&lt;/p>
&lt;p>&amp;amp;a也就是取a变量的地址，这句话的意思就是从键盘读取一个数存储到a的地址。那么很显然，a变量的值也就变成了从键盘读取的值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span>&lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>PS：试一试从键盘输入1234567890987654321会出现什么结果，思考为什么。&lt;/p>
&lt;hr>
&lt;p>了解了如何读取数据，就可以尝试完成这道A+B问题了。&lt;/p>
&lt;p>&lt;a class="link" href="http://oj.boiltask.com/JudgeOnline/problem.php?id=1040" target="_blank" rel="noopener"
>每个OJ都要有A+B&lt;/a>&lt;/p>
&lt;p>同样的，还是&lt;span class="dida-font-red">请先尝试之后再继续阅读&lt;/span>。&lt;/p>
&lt;hr>
&lt;p>&lt;span class="dida-font-hidden">&lt;/span>&lt;/p>&lt;p>&lt;span class="dida-font-hidden">&lt;/span>&lt;/p>&lt;p>&lt;span class="dida-font-hidden">对于这一题……&lt;/span>&lt;/p>&lt;p>&lt;span class="dida-font-hidden">&lt;/span>&lt;/p>&lt;p>&lt;span class="dida-font-hidden">没什么说的-.-科科&lt;/span>&lt;/p>&lt;p>&lt;span class="dida-font-hidden">&lt;/span>&lt;/p>&lt;p>&lt;span class="dida-font-hidden">&lt;/span>&lt;/p></description></item><item><title>【愿成其身】[3]转义字符 – 格式化输出</title><link>https://boiltask.com/iwbtg/3/</link><pubDate>Wed, 17 Aug 2016 16:00:52 +0000</pubDate><guid>https://boiltask.com/iwbtg/3/</guid><description>&lt;p>本篇文章讲解题目：&lt;a class="link" href="http://oj.didapipa.com/problem/1132" target="_blank" rel="noopener"
>打印键盘&lt;/a>&lt;/p>
&lt;p>&lt;span class="dida-font-red">推荐先独立进行解题尝试，然后再阅读本篇讲解！&lt;/span>&lt;/p>
&lt;hr>
&lt;p>题目要求按照顺序输出键盘上的字符。&lt;/p>
&lt;p>这一道题并非难题，然而确实好多人都容易被坑到。&lt;/p>
&lt;p>其中的原因就是涉及到了转义字符的知识，所以当输出 \ 和 &amp;quot; 时，如果不注意的话便容易出现问题。&lt;/p>
&lt;p>错误代码示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span>&lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;`1234567890-=&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;~!@#$%^&amp;amp;*()_+&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;qwertyuiop[]&lt;/span>&lt;span class="se">\&amp;#34;&lt;/span>&lt;span class="s">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;QWERTYUIOP {}|&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;asdfghjkl; &amp;#39;&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ASDFGHJKL:&amp;#34;&amp;#34;);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;zxcvbnm,./&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ZXCVBNM&amp;lt;&amp;gt;?&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这段代码编译会发现报错。&lt;/p>
&lt;p>为什么呢？&lt;/p>
&lt;p>在C语言中，输出时为了表示如换行，缩进等普通字符无法表示的字符时，引入了“转义字符”这一概念。&lt;/p>
&lt;p>&lt;img src="https://boiltask.com/iwbtg/3/img.png"
width="460"
height="444"
srcset="https://boiltask.com/iwbtg/3/img_hu12971400185616522044.png 480w, https://boiltask.com/iwbtg/3/img_hu14966784061498255270.png 1024w"
loading="lazy"
alt="img.png"
class="gallery-image"
data-flex-grow="103"
data-flex-basis="248px"
>&lt;/p>
&lt;p>因此如果直接输出\，便会把它与后边字符加在一起理解为转义字符，如果想输出\则可表示为\。&lt;/p>
&lt;p>同理如果直接打&amp;quot;，则会认为是提前把&amp;quot;&amp;ldquo;结束了，如果想输出字符&amp;rdquo;，则需要表示为&amp;quot;。&lt;/p>
&lt;p>所以按照这个表进行改动。&lt;/p>
&lt;hr>
&lt;p>这个时候运行发现还是和结果不相同，因为所输出的字符全部在同一行。&lt;/p>
&lt;p>而我们想让它们一行输出一行，也就是“换行”。不过，多个printf是无效的，因为它只会“忠实”地执行你的代码。所以对于每一个printf来说，输出结束，它的“光标”是在输出之后的字符后面的。&lt;/p>
&lt;p>现在我们回忆起来，当我们自己输入完一行之后，我们会按回车键来使光标移到下一行。那么再看上面的表，发现换行键的转义字符为 \n 。&lt;/p>
&lt;p>所以便可以完整的写出正确代码，就是在原代码的基础上，每输出一行便在后面加一个 \n 即可。&lt;/p></description></item><item><title>【愿成其身】[2]有趣的练习方式 – OnlineJudge</title><link>https://boiltask.com/iwbtg/2/</link><pubDate>Tue, 16 Aug 2016 16:00:51 +0000</pubDate><guid>https://boiltask.com/iwbtg/2/</guid><description>&lt;p>你听说过黑盒测试吗？&lt;/p>
&lt;p>&lt;img src="https://boiltask.com/iwbtg/2/img.png"
width="300"
height="225"
srcset="https://boiltask.com/iwbtg/2/img_hu5781083412363413425.png 480w, https://boiltask.com/iwbtg/2/img_hu2074016451412375258.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>OnlineJudge就是一个黑盒测试系统，也就是不管程序内部是如何运行的，它只判断你的程序的输出是否与输入相对应。当然，为了检测程序的效率，OnlineJudge也会加入运行时间、占用内存等评判标准。&lt;/p>
&lt;p>所以对于一道程序设计题目，我们以上一篇文章中提到的“I wanna be the guy”为例，介绍一下OJ的基础使用方式。&lt;/p>
&lt;hr>
&lt;p>在开始之前，先进入一段日常题外话。&lt;/p>
&lt;p>有没有见到过这个提示呢：&lt;/p>
&lt;p>&lt;img src="https://boiltask.com/iwbtg/2/img_1.png"
width="412"
height="53"
srcset="https://boiltask.com/iwbtg/2/img_1_hu9715507066329589569.png 480w, https://boiltask.com/iwbtg/2/img_1_hu4504652180749053707.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="777"
data-flex-basis="1865px"
>&lt;/p>
&lt;p>也就是提示少了一个&amp;quot;;&amp;quot;，我们发现C语言中，每一个语句之后都有一个&amp;quot;;&amp;quot;，这是因为在C语言中，多余的这些空格、空行等是无效的(我说的是“多余的”)，所以如果不加分号，计算机编译时也不知道你这一句已经结束了，从而会报错。&lt;/p>
&lt;p>少分号错误也是新手常见错误，而且最无奈的是把中文分号当成英文分号，这个时候一般还不容易检查出来，所以在刚开始的时候就应该注意。&lt;/p>
&lt;hr>
&lt;p>言归正传(1/1)&lt;/p>
&lt;p>对于一道题，它应该有题目描述、输入描述、输出描述、样例输入、样例输出等几部分。&lt;/p>
&lt;p>题目描述：提供了这道题的背景说明，一般会讲述一个故事来吸引做题者兴趣。&lt;/p>
&lt;p>输入描述：提供了输入数据的格式、范围等信息。&lt;/p>
&lt;p>输出描述：提供了输出所要求的格式，内容等信息。&lt;/p>
&lt;p>示例输入、输出：一般会给几组测试用的数据，也就是程序把示例输入数据输进去，输出结果应该和示例输出相同(SpecialJudge也许不同)。&lt;/p>
&lt;p>提示：包含出题人对这一题的提示。&lt;/p>
&lt;hr>
&lt;p>就这一题而言，因为是一个简单的示范，所以没有输入数据，直接进行输出即可。&lt;/p>
&lt;p>从上一篇文章中学到，输出语句printf()，在这里就可以使用。&lt;/p>
&lt;p>现在假设你在本地编译器中写好了代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span>&lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;I wanna be the guy!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>那么接下来，点击“提交”，出现提交页面，只需要把代码复制进去，进行提交即可。&lt;/p>
&lt;p>之后便会进入运行状态页面，我们可以看到程序的评判结果。&lt;/p>
&lt;hr>
&lt;p>具体结果是什么意思-.-自己探索吧。&lt;/p>
&lt;p>&lt;a class="link" href="http://oj.didapipa.com/blog/2" target="_blank" rel="noopener"
>系统帮助 &amp;amp; FAQ&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://acm.hdu.edu.cn/faq.php?lang=chs" target="_blank" rel="noopener"
>杭州电子科技大学(hdoj)FAQ&lt;/a>&lt;/p>
&lt;hr>
&lt;p>剩下的就是自己动手，先完成这个简单的题目吧。&lt;/p>
&lt;p>&lt;a class="link" href="http://oj.didapipa.com/problem/1131" target="_blank" rel="noopener"
>【愿成其身】I wanna be the guy&lt;/a>&lt;/p></description></item><item><title>【愿成其身】[1]工欲善其事，必先利其器</title><link>https://boiltask.com/iwbtg/1/</link><pubDate>Mon, 15 Aug 2016 16:00:19 +0000</pubDate><guid>https://boiltask.com/iwbtg/1/</guid><description>&lt;blockquote>
&lt;p>子曰：“&lt;code>工欲善其事，必先利其器&lt;/code>。居是邦也，事其大夫之贤者，友其士之仁者。”&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://boiltask.com/iwbtg/1/img.png"
width="517"
height="304"
srcset="https://boiltask.com/iwbtg/1/img_hu9382037299945081971.png 480w, https://boiltask.com/iwbtg/1/img_hu15865853162357565758.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="170"
data-flex-basis="408px"
>&lt;/p>
&lt;p>看到这里，想必是对ACM感兴趣的。而想要“善其事”，则必然要先了解必要的工具。对于ACM，我指的自然就是编程语言。就目前看来常用的语言有C/C++、JAVA、PASCAL等，其中C/C++就个人而言更为常用，也广泛应用于其它领域，所以这里重点以C/C++作为入门讲解。&lt;/p>
&lt;p>然而，正文却依旧不能继续，有一点非常重要。&lt;/p>
&lt;p>“&lt;span class="dida-font-blue">语言毕竟只是算法竞赛的工具——尽管这个工具非常重要，却不是核心。&lt;/span>”这是刘汝佳《算法竞赛入门经典(第2版)》前言中的一句话。我感觉对于ACM入门者来说非常重要，这也是很多人半途而废的原因之一。可能很多人认为ACM便是研究编程，但是我不得不说，语言入门之后离真正的算法程序还有一段距离。或者说，如果只是为了学习语言，那么ACM可能会让你失望，因为这并不是ACM的本意。甚至于在ACM中的一些常用写法，在做应用项目时可能会进行避免，因为这是两种不同的编程要求。&lt;/p>
&lt;p>但我相信，在ACM都能学好，其它领域怎么会学不好呢？&lt;/p>
&lt;p>所以人工重要的事情重复三遍。&lt;/p>
&lt;p>但我相信，在ACM都能学好，其它领域怎么会学不好呢？&lt;/p>
&lt;p>所以人工重要的事情重复三遍。&lt;/p>
&lt;p>&lt;span class="dida-font-blue">语言毕竟只是算法竞赛的工具——尽管这个工具非常重要，却不是核心。&lt;/span>&lt;/p>
&lt;p>&lt;span class="dida-font-blue">语言毕竟只是算法竞赛的工具——尽管这个工具非常重要，却不是核心。&lt;/span>&lt;/p>
&lt;p>&lt;span class="dida-font-blue">语言毕竟只是算法竞赛的工具——尽管这个工具非常重要，却不是核心。&lt;/span>&lt;/p>
&lt;hr>
&lt;p>我个人对C语言的看法，所谓一门“语言”，它有自己的“语法”与“单词”。我们要做的，就是遵循它的语法，用它提供的单词组合成自己“文章”。&lt;/p>
&lt;p>而作为一门实用性的学科，我主张还是“学以致用，以用促学”，所以先来看一篇“文章”。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C" data-lang="C">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span>&lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;I wanna be the guy!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这段简单的代码展示了C的一些基础结构，下面逐句分析。&lt;/p>
&lt;p>第一行“#include&amp;lt;stdio.h&amp;gt;”按照我们的语法喜欢，很明显这句话要分成两部分来看“#include&amp;lt;&amp;gt;”和被尖括号括在里面的“stdio.h”。这一句代表声明一个“stdio.h”的头文件，什么叫头文件……继续看下面。&lt;/p>
&lt;p>按照同样的思路，很显然下面是一个 int main(){ }和被大括号括在里面的一些句子。这里的main被称为主函数，程序的开始便是从main()函数为起点的。&lt;/p>
&lt;p>什么叫函数？-.-||&lt;/p>
&lt;p>数学里的函数见过吧……$f(x)=x+1$
这个函数是什么意思呢，我们给这个函数一个“参数”x，那么它便会给我们一个“返回值”x+1。比如我们给个参数3，那么它便会告诉我们4，这就是函数。&lt;/p>
&lt;p>同样的，对于C语言来说，这些函数我们可以给它们传递参数，它们也会有返回值，而返回值具体是什么，自然也是可以有我们来控制。这就是编程的魅力，就是那种，“想显示什么结果，你说的不算，要看我怎么写”的霸气。&lt;/p>
&lt;p>&lt;img src="https://boiltask.com/iwbtg/1/img_1.png"
width="388"
height="300"
srcset="https://boiltask.com/iwbtg/1/img_1_hu12498498310464818052.png 480w, https://boiltask.com/iwbtg/1/img_1_hu5965839331247665373.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="310px"
>&lt;/p>
&lt;p>言归正传，对于main()函数而言，我们看到它前面有个int，这就是代表的它的返回值的类型，而具体是什么类型，这将在后面数据类型中详细讲。(PS：int又被称为整型哦~)&lt;/p>
&lt;p>那么main()←这个括号呢，就如$f(x)$，这个括号自然是让你传递参数用的，而main函数作为一个特殊的“主”函数，它的参数可以省略不写。&lt;/p>
&lt;p>那你想写……那么它的参数形如“int argc,char *argv[]”……&lt;/p>
&lt;p>这都是啥啥啥……&lt;/p>
&lt;p>-.-所以我不是很想提前说这么多的嘛，你先默认把它理解为空好了。&lt;/p>
&lt;p>这样参数的问题也解决了，怎么控制返回值具体是什么呢。看一看main函数括号里面，以小学英语水平，可以明显发现一个单词“return - 返回”，那么就是翻译为返回0。&lt;/p>
&lt;p>-0是啥？&lt;/p>
&lt;p>-整数嘛。&lt;/p>
&lt;p>-所以是什么类型？&lt;/p>
&lt;p>-整型嘛。&lt;/p>
&lt;p>-所以返回值类型怎么写？&lt;/p>
&lt;p>-int嘛。&lt;/p>
&lt;p>&lt;span class="dida-font-red">C语言就是这么简单&lt;/span>。 -.-&lt;/p>
&lt;p>&lt;img src="https://boiltask.com/iwbtg/1/img_2.png"
width="300"
height="218"
srcset="https://boiltask.com/iwbtg/1/img_2_hu1000692578309232230.png 480w, https://boiltask.com/iwbtg/1/img_2_hu2526000857806289299.png 1024w"
loading="lazy"
alt="img_2.png"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="330px"
>&lt;/p>
&lt;p>接下来就只剩下最后一句话了“printf(&amp;ldquo;I wanna be the guy!&amp;quot;)”，很明显也是printf()与“I wanna be the guy!”组合。上面学习了函数的基本结构，那么这个printf后面也是有个括号，它与函数有没有关系。很显然我这么说了，它必然是有的。&lt;/p>
&lt;p>按照刚才的理解，括号里面的&amp;quot;I wanna be the guy!&amp;ldquo;也就是它的参数了，那么这个函数有什么用呢。&lt;/p>
&lt;p>print-f继续按照小学英语理解，明显和印刷、打印有关系，所以这个函数也是就把它的参数“I wanna be the guy!”“打印”到屏幕上，这叫格式化输出。当然，具体怎么用，还需要进一步学习。&lt;/p>
&lt;p>我们知道，你如果想要用一个函数，你应该先把这个函数定义好。&lt;/p>
&lt;p>还是比如你输入x，想让函数返回给你x+1，那么这个函数就应该定义成$f(x)=x+1$。
可以这个printf在哪里定义的呢，为什么写上这一句话，计算机就知道把它的参数打印到屏幕上。这个时候我们再来看程序开头的那一句“#include&amp;lt;stdio.h&amp;gt;”，突然意识到了什么.jpg。&lt;/p>
&lt;p>没错，这个被叫做头文件的东西就包含了C语言一些默认的“标准库”，需要的时候只需要先声明你想要用哪些头文件，然后在你的程序里就可以调用它的函数啦(当然不只是函数，还有其他的一些东西)。&lt;/p>
&lt;p>声明方法就是#include&amp;lt;头文件名&amp;gt;。&lt;/p>
&lt;p>stdio.h就是包含了标准输入输出的一个头文件，也是常用到作为模板的一个头文件。&lt;/p>
&lt;p>更多的头文件在后面接触到的时候会继续说。&lt;/p>
&lt;hr>
&lt;p>下面就可以再来重新看一下这个代码了，很显然，这个程序可以完成把“I wanna be the guy!”这句话输出到屏幕的这个任务。&lt;/p>
&lt;p>-.-好，问题来了，怎么运行。&lt;/p>
&lt;p>这一部分我不是很想详细说，毕竟我感觉讲太详细是件不负责任的事情，因为剥夺了自己探索的乐趣。&lt;/p>
&lt;p>所以这里只提供一个下载链接，其余的……&lt;/p>
&lt;p>&lt;a class="link" href="http://www.xiazaiba.com/html/3836.html" target="_blank" rel="noopener"
>Dev-C++(C++开发工具)V5.11.0中文免费版(不可调试)&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://www.cr173.com/soft/21025.html" target="_blank" rel="noopener"
>Dev C++ V5.9.2 绿色中文版(可调试)&lt;/a>&lt;/p>
&lt;hr>
&lt;p>接下来，怎么知道自己的程序标不标准，怎么训练自己的编程能力。&lt;/p>
&lt;p>这里涉及到ACM常用的一个训练工具，OnlineJudge。&lt;/p>
&lt;p>下面是这一个程序的题目，在题解里会详细介绍OJ的用法：&lt;/p>
&lt;p>&lt;a class="link" href="http://oj.didapipa.com/problem/1131" target="_blank" rel="noopener"
>【愿成其身】I wanna be the guy&lt;/a>&lt;/p></description></item><item><title>【愿成其身】I wanna be the guy</title><link>https://boiltask.com/iwbtg/0/</link><pubDate>Sun, 14 Aug 2016 16:00:19 +0000</pubDate><guid>https://boiltask.com/iwbtg/0/</guid><description>&lt;blockquote>
&lt;p>I wanna be the guy - 愿成其身&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://boiltask.com/iwbtg/0/img.png"
width="640"
height="331"
srcset="https://boiltask.com/iwbtg/0/img_hu12650617882906433718.png 480w, https://boiltask.com/iwbtg/0/img_hu11342895865770276574.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="193"
data-flex-basis="464px"
>&lt;/p>
&lt;p>昨天想写文章时突然想起来了这个游戏，原因却不是清楚太多……想了想，大概是这个标榜难度巨高无比游戏的背景也是个励志故事吧，所以当人物一次次的死亡时，你就会心生敬佩(虽然应该是敬佩那些能把这游戏死上一万次来通关的人)。&lt;/p>
&lt;p>其实ACM大概也是这个道理，虽然明知道一路上布满坎坷，明知道自己也许坚持不到关底，但自己也愿意去尝试一下。我很遗憾直到去年的今天都还不知道ACM是什么东东，虽然从小就标榜喜欢计算机，但却也是因为种种原因而胡乱摸索不得要领。所以，当大一时进入这个大门，人生中第一次有一群人愿意和你交流这些你喜欢的，表演真正的技术，内心才会产生出一丝激动。&lt;/p>
&lt;p>爱上ACM，大抵也就是如此。&lt;/p>
&lt;p>&lt;img src="https://boiltask.com/iwbtg/0/img_1.png"
width="369"
height="300"
srcset="https://boiltask.com/iwbtg/0/img_1_hu3674992306865918077.png 480w, https://boiltask.com/iwbtg/0/img_1_hu15787663488799800362.png 1024w"
loading="lazy"
alt="ICPC"
class="gallery-image"
data-flex-grow="123"
data-flex-basis="295px"
>&lt;/p>
&lt;p>我以为在有一个教师老爸的前提下，在有一个万般告诫我不要当老师的老爸的前提下，在自己自认为对当老师完全不感兴趣的前提下，自己应该是对教东西不感什么兴趣的。然而慢慢发现，自己虽然对当老师不怎么感兴趣，但是对于能把自己所知道的知识讲给别人这件事，我确实还是很痴迷的。&lt;/p>
&lt;p>这也就是我想写这个系列的原因。&lt;/p>
&lt;p>与此同时，我感觉到自己也需要有所提高，所以写下这篇前言，也算是告诫自己吧。&lt;/p>
&lt;hr>
&lt;p>这个系列的文章，我的定位是作为一个餐后读物，特别是在已经看了很多专业性书之后来看，也许会更有感觉一些。强调的是“共鸣”，而非教学，所以大可把它当做一篇“ACM——我刚开始就是这么想的”。&lt;/p>
&lt;p>如果在看的时候偶然发现，“哎呀，我也是这么认为的。”，那么也算是我的荣幸了。&lt;/p>
&lt;p>&lt;a class="link" href="https://boiltask.com/iwbtg/introduction/" >点此查看本系列导读目录&lt;/a>&lt;/p>
&lt;p>PS：&lt;/p>
&lt;p>因为文章内可能大量使用Katex渲染数学公式，所以请使用新版浏览器阅读。&lt;/p>
&lt;p>如果遇到加载失效，请刷新页面重试。&lt;/p></description></item><item><title>【愿成其身】导读目录</title><link>https://boiltask.com/iwbtg/introduction/</link><pubDate>Sat, 13 Aug 2016 16:00:25 +0000</pubDate><guid>https://boiltask.com/iwbtg/introduction/</guid><description>&lt;blockquote>
&lt;p>本系列文章中涉及到的图片与链接因为年久可能出现失效，有需要可联系作者交流。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://boiltask.com/iwbtg/introduction/image.png"
width="140"
height="140"
srcset="https://boiltask.com/iwbtg/introduction/image_hu9106273026834457887.png 480w, https://boiltask.com/iwbtg/introduction/image_hu4069004644941277617.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;hr>
&lt;h2 id="入门导读">&lt;a href="#%e5%85%a5%e9%97%a8%e5%af%bc%e8%af%bb" class="header-anchor">&lt;/a>====入门导读=====
&lt;/h2>&lt;p>电子科技大学CDOJ：&lt;/p>
&lt;p>【Step-By-Step】&lt;/p>
&lt;p>&lt;a class="link" href="https://acm.uestc.edu.cn/" target="_blank" rel="noopener"
>https://acm.uestc.edu.cn/&lt;/a>&lt;/p>
&lt;p>南阳理工学院NYOJ：&lt;/p>
&lt;p>【进阶计划】&lt;/p>
&lt;p>&lt;a class="link" href="http://acm.nyist.net/JudgeOnline/step.php" target="_blank" rel="noopener"
>http://acm.nyist.net/JudgeOnline/step.php&lt;/a>&lt;/p>
&lt;h2 id="愿成其身">&lt;a href="#%e6%84%bf%e6%88%90%e5%85%b6%e8%ba%ab" class="header-anchor">&lt;/a>====愿成其身=====
&lt;/h2>&lt;h3 id="前言">&lt;a href="#%e5%89%8d%e8%a8%80" class="header-anchor">&lt;/a>【前言】
&lt;/h3>&lt;p>&lt;a class="link" href="https://boiltask.com/iwbtg/0/" >I wanna be the guy&lt;/a>&lt;/p>
&lt;h3 id="入门">&lt;a href="#%e5%85%a5%e9%97%a8" class="header-anchor">&lt;/a>【入门】
&lt;/h3>&lt;p>&lt;a class="link" href="https://boiltask.com/iwbtg/1/" >工欲善其事，必先利其器&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://boiltask.com/iwbtg/2/" >有趣的练习方式 – OnlineJudge&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://boiltask.com/iwbtg/3/" >转义字符 – 格式化输出&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://boiltask.com/iwbtg/4/" >从A+B谈起 – 一切的开端&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://boiltask.com/iwbtg/5/" >数据类型 – 装数据的盒子&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://boiltask.com/iwbtg/6/" >A×B的学问 – 较大数的处理&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://boiltask.com/iwbtg/7/" >整数的魅力 – 数字的最后一位&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://boiltask.com/iwbtg/8/" >实数的运用 – 整数化作的实数&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://boiltask.com/iwbtg/9/" >分支结构 – 程序的魅力&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://boiltask.com/iwbtg/10/" >问号表达式 – 酷炫的利器&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://boiltask.com/iwbtg/11/" >字符的本质 – ASCII的作用&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://boiltask.com/iwbtg/12/" >从交换输出谈起 – 黑盒的漏洞&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://boiltask.com/iwbtg/13/" >循环结构 – 计算机的神奇&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://boiltask.com/iwbtg/14/" >for循环 – 另一种表达方法&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://boiltask.com/iwbtg/15/" >思维的优化 – 数学的魅力&lt;/a>&lt;/p>
&lt;p>未完待续……&lt;/p>
&lt;h2 id="ps">&lt;a href="#ps" class="header-anchor">&lt;/a>PS
&lt;/h2>&lt;p>因为文章内可能大量使用&lt;code>Katex&lt;/code>渲染数学公式，所以请使用新版浏览器阅读。&lt;/p>
&lt;p>如果遇到加载失效，请刷新页面重试。&lt;/p>
&lt;p>公式显示测试&lt;/p>
&lt;p>这是公式f(x)=x+1 : $f \left( x \right) = x + 1$&lt;/p>
&lt;p>如果显示不全请刷新页面或者更换浏览器&lt;/p>
&lt;h2 id="若无意外-三日一更">&lt;a href="#%e8%8b%a5%e6%97%a0%e6%84%8f%e5%a4%96-%e4%b8%89%e6%97%a5%e4%b8%80%e6%9b%b4" class="header-anchor">&lt;/a>=====若无意外-三日一更=====
&lt;/h2>&lt;blockquote>
&lt;p>很显然，大概有很大的意外……&lt;/p>
&lt;/blockquote>
&lt;p>可使用&lt;code>rss&lt;/code>阅读器订阅&lt;/p>
&lt;p>&lt;code>rss&lt;/code>订阅地址如下&lt;/p>
&lt;p>&lt;a class="link" href="https://boiltask.com/categories/iwbtg/index.xml" >/categories/iwbtg/index.xml&lt;/a>&lt;/p>
&lt;p>&lt;del>推荐使用&lt;a class="link" href="%e4%b8%80%e8%a7%88%e9%98%85%e8%af%bb" >一览阅读&lt;/a>订阅&lt;/del>&lt;/p></description></item></channel></rss>